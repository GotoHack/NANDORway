
NANDORway.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001e2  00800100  00007648  000076dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00007648  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000009a  008002e2  008002e2  000078be  2**0
                  ALLOC
  3 .stab         00000a98  00000000  00000000  000078c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000002d8  00000000  00000000  00008358  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000006d0  00000000  00000000  00008630  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000011b1  00000000  00000000  00008d00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00016619  00000000  00000000  00009eb1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003067  00000000  00000000  000204ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00021633  00000000  00000000  00023531  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000a40  00000000  00000000  00044b64  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000041ff  00000000  00000000  000455a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000ee66  00000000  00000000  000497a3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macinfo 001a29b5  00000000  00000000  00058609  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_pubtypes 00001323  00000000  00000000  001fafbe  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002478  00000000  00000000  001fc2e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	byte = *(nfd->gpio_io_pin);

	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	
	return byte;
}
       0:	b2 c0       	rjmp	.+356    	; 0x166 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
       2:	00 00       	nop
	{
		Length -= *BytesProcessed;
		TEMPLATE_BUFFER_MOVE(DataStream, *BytesProcessed);
	}

	while (Length)
       4:	cf c0       	rjmp	.+414    	; 0x1a4 <__bad_interrupt>
       6:	00 00       	nop
       8:	cd c0       	rjmp	.+410    	; 0x1a4 <__bad_interrupt>
       a:	00 00       	nop
       c:	cb c0       	rjmp	.+406    	; 0x1a4 <__bad_interrupt>
       e:	00 00       	nop
      10:	c9 c0       	rjmp	.+402    	; 0x1a4 <__bad_interrupt>
      12:	00 00       	nop
      14:	c7 c0       	rjmp	.+398    	; 0x1a4 <__bad_interrupt>
      16:	00 00       	nop
      18:	c5 c0       	rjmp	.+394    	; 0x1a4 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	c3 c0       	rjmp	.+390    	; 0x1a4 <__bad_interrupt>
      1e:	00 00       	nop
      20:	c1 c0       	rjmp	.+386    	; 0x1a4 <__bad_interrupt>
      22:	00 00       	nop
      24:	bf c0       	rjmp	.+382    	; 0x1a4 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 33 37 	jmp	0x6e66	; 0x6e66 <__vector_10>
      2c:	bb c0       	rjmp	.+374    	; 0x1a4 <__bad_interrupt>
      2e:	00 00       	nop
      30:	b9 c0       	rjmp	.+370    	; 0x1a4 <__bad_interrupt>
      32:	00 00       	nop
      34:	b7 c0       	rjmp	.+366    	; 0x1a4 <__bad_interrupt>
      36:	00 00       	nop
      38:	b5 c0       	rjmp	.+362    	; 0x1a4 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	b3 c0       	rjmp	.+358    	; 0x1a4 <__bad_interrupt>
      3e:	00 00       	nop
      40:	b1 c0       	rjmp	.+354    	; 0x1a4 <__bad_interrupt>
      42:	00 00       	nop
      44:	af c0       	rjmp	.+350    	; 0x1a4 <__bad_interrupt>
      46:	00 00       	nop
      48:	ad c0       	rjmp	.+346    	; 0x1a4 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	ab c0       	rjmp	.+342    	; 0x1a4 <__bad_interrupt>
      4e:	00 00       	nop
      50:	a9 c0       	rjmp	.+338    	; 0x1a4 <__bad_interrupt>
      52:	00 00       	nop
      54:	a7 c0       	rjmp	.+334    	; 0x1a4 <__bad_interrupt>
      56:	00 00       	nop
      58:	a5 c0       	rjmp	.+330    	; 0x1a4 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	a3 c0       	rjmp	.+326    	; 0x1a4 <__bad_interrupt>
      5e:	00 00       	nop
      60:	a1 c0       	rjmp	.+322    	; 0x1a4 <__bad_interrupt>
      62:	00 00       	nop
      64:	9f c0       	rjmp	.+318    	; 0x1a4 <__bad_interrupt>
      66:	00 00       	nop
      68:	9d c0       	rjmp	.+314    	; 0x1a4 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	9b c0       	rjmp	.+310    	; 0x1a4 <__bad_interrupt>
      6e:	00 00       	nop
      70:	99 c0       	rjmp	.+306    	; 0x1a4 <__bad_interrupt>
      72:	00 00       	nop
      74:	97 c0       	rjmp	.+302    	; 0x1a4 <__bad_interrupt>
      76:	00 00       	nop
      78:	95 c0       	rjmp	.+298    	; 0x1a4 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	93 c0       	rjmp	.+294    	; 0x1a4 <__bad_interrupt>
      7e:	00 00       	nop
      80:	91 c0       	rjmp	.+290    	; 0x1a4 <__bad_interrupt>
      82:	00 00       	nop
      84:	8f c0       	rjmp	.+286    	; 0x1a4 <__bad_interrupt>
      86:	00 00       	nop
      88:	8d c0       	rjmp	.+282    	; 0x1a4 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	8b c0       	rjmp	.+278    	; 0x1a4 <__bad_interrupt>
      8e:	00 00       	nop
      90:	89 c0       	rjmp	.+274    	; 0x1a4 <__bad_interrupt>
      92:	00 00       	nop
      94:	87 c0       	rjmp	.+270    	; 0x1a4 <__bad_interrupt>
      96:	00 00       	nop
      98:	00 14       	cp	r0, r0
      9a:	fc 13       	cpse	r31, r28
      9c:	f8 13       	cpse	r31, r24
      9e:	f4 13       	cpse	r31, r20
      a0:	f0 13       	cpse	r31, r16
      a2:	ec 13       	cpse	r30, r28
      a4:	e8 13       	cpse	r30, r24
      a6:	e4 13       	cpse	r30, r20
      a8:	e0 13       	cpse	r30, r16
      aa:	dc 13       	cpse	r29, r28
      ac:	5b 10       	cpse	r5, r11
      ae:	57 10       	cpse	r5, r7
      b0:	53 10       	cpse	r5, r3
      b2:	4f 10       	cpse	r4, r15
      b4:	4b 10       	cpse	r4, r11
      b6:	60 15       	cp	r22, r0
      b8:	57 15       	cp	r21, r7
      ba:	4e 15       	cp	r20, r14
      bc:	45 15       	cp	r20, r5
      be:	3c 15       	cp	r19, r12
      c0:	33 15       	cp	r19, r3
      c2:	2f 15       	cp	r18, r15
      c4:	2a 15       	cp	r18, r10
      c6:	9d 15       	cp	r25, r13
      c8:	47 10       	cpse	r4, r7
      ca:	65 15       	cp	r22, r5
      cc:	18 0f       	add	r17, r24
      ce:	bd 0c       	add	r11, r13
      d0:	58 0b       	sbc	r21, r24
      d2:	ac 0c       	add	r10, r12

000000d4 <DeviceDescriptor>:
      d4:	12 01 00 02 00 00 00 08 0b b0 be ba 00 00 01 02     ................
      e4:	03 01                                               ..

000000e6 <ConfigurationDescriptor>:
      e6:	09 02 20 00 01 01 00 c0 7d 09 04 00 00 02 ff 00     .. .....}.......
      f6:	00 00 07 05 81 02 40 00 00 07 05 02 02 40 00 00     ......@......@..

00000106 <LanguageString>:
     106:	04 03 09 04                                         ....

0000010a <ManufacturerString>:
     10a:	0e 03 6a 00 75 00 64 00 67 00 65 00 73 00 00 00     ..j.u.d.g.e.s...

0000011a <ProductString>:
     11a:	40 03 4e 00 4f 00 52 00 77 00 61 00 79 00 20 00     @.N.O.R.w.a.y. .
     12a:	50 00 53 00 33 00 20 00 46 00 6c 00 61 00 73 00     P.S.3. .F.l.a.s.
     13a:	68 00 65 00 72 00 20 00 28 00 43 00 75 00 73 00     h.e.r. .(.C.u.s.
     14a:	74 00 6f 00 6d 00 20 00 55 00 53 00 42 00 29 00     t.o.m. .U.S.B.).
     15a:	00 00                                               ..

0000015c <SerialNumberString>:
     15c:	08 03 30 00 30 00 31 00 00 00                       ..0.0.1...

00000166 <__ctors_end>:
     166:	11 24       	eor	r1, r1
     168:	1f be       	out	0x3f, r1	; 63
     16a:	cf ef       	ldi	r28, 0xFF	; 255
     16c:	d0 e2       	ldi	r29, 0x20	; 32
     16e:	de bf       	out	0x3e, r29	; 62
     170:	cd bf       	out	0x3d, r28	; 61

00000172 <__do_copy_data>:
     172:	12 e0       	ldi	r17, 0x02	; 2
     174:	a0 e0       	ldi	r26, 0x00	; 0
     176:	b1 e0       	ldi	r27, 0x01	; 1
     178:	e8 e4       	ldi	r30, 0x48	; 72
     17a:	f6 e7       	ldi	r31, 0x76	; 118
     17c:	00 e0       	ldi	r16, 0x00	; 0
     17e:	0b bf       	out	0x3b, r16	; 59
     180:	02 c0       	rjmp	.+4      	; 0x186 <__do_copy_data+0x14>
     182:	07 90       	elpm	r0, Z+
     184:	0d 92       	st	X+, r0
     186:	a2 3e       	cpi	r26, 0xE2	; 226
     188:	b1 07       	cpc	r27, r17
     18a:	d9 f7       	brne	.-10     	; 0x182 <__do_copy_data+0x10>

0000018c <__do_clear_bss>:
     18c:	13 e0       	ldi	r17, 0x03	; 3
     18e:	a2 ee       	ldi	r26, 0xE2	; 226
     190:	b2 e0       	ldi	r27, 0x02	; 2
     192:	01 c0       	rjmp	.+2      	; 0x196 <.do_clear_bss_start>

00000194 <.do_clear_bss_loop>:
     194:	1d 92       	st	X+, r1

00000196 <.do_clear_bss_start>:
     196:	ac 37       	cpi	r26, 0x7C	; 124
     198:	b1 07       	cpc	r27, r17
     19a:	e1 f7       	brne	.-8      	; 0x194 <.do_clear_bss_loop>
     19c:	0e 94 fe 0a 	call	0x15fc	; 0x15fc <main>
     1a0:	0c 94 22 3b 	jmp	0x7644	; 0x7644 <_exit>

000001a4 <__bad_interrupt>:
     1a4:	2d cf       	rjmp	.-422    	; 0x0 <__vectors>

000001a6 <__muldi3>:
     1a6:	ac e2       	ldi	r26, 0x2C	; 44
     1a8:	b0 e0       	ldi	r27, 0x00	; 0
     1aa:	e9 ed       	ldi	r30, 0xD9	; 217
     1ac:	f0 e0       	ldi	r31, 0x00	; 0
     1ae:	0c 94 eb 3a 	jmp	0x75d6	; 0x75d6 <__prologue_saves__>
     1b2:	29 83       	std	Y+1, r18	; 0x01
     1b4:	3a 83       	std	Y+2, r19	; 0x02
     1b6:	4b 83       	std	Y+3, r20	; 0x03
     1b8:	5c 83       	std	Y+4, r21	; 0x04
     1ba:	6d 83       	std	Y+5, r22	; 0x05
     1bc:	7e 83       	std	Y+6, r23	; 0x06
     1be:	8f 83       	std	Y+7, r24	; 0x07
     1c0:	98 87       	std	Y+8, r25	; 0x08
     1c2:	a9 86       	std	Y+9, r10	; 0x09
     1c4:	ba 86       	std	Y+10, r11	; 0x0a
     1c6:	cb 86       	std	Y+11, r12	; 0x0b
     1c8:	dc 86       	std	Y+12, r13	; 0x0c
     1ca:	ed 86       	std	Y+13, r14	; 0x0d
     1cc:	fe 86       	std	Y+14, r15	; 0x0e
     1ce:	0f 87       	std	Y+15, r16	; 0x0f
     1d0:	18 8b       	std	Y+16, r17	; 0x10
     1d2:	69 80       	ldd	r6, Y+1	; 0x01
     1d4:	7a 80       	ldd	r7, Y+2	; 0x02
     1d6:	8b 80       	ldd	r8, Y+3	; 0x03
     1d8:	9c 80       	ldd	r9, Y+4	; 0x04
     1da:	69 a2       	std	Y+33, r6	; 0x21
     1dc:	7a a2       	std	Y+34, r7	; 0x22
     1de:	8b a2       	std	Y+35, r8	; 0x23
     1e0:	9c a2       	std	Y+36, r9	; 0x24
     1e2:	84 01       	movw	r16, r8
     1e4:	73 01       	movw	r14, r6
     1e6:	8f ef       	ldi	r24, 0xFF	; 255
     1e8:	9f ef       	ldi	r25, 0xFF	; 255
     1ea:	a0 e0       	ldi	r26, 0x00	; 0
     1ec:	b0 e0       	ldi	r27, 0x00	; 0
     1ee:	e8 22       	and	r14, r24
     1f0:	f9 22       	and	r15, r25
     1f2:	0a 23       	and	r16, r26
     1f4:	1b 23       	and	r17, r27
     1f6:	14 01       	movw	r2, r8
     1f8:	44 24       	eor	r4, r4
     1fa:	55 24       	eor	r5, r5
     1fc:	69 84       	ldd	r6, Y+9	; 0x09
     1fe:	7a 84       	ldd	r7, Y+10	; 0x0a
     200:	8b 84       	ldd	r8, Y+11	; 0x0b
     202:	9c 84       	ldd	r9, Y+12	; 0x0c
     204:	6d a2       	std	Y+37, r6	; 0x25
     206:	7e a2       	std	Y+38, r7	; 0x26
     208:	8f a2       	std	Y+39, r8	; 0x27
     20a:	98 a6       	std	Y+40, r9	; 0x28
     20c:	64 01       	movw	r12, r8
     20e:	53 01       	movw	r10, r6
     210:	a8 22       	and	r10, r24
     212:	b9 22       	and	r11, r25
     214:	ca 22       	and	r12, r26
     216:	db 22       	and	r13, r27
     218:	34 01       	movw	r6, r8
     21a:	88 24       	eor	r8, r8
     21c:	99 24       	eor	r9, r9
     21e:	c6 01       	movw	r24, r12
     220:	b5 01       	movw	r22, r10
     222:	a8 01       	movw	r20, r16
     224:	97 01       	movw	r18, r14
     226:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     22a:	69 a7       	std	Y+41, r22	; 0x29
     22c:	7a a7       	std	Y+42, r23	; 0x2a
     22e:	8b a7       	std	Y+43, r24	; 0x2b
     230:	9c a7       	std	Y+44, r25	; 0x2c
     232:	c4 01       	movw	r24, r8
     234:	b3 01       	movw	r22, r6
     236:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     23a:	7b 01       	movw	r14, r22
     23c:	8c 01       	movw	r16, r24
     23e:	c6 01       	movw	r24, r12
     240:	b5 01       	movw	r22, r10
     242:	a2 01       	movw	r20, r4
     244:	91 01       	movw	r18, r2
     246:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     24a:	5b 01       	movw	r10, r22
     24c:	6c 01       	movw	r12, r24
     24e:	c4 01       	movw	r24, r8
     250:	b3 01       	movw	r22, r6
     252:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     256:	9b 01       	movw	r18, r22
     258:	ac 01       	movw	r20, r24
     25a:	ea 0c       	add	r14, r10
     25c:	fb 1c       	adc	r15, r11
     25e:	0c 1d       	adc	r16, r12
     260:	1d 1d       	adc	r17, r13
     262:	69 a4       	ldd	r6, Y+41	; 0x29
     264:	7a a4       	ldd	r7, Y+42	; 0x2a
     266:	8b a4       	ldd	r8, Y+43	; 0x2b
     268:	9c a4       	ldd	r9, Y+44	; 0x2c
     26a:	c4 01       	movw	r24, r8
     26c:	aa 27       	eor	r26, r26
     26e:	bb 27       	eor	r27, r27
     270:	e8 0e       	add	r14, r24
     272:	f9 1e       	adc	r15, r25
     274:	0a 1f       	adc	r16, r26
     276:	1b 1f       	adc	r17, r27
     278:	ea 14       	cp	r14, r10
     27a:	fb 04       	cpc	r15, r11
     27c:	0c 05       	cpc	r16, r12
     27e:	1d 05       	cpc	r17, r13
     280:	20 f4       	brcc	.+8      	; 0x28a <__muldi3+0xe4>
     282:	20 50       	subi	r18, 0x00	; 0
     284:	30 40       	sbci	r19, 0x00	; 0
     286:	4f 4f       	sbci	r20, 0xFF	; 255
     288:	5f 4f       	sbci	r21, 0xFF	; 255
     28a:	c8 01       	movw	r24, r16
     28c:	aa 27       	eor	r26, r26
     28e:	bb 27       	eor	r27, r27
     290:	82 0f       	add	r24, r18
     292:	93 1f       	adc	r25, r19
     294:	a4 1f       	adc	r26, r20
     296:	b5 1f       	adc	r27, r21
     298:	8d 8f       	std	Y+29, r24	; 0x1d
     29a:	9e 8f       	std	Y+30, r25	; 0x1e
     29c:	af 8f       	std	Y+31, r26	; 0x1f
     29e:	b8 a3       	std	Y+32, r27	; 0x20
     2a0:	87 01       	movw	r16, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	ee 24       	eor	r14, r14
     2a6:	29 a5       	ldd	r18, Y+41	; 0x29
     2a8:	3a a5       	ldd	r19, Y+42	; 0x2a
     2aa:	4b a5       	ldd	r20, Y+43	; 0x2b
     2ac:	5c a5       	ldd	r21, Y+44	; 0x2c
     2ae:	40 70       	andi	r20, 0x00	; 0
     2b0:	50 70       	andi	r21, 0x00	; 0
     2b2:	e2 0e       	add	r14, r18
     2b4:	f3 1e       	adc	r15, r19
     2b6:	04 1f       	adc	r16, r20
     2b8:	15 1f       	adc	r17, r21
     2ba:	e9 8e       	std	Y+25, r14	; 0x19
     2bc:	fa 8e       	std	Y+26, r15	; 0x1a
     2be:	0b 8f       	std	Y+27, r16	; 0x1b
     2c0:	1c 8f       	std	Y+28, r17	; 0x1c
     2c2:	de 2c       	mov	r13, r14
     2c4:	aa 8c       	ldd	r10, Y+26	; 0x1a
     2c6:	cb 8c       	ldd	r12, Y+27	; 0x1b
     2c8:	6c 8c       	ldd	r6, Y+28	; 0x1c
     2ca:	8d 8b       	std	Y+21, r24	; 0x15
     2cc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     2ce:	8e 8b       	std	Y+22, r24	; 0x16
     2d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
     2d2:	8f 8b       	std	Y+23, r24	; 0x17
     2d4:	88 a1       	ldd	r24, Y+32	; 0x20
     2d6:	88 8f       	std	Y+24, r24	; 0x18
     2d8:	2d 85       	ldd	r18, Y+13	; 0x0d
     2da:	3e 85       	ldd	r19, Y+14	; 0x0e
     2dc:	4f 85       	ldd	r20, Y+15	; 0x0f
     2de:	58 89       	ldd	r21, Y+16	; 0x10
     2e0:	69 a1       	ldd	r22, Y+33	; 0x21
     2e2:	7a a1       	ldd	r23, Y+34	; 0x22
     2e4:	8b a1       	ldd	r24, Y+35	; 0x23
     2e6:	9c a1       	ldd	r25, Y+36	; 0x24
     2e8:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     2ec:	7b 01       	movw	r14, r22
     2ee:	8c 01       	movw	r16, r24
     2f0:	2d 81       	ldd	r18, Y+5	; 0x05
     2f2:	3e 81       	ldd	r19, Y+6	; 0x06
     2f4:	4f 81       	ldd	r20, Y+7	; 0x07
     2f6:	58 85       	ldd	r21, Y+8	; 0x08
     2f8:	6d a1       	ldd	r22, Y+37	; 0x25
     2fa:	7e a1       	ldd	r23, Y+38	; 0x26
     2fc:	8f a1       	ldd	r24, Y+39	; 0x27
     2fe:	98 a5       	ldd	r25, Y+40	; 0x28
     300:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     304:	e6 0e       	add	r14, r22
     306:	f7 1e       	adc	r15, r23
     308:	08 1f       	adc	r16, r24
     30a:	19 1f       	adc	r17, r25
     30c:	6d 89       	ldd	r22, Y+21	; 0x15
     30e:	7e 89       	ldd	r23, Y+22	; 0x16
     310:	8f 89       	ldd	r24, Y+23	; 0x17
     312:	98 8d       	ldd	r25, Y+24	; 0x18
     314:	6e 0d       	add	r22, r14
     316:	7f 1d       	adc	r23, r15
     318:	80 1f       	adc	r24, r16
     31a:	91 1f       	adc	r25, r17
     31c:	6d 8b       	std	Y+21, r22	; 0x15
     31e:	7e 8b       	std	Y+22, r23	; 0x16
     320:	8f 8b       	std	Y+23, r24	; 0x17
     322:	98 8f       	std	Y+24, r25	; 0x18
     324:	7e 89       	ldd	r23, Y+22	; 0x16
     326:	2d 2d       	mov	r18, r13
     328:	3a 2d       	mov	r19, r10
     32a:	4c 2d       	mov	r20, r12
     32c:	56 2d       	mov	r21, r6
     32e:	8f 89       	ldd	r24, Y+23	; 0x17
     330:	98 8d       	ldd	r25, Y+24	; 0x18
     332:	ac 96       	adiw	r28, 0x2c	; 44
     334:	e2 e1       	ldi	r30, 0x12	; 18
     336:	0c 94 07 3b 	jmp	0x760e	; 0x760e <__epilogue_restores__>

0000033a <__lshrdi3>:
     33a:	0f 93       	push	r16
     33c:	df 93       	push	r29
     33e:	cf 93       	push	r28
     340:	cd b7       	in	r28, 0x3d	; 61
     342:	de b7       	in	r29, 0x3e	; 62
     344:	60 97       	sbiw	r28, 0x10	; 16
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
     350:	00 23       	and	r16, r16
     352:	09 f4       	brne	.+2      	; 0x356 <__lshrdi3+0x1c>
     354:	59 c0       	rjmp	.+178    	; 0x408 <__lshrdi3+0xce>
     356:	29 83       	std	Y+1, r18	; 0x01
     358:	3a 83       	std	Y+2, r19	; 0x02
     35a:	4b 83       	std	Y+3, r20	; 0x03
     35c:	5c 83       	std	Y+4, r21	; 0x04
     35e:	6d 83       	std	Y+5, r22	; 0x05
     360:	7e 83       	std	Y+6, r23	; 0x06
     362:	8f 83       	std	Y+7, r24	; 0x07
     364:	98 87       	std	Y+8, r25	; 0x08
     366:	e0 e2       	ldi	r30, 0x20	; 32
     368:	e0 1b       	sub	r30, r16
     36a:	2d 81       	ldd	r18, Y+5	; 0x05
     36c:	3e 81       	ldd	r19, Y+6	; 0x06
     36e:	4f 81       	ldd	r20, Y+7	; 0x07
     370:	58 85       	ldd	r21, Y+8	; 0x08
     372:	1e 16       	cp	r1, r30
     374:	bc f0       	brlt	.+46     	; 0x3a4 <__lshrdi3+0x6a>
     376:	1d 86       	std	Y+13, r1	; 0x0d
     378:	1e 86       	std	Y+14, r1	; 0x0e
     37a:	1f 86       	std	Y+15, r1	; 0x0f
     37c:	18 8a       	std	Y+16, r1	; 0x10
     37e:	8e 2f       	mov	r24, r30
     380:	99 27       	eor	r25, r25
     382:	87 fd       	sbrc	r24, 7
     384:	90 95       	com	r25
     386:	90 95       	com	r25
     388:	81 95       	neg	r24
     38a:	9f 4f       	sbci	r25, 0xFF	; 255
     38c:	04 c0       	rjmp	.+8      	; 0x396 <__lshrdi3+0x5c>
     38e:	56 95       	lsr	r21
     390:	47 95       	ror	r20
     392:	37 95       	ror	r19
     394:	27 95       	ror	r18
     396:	8a 95       	dec	r24
     398:	d2 f7       	brpl	.-12     	; 0x38e <__lshrdi3+0x54>
     39a:	29 87       	std	Y+9, r18	; 0x09
     39c:	3a 87       	std	Y+10, r19	; 0x0a
     39e:	4b 87       	std	Y+11, r20	; 0x0b
     3a0:	5c 87       	std	Y+12, r21	; 0x0c
     3a2:	2a c0       	rjmp	.+84     	; 0x3f8 <__lshrdi3+0xbe>
     3a4:	ca 01       	movw	r24, r20
     3a6:	b9 01       	movw	r22, r18
     3a8:	00 2e       	mov	r0, r16
     3aa:	04 c0       	rjmp	.+8      	; 0x3b4 <__lshrdi3+0x7a>
     3ac:	96 95       	lsr	r25
     3ae:	87 95       	ror	r24
     3b0:	77 95       	ror	r23
     3b2:	67 95       	ror	r22
     3b4:	0a 94       	dec	r0
     3b6:	d2 f7       	brpl	.-12     	; 0x3ac <__lshrdi3+0x72>
     3b8:	6d 87       	std	Y+13, r22	; 0x0d
     3ba:	7e 87       	std	Y+14, r23	; 0x0e
     3bc:	8f 87       	std	Y+15, r24	; 0x0f
     3be:	98 8b       	std	Y+16, r25	; 0x10
     3c0:	da 01       	movw	r26, r20
     3c2:	c9 01       	movw	r24, r18
     3c4:	04 c0       	rjmp	.+8      	; 0x3ce <__lshrdi3+0x94>
     3c6:	88 0f       	add	r24, r24
     3c8:	99 1f       	adc	r25, r25
     3ca:	aa 1f       	adc	r26, r26
     3cc:	bb 1f       	adc	r27, r27
     3ce:	ea 95       	dec	r30
     3d0:	d2 f7       	brpl	.-12     	; 0x3c6 <__lshrdi3+0x8c>
     3d2:	29 81       	ldd	r18, Y+1	; 0x01
     3d4:	3a 81       	ldd	r19, Y+2	; 0x02
     3d6:	4b 81       	ldd	r20, Y+3	; 0x03
     3d8:	5c 81       	ldd	r21, Y+4	; 0x04
     3da:	04 c0       	rjmp	.+8      	; 0x3e4 <__lshrdi3+0xaa>
     3dc:	56 95       	lsr	r21
     3de:	47 95       	ror	r20
     3e0:	37 95       	ror	r19
     3e2:	27 95       	ror	r18
     3e4:	0a 95       	dec	r16
     3e6:	d2 f7       	brpl	.-12     	; 0x3dc <__lshrdi3+0xa2>
     3e8:	82 2b       	or	r24, r18
     3ea:	93 2b       	or	r25, r19
     3ec:	a4 2b       	or	r26, r20
     3ee:	b5 2b       	or	r27, r21
     3f0:	89 87       	std	Y+9, r24	; 0x09
     3f2:	9a 87       	std	Y+10, r25	; 0x0a
     3f4:	ab 87       	std	Y+11, r26	; 0x0b
     3f6:	bc 87       	std	Y+12, r27	; 0x0c
     3f8:	29 85       	ldd	r18, Y+9	; 0x09
     3fa:	3a 85       	ldd	r19, Y+10	; 0x0a
     3fc:	4b 85       	ldd	r20, Y+11	; 0x0b
     3fe:	5c 85       	ldd	r21, Y+12	; 0x0c
     400:	6d 85       	ldd	r22, Y+13	; 0x0d
     402:	7e 85       	ldd	r23, Y+14	; 0x0e
     404:	8f 85       	ldd	r24, Y+15	; 0x0f
     406:	98 89       	ldd	r25, Y+16	; 0x10
     408:	60 96       	adiw	r28, 0x10	; 16
     40a:	0f b6       	in	r0, 0x3f	; 63
     40c:	f8 94       	cli
     40e:	de bf       	out	0x3e, r29	; 62
     410:	0f be       	out	0x3f, r0	; 63
     412:	cd bf       	out	0x3d, r28	; 61
     414:	cf 91       	pop	r28
     416:	df 91       	pop	r29
     418:	0f 91       	pop	r16
     41a:	08 95       	ret

0000041c <__ashldi3>:
     41c:	0f 93       	push	r16
     41e:	df 93       	push	r29
     420:	cf 93       	push	r28
     422:	cd b7       	in	r28, 0x3d	; 61
     424:	de b7       	in	r29, 0x3e	; 62
     426:	60 97       	sbiw	r28, 0x10	; 16
     428:	0f b6       	in	r0, 0x3f	; 63
     42a:	f8 94       	cli
     42c:	de bf       	out	0x3e, r29	; 62
     42e:	0f be       	out	0x3f, r0	; 63
     430:	cd bf       	out	0x3d, r28	; 61
     432:	00 23       	and	r16, r16
     434:	09 f4       	brne	.+2      	; 0x438 <__ashldi3+0x1c>
     436:	59 c0       	rjmp	.+178    	; 0x4ea <__ashldi3+0xce>
     438:	29 83       	std	Y+1, r18	; 0x01
     43a:	3a 83       	std	Y+2, r19	; 0x02
     43c:	4b 83       	std	Y+3, r20	; 0x03
     43e:	5c 83       	std	Y+4, r21	; 0x04
     440:	6d 83       	std	Y+5, r22	; 0x05
     442:	7e 83       	std	Y+6, r23	; 0x06
     444:	8f 83       	std	Y+7, r24	; 0x07
     446:	98 87       	std	Y+8, r25	; 0x08
     448:	e0 e2       	ldi	r30, 0x20	; 32
     44a:	e0 1b       	sub	r30, r16
     44c:	29 81       	ldd	r18, Y+1	; 0x01
     44e:	3a 81       	ldd	r19, Y+2	; 0x02
     450:	4b 81       	ldd	r20, Y+3	; 0x03
     452:	5c 81       	ldd	r21, Y+4	; 0x04
     454:	1e 16       	cp	r1, r30
     456:	bc f0       	brlt	.+46     	; 0x486 <__ashldi3+0x6a>
     458:	19 86       	std	Y+9, r1	; 0x09
     45a:	1a 86       	std	Y+10, r1	; 0x0a
     45c:	1b 86       	std	Y+11, r1	; 0x0b
     45e:	1c 86       	std	Y+12, r1	; 0x0c
     460:	8e 2f       	mov	r24, r30
     462:	99 27       	eor	r25, r25
     464:	87 fd       	sbrc	r24, 7
     466:	90 95       	com	r25
     468:	90 95       	com	r25
     46a:	81 95       	neg	r24
     46c:	9f 4f       	sbci	r25, 0xFF	; 255
     46e:	04 c0       	rjmp	.+8      	; 0x478 <__ashldi3+0x5c>
     470:	22 0f       	add	r18, r18
     472:	33 1f       	adc	r19, r19
     474:	44 1f       	adc	r20, r20
     476:	55 1f       	adc	r21, r21
     478:	8a 95       	dec	r24
     47a:	d2 f7       	brpl	.-12     	; 0x470 <__ashldi3+0x54>
     47c:	2d 87       	std	Y+13, r18	; 0x0d
     47e:	3e 87       	std	Y+14, r19	; 0x0e
     480:	4f 87       	std	Y+15, r20	; 0x0f
     482:	58 8b       	std	Y+16, r21	; 0x10
     484:	2a c0       	rjmp	.+84     	; 0x4da <__ashldi3+0xbe>
     486:	ca 01       	movw	r24, r20
     488:	b9 01       	movw	r22, r18
     48a:	00 2e       	mov	r0, r16
     48c:	04 c0       	rjmp	.+8      	; 0x496 <__ashldi3+0x7a>
     48e:	66 0f       	add	r22, r22
     490:	77 1f       	adc	r23, r23
     492:	88 1f       	adc	r24, r24
     494:	99 1f       	adc	r25, r25
     496:	0a 94       	dec	r0
     498:	d2 f7       	brpl	.-12     	; 0x48e <__ashldi3+0x72>
     49a:	69 87       	std	Y+9, r22	; 0x09
     49c:	7a 87       	std	Y+10, r23	; 0x0a
     49e:	8b 87       	std	Y+11, r24	; 0x0b
     4a0:	9c 87       	std	Y+12, r25	; 0x0c
     4a2:	da 01       	movw	r26, r20
     4a4:	c9 01       	movw	r24, r18
     4a6:	04 c0       	rjmp	.+8      	; 0x4b0 <__ashldi3+0x94>
     4a8:	b6 95       	lsr	r27
     4aa:	a7 95       	ror	r26
     4ac:	97 95       	ror	r25
     4ae:	87 95       	ror	r24
     4b0:	ea 95       	dec	r30
     4b2:	d2 f7       	brpl	.-12     	; 0x4a8 <__ashldi3+0x8c>
     4b4:	2d 81       	ldd	r18, Y+5	; 0x05
     4b6:	3e 81       	ldd	r19, Y+6	; 0x06
     4b8:	4f 81       	ldd	r20, Y+7	; 0x07
     4ba:	58 85       	ldd	r21, Y+8	; 0x08
     4bc:	04 c0       	rjmp	.+8      	; 0x4c6 <__ashldi3+0xaa>
     4be:	22 0f       	add	r18, r18
     4c0:	33 1f       	adc	r19, r19
     4c2:	44 1f       	adc	r20, r20
     4c4:	55 1f       	adc	r21, r21
     4c6:	0a 95       	dec	r16
     4c8:	d2 f7       	brpl	.-12     	; 0x4be <__ashldi3+0xa2>
     4ca:	82 2b       	or	r24, r18
     4cc:	93 2b       	or	r25, r19
     4ce:	a4 2b       	or	r26, r20
     4d0:	b5 2b       	or	r27, r21
     4d2:	8d 87       	std	Y+13, r24	; 0x0d
     4d4:	9e 87       	std	Y+14, r25	; 0x0e
     4d6:	af 87       	std	Y+15, r26	; 0x0f
     4d8:	b8 8b       	std	Y+16, r27	; 0x10
     4da:	29 85       	ldd	r18, Y+9	; 0x09
     4dc:	3a 85       	ldd	r19, Y+10	; 0x0a
     4de:	4b 85       	ldd	r20, Y+11	; 0x0b
     4e0:	5c 85       	ldd	r21, Y+12	; 0x0c
     4e2:	6d 85       	ldd	r22, Y+13	; 0x0d
     4e4:	7e 85       	ldd	r23, Y+14	; 0x0e
     4e6:	8f 85       	ldd	r24, Y+15	; 0x0f
     4e8:	98 89       	ldd	r25, Y+16	; 0x10
     4ea:	60 96       	adiw	r28, 0x10	; 16
     4ec:	0f b6       	in	r0, 0x3f	; 63
     4ee:	f8 94       	cli
     4f0:	de bf       	out	0x3e, r29	; 62
     4f2:	0f be       	out	0x3f, r0	; 63
     4f4:	cd bf       	out	0x3d, r28	; 61
     4f6:	cf 91       	pop	r28
     4f8:	df 91       	pop	r29
     4fa:	0f 91       	pop	r16
     4fc:	08 95       	ret

000004fe <__udivdi3>:
     4fe:	a8 e3       	ldi	r26, 0x38	; 56
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	e5 e8       	ldi	r30, 0x85	; 133
     504:	f2 e0       	ldi	r31, 0x02	; 2
     506:	0c 94 eb 3a 	jmp	0x75d6	; 0x75d6 <__prologue_saves__>
     50a:	29 83       	std	Y+1, r18	; 0x01
     50c:	3a 83       	std	Y+2, r19	; 0x02
     50e:	4b 83       	std	Y+3, r20	; 0x03
     510:	5c 83       	std	Y+4, r21	; 0x04
     512:	6d 83       	std	Y+5, r22	; 0x05
     514:	7e 83       	std	Y+6, r23	; 0x06
     516:	8f 83       	std	Y+7, r24	; 0x07
     518:	98 87       	std	Y+8, r25	; 0x08
     51a:	a9 86       	std	Y+9, r10	; 0x09
     51c:	ba 86       	std	Y+10, r11	; 0x0a
     51e:	cb 86       	std	Y+11, r12	; 0x0b
     520:	dc 86       	std	Y+12, r13	; 0x0c
     522:	ed 86       	std	Y+13, r14	; 0x0d
     524:	fe 86       	std	Y+14, r15	; 0x0e
     526:	0f 87       	std	Y+15, r16	; 0x0f
     528:	18 8b       	std	Y+16, r17	; 0x10
     52a:	e9 84       	ldd	r14, Y+9	; 0x09
     52c:	fa 84       	ldd	r15, Y+10	; 0x0a
     52e:	0b 85       	ldd	r16, Y+11	; 0x0b
     530:	1c 85       	ldd	r17, Y+12	; 0x0c
     532:	2d 85       	ldd	r18, Y+13	; 0x0d
     534:	3e 85       	ldd	r19, Y+14	; 0x0e
     536:	4f 85       	ldd	r20, Y+15	; 0x0f
     538:	58 89       	ldd	r21, Y+16	; 0x10
     53a:	29 80       	ldd	r2, Y+1	; 0x01
     53c:	3a 80       	ldd	r3, Y+2	; 0x02
     53e:	4b 80       	ldd	r4, Y+3	; 0x03
     540:	5c 80       	ldd	r5, Y+4	; 0x04
     542:	2d a2       	std	Y+37, r2	; 0x25
     544:	3e a2       	std	Y+38, r3	; 0x26
     546:	4f a2       	std	Y+39, r4	; 0x27
     548:	58 a6       	std	Y+40, r5	; 0x28
     54a:	ad 80       	ldd	r10, Y+5	; 0x05
     54c:	be 80       	ldd	r11, Y+6	; 0x06
     54e:	cf 80       	ldd	r12, Y+7	; 0x07
     550:	d8 84       	ldd	r13, Y+8	; 0x08
     552:	21 15       	cp	r18, r1
     554:	31 05       	cpc	r19, r1
     556:	41 05       	cpc	r20, r1
     558:	51 05       	cpc	r21, r1
     55a:	09 f0       	breq	.+2      	; 0x55e <__udivdi3+0x60>
     55c:	be c3       	rjmp	.+1916   	; 0xcda <__udivdi3+0x7dc>
     55e:	ae 14       	cp	r10, r14
     560:	bf 04       	cpc	r11, r15
     562:	c0 06       	cpc	r12, r16
     564:	d1 06       	cpc	r13, r17
     566:	08 f0       	brcs	.+2      	; 0x56a <__udivdi3+0x6c>
     568:	4f c1       	rjmp	.+670    	; 0x808 <__udivdi3+0x30a>
     56a:	20 e0       	ldi	r18, 0x00	; 0
     56c:	e2 16       	cp	r14, r18
     56e:	20 e0       	ldi	r18, 0x00	; 0
     570:	f2 06       	cpc	r15, r18
     572:	21 e0       	ldi	r18, 0x01	; 1
     574:	02 07       	cpc	r16, r18
     576:	20 e0       	ldi	r18, 0x00	; 0
     578:	12 07       	cpc	r17, r18
     57a:	58 f4       	brcc	.+22     	; 0x592 <__udivdi3+0x94>
     57c:	3f ef       	ldi	r19, 0xFF	; 255
     57e:	e3 16       	cp	r14, r19
     580:	f1 04       	cpc	r15, r1
     582:	01 05       	cpc	r16, r1
     584:	11 05       	cpc	r17, r1
     586:	09 f0       	breq	.+2      	; 0x58a <__udivdi3+0x8c>
     588:	90 f4       	brcc	.+36     	; 0x5ae <__udivdi3+0xb0>
     58a:	20 e0       	ldi	r18, 0x00	; 0
     58c:	30 e0       	ldi	r19, 0x00	; 0
     58e:	a9 01       	movw	r20, r18
     590:	17 c0       	rjmp	.+46     	; 0x5c0 <__udivdi3+0xc2>
     592:	40 e0       	ldi	r20, 0x00	; 0
     594:	e4 16       	cp	r14, r20
     596:	40 e0       	ldi	r20, 0x00	; 0
     598:	f4 06       	cpc	r15, r20
     59a:	40 e0       	ldi	r20, 0x00	; 0
     59c:	04 07       	cpc	r16, r20
     59e:	41 e0       	ldi	r20, 0x01	; 1
     5a0:	14 07       	cpc	r17, r20
     5a2:	50 f4       	brcc	.+20     	; 0x5b8 <__udivdi3+0xba>
     5a4:	20 e1       	ldi	r18, 0x10	; 16
     5a6:	30 e0       	ldi	r19, 0x00	; 0
     5a8:	40 e0       	ldi	r20, 0x00	; 0
     5aa:	50 e0       	ldi	r21, 0x00	; 0
     5ac:	09 c0       	rjmp	.+18     	; 0x5c0 <__udivdi3+0xc2>
     5ae:	28 e0       	ldi	r18, 0x08	; 8
     5b0:	30 e0       	ldi	r19, 0x00	; 0
     5b2:	40 e0       	ldi	r20, 0x00	; 0
     5b4:	50 e0       	ldi	r21, 0x00	; 0
     5b6:	04 c0       	rjmp	.+8      	; 0x5c0 <__udivdi3+0xc2>
     5b8:	28 e1       	ldi	r18, 0x18	; 24
     5ba:	30 e0       	ldi	r19, 0x00	; 0
     5bc:	40 e0       	ldi	r20, 0x00	; 0
     5be:	50 e0       	ldi	r21, 0x00	; 0
     5c0:	d8 01       	movw	r26, r16
     5c2:	c7 01       	movw	r24, r14
     5c4:	02 2e       	mov	r0, r18
     5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <__udivdi3+0xd2>
     5c8:	b6 95       	lsr	r27
     5ca:	a7 95       	ror	r26
     5cc:	97 95       	ror	r25
     5ce:	87 95       	ror	r24
     5d0:	0a 94       	dec	r0
     5d2:	d2 f7       	brpl	.-12     	; 0x5c8 <__udivdi3+0xca>
     5d4:	8e 51       	subi	r24, 0x1E	; 30
     5d6:	9e 4f       	sbci	r25, 0xFE	; 254
     5d8:	dc 01       	movw	r26, r24
     5da:	6c 91       	ld	r22, X
     5dc:	80 e2       	ldi	r24, 0x20	; 32
     5de:	90 e0       	ldi	r25, 0x00	; 0
     5e0:	a0 e0       	ldi	r26, 0x00	; 0
     5e2:	b0 e0       	ldi	r27, 0x00	; 0
     5e4:	82 1b       	sub	r24, r18
     5e6:	93 0b       	sbc	r25, r19
     5e8:	a4 0b       	sbc	r26, r20
     5ea:	b5 0b       	sbc	r27, r21
     5ec:	86 1b       	sub	r24, r22
     5ee:	91 09       	sbc	r25, r1
     5f0:	a1 09       	sbc	r26, r1
     5f2:	b1 09       	sbc	r27, r1
     5f4:	00 97       	sbiw	r24, 0x00	; 0
     5f6:	a1 05       	cpc	r26, r1
     5f8:	b1 05       	cpc	r27, r1
     5fa:	a1 f1       	breq	.+104    	; 0x664 <__udivdi3+0x166>
     5fc:	08 2e       	mov	r0, r24
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x10a>
     600:	ee 0c       	add	r14, r14
     602:	ff 1c       	adc	r15, r15
     604:	00 1f       	adc	r16, r16
     606:	11 1f       	adc	r17, r17
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x102>
     60c:	a6 01       	movw	r20, r12
     60e:	95 01       	movw	r18, r10
     610:	08 2e       	mov	r0, r24
     612:	04 c0       	rjmp	.+8      	; 0x61c <__udivdi3+0x11e>
     614:	22 0f       	add	r18, r18
     616:	33 1f       	adc	r19, r19
     618:	44 1f       	adc	r20, r20
     61a:	55 1f       	adc	r21, r21
     61c:	0a 94       	dec	r0
     61e:	d2 f7       	brpl	.-12     	; 0x614 <__udivdi3+0x116>
     620:	60 e2       	ldi	r22, 0x20	; 32
     622:	70 e0       	ldi	r23, 0x00	; 0
     624:	68 1b       	sub	r22, r24
     626:	79 0b       	sbc	r23, r25
     628:	ad a0       	ldd	r10, Y+37	; 0x25
     62a:	be a0       	ldd	r11, Y+38	; 0x26
     62c:	cf a0       	ldd	r12, Y+39	; 0x27
     62e:	d8 a4       	ldd	r13, Y+40	; 0x28
     630:	04 c0       	rjmp	.+8      	; 0x63a <__udivdi3+0x13c>
     632:	d6 94       	lsr	r13
     634:	c7 94       	ror	r12
     636:	b7 94       	ror	r11
     638:	a7 94       	ror	r10
     63a:	6a 95       	dec	r22
     63c:	d2 f7       	brpl	.-12     	; 0x632 <__udivdi3+0x134>
     63e:	a2 2a       	or	r10, r18
     640:	b3 2a       	or	r11, r19
     642:	c4 2a       	or	r12, r20
     644:	d5 2a       	or	r13, r21
     646:	2d a0       	ldd	r2, Y+37	; 0x25
     648:	3e a0       	ldd	r3, Y+38	; 0x26
     64a:	4f a0       	ldd	r4, Y+39	; 0x27
     64c:	58 a4       	ldd	r5, Y+40	; 0x28
     64e:	04 c0       	rjmp	.+8      	; 0x658 <__udivdi3+0x15a>
     650:	22 0c       	add	r2, r2
     652:	33 1c       	adc	r3, r3
     654:	44 1c       	adc	r4, r4
     656:	55 1c       	adc	r5, r5
     658:	8a 95       	dec	r24
     65a:	d2 f7       	brpl	.-12     	; 0x650 <__udivdi3+0x152>
     65c:	2d a2       	std	Y+37, r2	; 0x25
     65e:	3e a2       	std	Y+38, r3	; 0x26
     660:	4f a2       	std	Y+39, r4	; 0x27
     662:	58 a6       	std	Y+40, r5	; 0x28
     664:	38 01       	movw	r6, r16
     666:	88 24       	eor	r8, r8
     668:	99 24       	eor	r9, r9
     66a:	a8 01       	movw	r20, r16
     66c:	97 01       	movw	r18, r14
     66e:	40 70       	andi	r20, 0x00	; 0
     670:	50 70       	andi	r21, 0x00	; 0
     672:	2d 8f       	std	Y+29, r18	; 0x1d
     674:	3e 8f       	std	Y+30, r19	; 0x1e
     676:	4f 8f       	std	Y+31, r20	; 0x1f
     678:	58 a3       	std	Y+32, r21	; 0x20
     67a:	c6 01       	movw	r24, r12
     67c:	b5 01       	movw	r22, r10
     67e:	a4 01       	movw	r20, r8
     680:	93 01       	movw	r18, r6
     682:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     686:	22 2e       	mov	r2, r18
     688:	53 2e       	mov	r5, r19
     68a:	44 2e       	mov	r4, r20
     68c:	35 2e       	mov	r3, r21
     68e:	69 a3       	std	Y+33, r22	; 0x21
     690:	7a a3       	std	Y+34, r23	; 0x22
     692:	8b a3       	std	Y+35, r24	; 0x23
     694:	9c a3       	std	Y+36, r25	; 0x24
     696:	c6 01       	movw	r24, r12
     698:	b5 01       	movw	r22, r10
     69a:	a4 01       	movw	r20, r8
     69c:	93 01       	movw	r18, r6
     69e:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     6a2:	82 2d       	mov	r24, r2
     6a4:	95 2d       	mov	r25, r5
     6a6:	a4 2d       	mov	r26, r4
     6a8:	b3 2d       	mov	r27, r3
     6aa:	89 8f       	std	Y+25, r24	; 0x19
     6ac:	9a 8f       	std	Y+26, r25	; 0x1a
     6ae:	ab 8f       	std	Y+27, r26	; 0x1b
     6b0:	bc 8f       	std	Y+28, r27	; 0x1c
     6b2:	bc 01       	movw	r22, r24
     6b4:	cd 01       	movw	r24, r26
     6b6:	2d 8d       	ldd	r18, Y+29	; 0x1d
     6b8:	3e 8d       	ldd	r19, Y+30	; 0x1e
     6ba:	4f 8d       	ldd	r20, Y+31	; 0x1f
     6bc:	58 a1       	ldd	r21, Y+32	; 0x20
     6be:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     6c2:	5b 01       	movw	r10, r22
     6c4:	6c 01       	movw	r12, r24
     6c6:	49 a1       	ldd	r20, Y+33	; 0x21
     6c8:	5a a1       	ldd	r21, Y+34	; 0x22
     6ca:	6b a1       	ldd	r22, Y+35	; 0x23
     6cc:	7c a1       	ldd	r23, Y+36	; 0x24
     6ce:	da 01       	movw	r26, r20
     6d0:	99 27       	eor	r25, r25
     6d2:	88 27       	eor	r24, r24
     6d4:	2d a0       	ldd	r2, Y+37	; 0x25
     6d6:	3e a0       	ldd	r3, Y+38	; 0x26
     6d8:	4f a0       	ldd	r4, Y+39	; 0x27
     6da:	58 a4       	ldd	r5, Y+40	; 0x28
     6dc:	92 01       	movw	r18, r4
     6de:	44 27       	eor	r20, r20
     6e0:	55 27       	eor	r21, r21
     6e2:	82 2b       	or	r24, r18
     6e4:	93 2b       	or	r25, r19
     6e6:	a4 2b       	or	r26, r20
     6e8:	b5 2b       	or	r27, r21
     6ea:	8a 15       	cp	r24, r10
     6ec:	9b 05       	cpc	r25, r11
     6ee:	ac 05       	cpc	r26, r12
     6f0:	bd 05       	cpc	r27, r13
     6f2:	30 f5       	brcc	.+76     	; 0x740 <__udivdi3+0x242>
     6f4:	29 8d       	ldd	r18, Y+25	; 0x19
     6f6:	3a 8d       	ldd	r19, Y+26	; 0x1a
     6f8:	4b 8d       	ldd	r20, Y+27	; 0x1b
     6fa:	5c 8d       	ldd	r21, Y+28	; 0x1c
     6fc:	21 50       	subi	r18, 0x01	; 1
     6fe:	30 40       	sbci	r19, 0x00	; 0
     700:	40 40       	sbci	r20, 0x00	; 0
     702:	50 40       	sbci	r21, 0x00	; 0
     704:	29 8f       	std	Y+25, r18	; 0x19
     706:	3a 8f       	std	Y+26, r19	; 0x1a
     708:	4b 8f       	std	Y+27, r20	; 0x1b
     70a:	5c 8f       	std	Y+28, r21	; 0x1c
     70c:	8e 0d       	add	r24, r14
     70e:	9f 1d       	adc	r25, r15
     710:	a0 1f       	adc	r26, r16
     712:	b1 1f       	adc	r27, r17
     714:	8e 15       	cp	r24, r14
     716:	9f 05       	cpc	r25, r15
     718:	a0 07       	cpc	r26, r16
     71a:	b1 07       	cpc	r27, r17
     71c:	88 f0       	brcs	.+34     	; 0x740 <__udivdi3+0x242>
     71e:	8a 15       	cp	r24, r10
     720:	9b 05       	cpc	r25, r11
     722:	ac 05       	cpc	r26, r12
     724:	bd 05       	cpc	r27, r13
     726:	60 f4       	brcc	.+24     	; 0x740 <__udivdi3+0x242>
     728:	21 50       	subi	r18, 0x01	; 1
     72a:	30 40       	sbci	r19, 0x00	; 0
     72c:	40 40       	sbci	r20, 0x00	; 0
     72e:	50 40       	sbci	r21, 0x00	; 0
     730:	29 8f       	std	Y+25, r18	; 0x19
     732:	3a 8f       	std	Y+26, r19	; 0x1a
     734:	4b 8f       	std	Y+27, r20	; 0x1b
     736:	5c 8f       	std	Y+28, r21	; 0x1c
     738:	8e 0d       	add	r24, r14
     73a:	9f 1d       	adc	r25, r15
     73c:	a0 1f       	adc	r26, r16
     73e:	b1 1f       	adc	r27, r17
     740:	ac 01       	movw	r20, r24
     742:	bd 01       	movw	r22, r26
     744:	4a 19       	sub	r20, r10
     746:	5b 09       	sbc	r21, r11
     748:	6c 09       	sbc	r22, r12
     74a:	7d 09       	sbc	r23, r13
     74c:	5a 01       	movw	r10, r20
     74e:	6b 01       	movw	r12, r22
     750:	cb 01       	movw	r24, r22
     752:	ba 01       	movw	r22, r20
     754:	a4 01       	movw	r20, r8
     756:	93 01       	movw	r18, r6
     758:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     75c:	22 2e       	mov	r2, r18
     75e:	53 2e       	mov	r5, r19
     760:	44 2e       	mov	r4, r20
     762:	35 2e       	mov	r3, r21
     764:	69 a3       	std	Y+33, r22	; 0x21
     766:	7a a3       	std	Y+34, r23	; 0x22
     768:	8b a3       	std	Y+35, r24	; 0x23
     76a:	9c a3       	std	Y+36, r25	; 0x24
     76c:	c6 01       	movw	r24, r12
     76e:	b5 01       	movw	r22, r10
     770:	a4 01       	movw	r20, r8
     772:	93 01       	movw	r18, r6
     774:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     778:	a2 2c       	mov	r10, r2
     77a:	b5 2c       	mov	r11, r5
     77c:	c4 2c       	mov	r12, r4
     77e:	d3 2c       	mov	r13, r3
     780:	c6 01       	movw	r24, r12
     782:	b5 01       	movw	r22, r10
     784:	2d 8d       	ldd	r18, Y+29	; 0x1d
     786:	3e 8d       	ldd	r19, Y+30	; 0x1e
     788:	4f 8d       	ldd	r20, Y+31	; 0x1f
     78a:	58 a1       	ldd	r21, Y+32	; 0x20
     78c:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     790:	3b 01       	movw	r6, r22
     792:	4c 01       	movw	r8, r24
     794:	69 a1       	ldd	r22, Y+33	; 0x21
     796:	7a a1       	ldd	r23, Y+34	; 0x22
     798:	8b a1       	ldd	r24, Y+35	; 0x23
     79a:	9c a1       	ldd	r25, Y+36	; 0x24
     79c:	ab 01       	movw	r20, r22
     79e:	33 27       	eor	r19, r19
     7a0:	22 27       	eor	r18, r18
     7a2:	8d a1       	ldd	r24, Y+37	; 0x25
     7a4:	9e a1       	ldd	r25, Y+38	; 0x26
     7a6:	af a1       	ldd	r26, Y+39	; 0x27
     7a8:	b8 a5       	ldd	r27, Y+40	; 0x28
     7aa:	a0 70       	andi	r26, 0x00	; 0
     7ac:	b0 70       	andi	r27, 0x00	; 0
     7ae:	28 2b       	or	r18, r24
     7b0:	39 2b       	or	r19, r25
     7b2:	4a 2b       	or	r20, r26
     7b4:	5b 2b       	or	r21, r27
     7b6:	26 15       	cp	r18, r6
     7b8:	37 05       	cpc	r19, r7
     7ba:	48 05       	cpc	r20, r8
     7bc:	59 05       	cpc	r21, r9
     7be:	c0 f4       	brcc	.+48     	; 0x7f0 <__udivdi3+0x2f2>
     7c0:	08 94       	sec
     7c2:	a1 08       	sbc	r10, r1
     7c4:	b1 08       	sbc	r11, r1
     7c6:	c1 08       	sbc	r12, r1
     7c8:	d1 08       	sbc	r13, r1
     7ca:	2e 0d       	add	r18, r14
     7cc:	3f 1d       	adc	r19, r15
     7ce:	40 1f       	adc	r20, r16
     7d0:	51 1f       	adc	r21, r17
     7d2:	2e 15       	cp	r18, r14
     7d4:	3f 05       	cpc	r19, r15
     7d6:	40 07       	cpc	r20, r16
     7d8:	51 07       	cpc	r21, r17
     7da:	50 f0       	brcs	.+20     	; 0x7f0 <__udivdi3+0x2f2>
     7dc:	26 15       	cp	r18, r6
     7de:	37 05       	cpc	r19, r7
     7e0:	48 05       	cpc	r20, r8
     7e2:	59 05       	cpc	r21, r9
     7e4:	28 f4       	brcc	.+10     	; 0x7f0 <__udivdi3+0x2f2>
     7e6:	08 94       	sec
     7e8:	a1 08       	sbc	r10, r1
     7ea:	b1 08       	sbc	r11, r1
     7ec:	c1 08       	sbc	r12, r1
     7ee:	d1 08       	sbc	r13, r1
     7f0:	89 8d       	ldd	r24, Y+25	; 0x19
     7f2:	9a 8d       	ldd	r25, Y+26	; 0x1a
     7f4:	ab 8d       	ldd	r26, Y+27	; 0x1b
     7f6:	bc 8d       	ldd	r27, Y+28	; 0x1c
     7f8:	8c 01       	movw	r16, r24
     7fa:	ff 24       	eor	r15, r15
     7fc:	ee 24       	eor	r14, r14
     7fe:	ea 28       	or	r14, r10
     800:	fb 28       	or	r15, r11
     802:	0c 29       	or	r16, r12
     804:	1d 29       	or	r17, r13
     806:	b3 c4       	rjmp	.+2406   	; 0x116e <__udivdi3+0xc70>
     808:	e1 14       	cp	r14, r1
     80a:	f1 04       	cpc	r15, r1
     80c:	01 05       	cpc	r16, r1
     80e:	11 05       	cpc	r17, r1
     810:	59 f4       	brne	.+22     	; 0x828 <__udivdi3+0x32a>
     812:	61 e0       	ldi	r22, 0x01	; 1
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a8 01       	movw	r20, r16
     81c:	97 01       	movw	r18, r14
     81e:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     822:	79 01       	movw	r14, r18
     824:	8a 01       	movw	r16, r20
     826:	10 c0       	rjmp	.+32     	; 0x848 <__udivdi3+0x34a>
     828:	90 e0       	ldi	r25, 0x00	; 0
     82a:	e9 16       	cp	r14, r25
     82c:	90 e0       	ldi	r25, 0x00	; 0
     82e:	f9 06       	cpc	r15, r25
     830:	91 e0       	ldi	r25, 0x01	; 1
     832:	09 07       	cpc	r16, r25
     834:	90 e0       	ldi	r25, 0x00	; 0
     836:	19 07       	cpc	r17, r25
     838:	58 f4       	brcc	.+22     	; 0x850 <__udivdi3+0x352>
     83a:	af ef       	ldi	r26, 0xFF	; 255
     83c:	ea 16       	cp	r14, r26
     83e:	f1 04       	cpc	r15, r1
     840:	01 05       	cpc	r16, r1
     842:	11 05       	cpc	r17, r1
     844:	09 f0       	breq	.+2      	; 0x848 <__udivdi3+0x34a>
     846:	90 f4       	brcc	.+36     	; 0x86c <__udivdi3+0x36e>
     848:	20 e0       	ldi	r18, 0x00	; 0
     84a:	30 e0       	ldi	r19, 0x00	; 0
     84c:	a9 01       	movw	r20, r18
     84e:	17 c0       	rjmp	.+46     	; 0x87e <__udivdi3+0x380>
     850:	b0 e0       	ldi	r27, 0x00	; 0
     852:	eb 16       	cp	r14, r27
     854:	b0 e0       	ldi	r27, 0x00	; 0
     856:	fb 06       	cpc	r15, r27
     858:	b0 e0       	ldi	r27, 0x00	; 0
     85a:	0b 07       	cpc	r16, r27
     85c:	b1 e0       	ldi	r27, 0x01	; 1
     85e:	1b 07       	cpc	r17, r27
     860:	50 f4       	brcc	.+20     	; 0x876 <__udivdi3+0x378>
     862:	20 e1       	ldi	r18, 0x10	; 16
     864:	30 e0       	ldi	r19, 0x00	; 0
     866:	40 e0       	ldi	r20, 0x00	; 0
     868:	50 e0       	ldi	r21, 0x00	; 0
     86a:	09 c0       	rjmp	.+18     	; 0x87e <__udivdi3+0x380>
     86c:	28 e0       	ldi	r18, 0x08	; 8
     86e:	30 e0       	ldi	r19, 0x00	; 0
     870:	40 e0       	ldi	r20, 0x00	; 0
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	04 c0       	rjmp	.+8      	; 0x87e <__udivdi3+0x380>
     876:	28 e1       	ldi	r18, 0x18	; 24
     878:	30 e0       	ldi	r19, 0x00	; 0
     87a:	40 e0       	ldi	r20, 0x00	; 0
     87c:	50 e0       	ldi	r21, 0x00	; 0
     87e:	d8 01       	movw	r26, r16
     880:	c7 01       	movw	r24, r14
     882:	02 2e       	mov	r0, r18
     884:	04 c0       	rjmp	.+8      	; 0x88e <__udivdi3+0x390>
     886:	b6 95       	lsr	r27
     888:	a7 95       	ror	r26
     88a:	97 95       	ror	r25
     88c:	87 95       	ror	r24
     88e:	0a 94       	dec	r0
     890:	d2 f7       	brpl	.-12     	; 0x886 <__udivdi3+0x388>
     892:	8e 51       	subi	r24, 0x1E	; 30
     894:	9e 4f       	sbci	r25, 0xFE	; 254
     896:	fc 01       	movw	r30, r24
     898:	80 81       	ld	r24, Z
     89a:	28 0f       	add	r18, r24
     89c:	31 1d       	adc	r19, r1
     89e:	41 1d       	adc	r20, r1
     8a0:	51 1d       	adc	r21, r1
     8a2:	80 e2       	ldi	r24, 0x20	; 32
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	a0 e0       	ldi	r26, 0x00	; 0
     8a8:	b0 e0       	ldi	r27, 0x00	; 0
     8aa:	82 1b       	sub	r24, r18
     8ac:	93 0b       	sbc	r25, r19
     8ae:	a4 0b       	sbc	r26, r20
     8b0:	b5 0b       	sbc	r27, r21
     8b2:	61 f4       	brne	.+24     	; 0x8cc <__udivdi3+0x3ce>
     8b4:	15 01       	movw	r2, r10
     8b6:	26 01       	movw	r4, r12
     8b8:	2e 18       	sub	r2, r14
     8ba:	3f 08       	sbc	r3, r15
     8bc:	40 0a       	sbc	r4, r16
     8be:	51 0a       	sbc	r5, r17
     8c0:	81 e0       	ldi	r24, 0x01	; 1
     8c2:	a8 2e       	mov	r10, r24
     8c4:	b1 2c       	mov	r11, r1
     8c6:	c1 2c       	mov	r12, r1
     8c8:	d1 2c       	mov	r13, r1
     8ca:	29 c1       	rjmp	.+594    	; 0xb1e <__udivdi3+0x620>
     8cc:	08 2e       	mov	r0, r24
     8ce:	04 c0       	rjmp	.+8      	; 0x8d8 <__udivdi3+0x3da>
     8d0:	ee 0c       	add	r14, r14
     8d2:	ff 1c       	adc	r15, r15
     8d4:	00 1f       	adc	r16, r16
     8d6:	11 1f       	adc	r17, r17
     8d8:	0a 94       	dec	r0
     8da:	d2 f7       	brpl	.-12     	; 0x8d0 <__udivdi3+0x3d2>
     8dc:	15 01       	movw	r2, r10
     8de:	26 01       	movw	r4, r12
     8e0:	02 2e       	mov	r0, r18
     8e2:	04 c0       	rjmp	.+8      	; 0x8ec <__udivdi3+0x3ee>
     8e4:	56 94       	lsr	r5
     8e6:	47 94       	ror	r4
     8e8:	37 94       	ror	r3
     8ea:	27 94       	ror	r2
     8ec:	0a 94       	dec	r0
     8ee:	d2 f7       	brpl	.-12     	; 0x8e4 <__udivdi3+0x3e6>
     8f0:	29 8e       	std	Y+25, r2	; 0x19
     8f2:	3a 8e       	std	Y+26, r3	; 0x1a
     8f4:	4b 8e       	std	Y+27, r4	; 0x1b
     8f6:	5c 8e       	std	Y+28, r5	; 0x1c
     8f8:	b6 01       	movw	r22, r12
     8fa:	a5 01       	movw	r20, r10
     8fc:	08 2e       	mov	r0, r24
     8fe:	04 c0       	rjmp	.+8      	; 0x908 <__udivdi3+0x40a>
     900:	44 0f       	add	r20, r20
     902:	55 1f       	adc	r21, r21
     904:	66 1f       	adc	r22, r22
     906:	77 1f       	adc	r23, r23
     908:	0a 94       	dec	r0
     90a:	d2 f7       	brpl	.-12     	; 0x900 <__udivdi3+0x402>
     90c:	4d 8f       	std	Y+29, r20	; 0x1d
     90e:	5e 8f       	std	Y+30, r21	; 0x1e
     910:	6f 8f       	std	Y+31, r22	; 0x1f
     912:	78 a3       	std	Y+32, r23	; 0x20
     914:	2d a0       	ldd	r2, Y+37	; 0x25
     916:	3e a0       	ldd	r3, Y+38	; 0x26
     918:	4f a0       	ldd	r4, Y+39	; 0x27
     91a:	58 a4       	ldd	r5, Y+40	; 0x28
     91c:	04 c0       	rjmp	.+8      	; 0x926 <__udivdi3+0x428>
     91e:	56 94       	lsr	r5
     920:	47 94       	ror	r4
     922:	37 94       	ror	r3
     924:	27 94       	ror	r2
     926:	2a 95       	dec	r18
     928:	d2 f7       	brpl	.-12     	; 0x91e <__udivdi3+0x420>
     92a:	ad 8c       	ldd	r10, Y+29	; 0x1d
     92c:	be 8c       	ldd	r11, Y+30	; 0x1e
     92e:	cf 8c       	ldd	r12, Y+31	; 0x1f
     930:	d8 a0       	ldd	r13, Y+32	; 0x20
     932:	a2 28       	or	r10, r2
     934:	b3 28       	or	r11, r3
     936:	c4 28       	or	r12, r4
     938:	d5 28       	or	r13, r5
     93a:	ad 8e       	std	Y+29, r10	; 0x1d
     93c:	be 8e       	std	Y+30, r11	; 0x1e
     93e:	cf 8e       	std	Y+31, r12	; 0x1f
     940:	d8 a2       	std	Y+32, r13	; 0x20
     942:	2d a1       	ldd	r18, Y+37	; 0x25
     944:	3e a1       	ldd	r19, Y+38	; 0x26
     946:	4f a1       	ldd	r20, Y+39	; 0x27
     948:	58 a5       	ldd	r21, Y+40	; 0x28
     94a:	04 c0       	rjmp	.+8      	; 0x954 <__udivdi3+0x456>
     94c:	22 0f       	add	r18, r18
     94e:	33 1f       	adc	r19, r19
     950:	44 1f       	adc	r20, r20
     952:	55 1f       	adc	r21, r21
     954:	8a 95       	dec	r24
     956:	d2 f7       	brpl	.-12     	; 0x94c <__udivdi3+0x44e>
     958:	2d a3       	std	Y+37, r18	; 0x25
     95a:	3e a3       	std	Y+38, r19	; 0x26
     95c:	4f a3       	std	Y+39, r20	; 0x27
     95e:	58 a7       	std	Y+40, r21	; 0x28
     960:	38 01       	movw	r6, r16
     962:	88 24       	eor	r8, r8
     964:	99 24       	eor	r9, r9
     966:	b8 01       	movw	r22, r16
     968:	a7 01       	movw	r20, r14
     96a:	60 70       	andi	r22, 0x00	; 0
     96c:	70 70       	andi	r23, 0x00	; 0
     96e:	49 a3       	std	Y+33, r20	; 0x21
     970:	5a a3       	std	Y+34, r21	; 0x22
     972:	6b a3       	std	Y+35, r22	; 0x23
     974:	7c a3       	std	Y+36, r23	; 0x24
     976:	69 8d       	ldd	r22, Y+25	; 0x19
     978:	7a 8d       	ldd	r23, Y+26	; 0x1a
     97a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     97c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     97e:	a4 01       	movw	r20, r8
     980:	93 01       	movw	r18, r6
     982:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     986:	22 2e       	mov	r2, r18
     988:	53 2e       	mov	r5, r19
     98a:	44 2e       	mov	r4, r20
     98c:	35 2e       	mov	r3, r21
     98e:	69 a7       	std	Y+41, r22	; 0x29
     990:	7a a7       	std	Y+42, r23	; 0x2a
     992:	8b a7       	std	Y+43, r24	; 0x2b
     994:	9c a7       	std	Y+44, r25	; 0x2c
     996:	69 8d       	ldd	r22, Y+25	; 0x19
     998:	7a 8d       	ldd	r23, Y+26	; 0x1a
     99a:	8b 8d       	ldd	r24, Y+27	; 0x1b
     99c:	9c 8d       	ldd	r25, Y+28	; 0x1c
     99e:	a4 01       	movw	r20, r8
     9a0:	93 01       	movw	r18, r6
     9a2:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     9a6:	a2 2c       	mov	r10, r2
     9a8:	b5 2c       	mov	r11, r5
     9aa:	c4 2c       	mov	r12, r4
     9ac:	d3 2c       	mov	r13, r3
     9ae:	a9 8e       	std	Y+25, r10	; 0x19
     9b0:	ba 8e       	std	Y+26, r11	; 0x1a
     9b2:	cb 8e       	std	Y+27, r12	; 0x1b
     9b4:	dc 8e       	std	Y+28, r13	; 0x1c
     9b6:	c6 01       	movw	r24, r12
     9b8:	b5 01       	movw	r22, r10
     9ba:	29 a1       	ldd	r18, Y+33	; 0x21
     9bc:	3a a1       	ldd	r19, Y+34	; 0x22
     9be:	4b a1       	ldd	r20, Y+35	; 0x23
     9c0:	5c a1       	ldd	r21, Y+36	; 0x24
     9c2:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     9c6:	5b 01       	movw	r10, r22
     9c8:	6c 01       	movw	r12, r24
     9ca:	29 a4       	ldd	r2, Y+41	; 0x29
     9cc:	3a a4       	ldd	r3, Y+42	; 0x2a
     9ce:	4b a4       	ldd	r4, Y+43	; 0x2b
     9d0:	5c a4       	ldd	r5, Y+44	; 0x2c
     9d2:	d1 01       	movw	r26, r2
     9d4:	99 27       	eor	r25, r25
     9d6:	88 27       	eor	r24, r24
     9d8:	2d 8c       	ldd	r2, Y+29	; 0x1d
     9da:	3e 8c       	ldd	r3, Y+30	; 0x1e
     9dc:	4f 8c       	ldd	r4, Y+31	; 0x1f
     9de:	58 a0       	ldd	r5, Y+32	; 0x20
     9e0:	92 01       	movw	r18, r4
     9e2:	44 27       	eor	r20, r20
     9e4:	55 27       	eor	r21, r21
     9e6:	82 2b       	or	r24, r18
     9e8:	93 2b       	or	r25, r19
     9ea:	a4 2b       	or	r26, r20
     9ec:	b5 2b       	or	r27, r21
     9ee:	8a 15       	cp	r24, r10
     9f0:	9b 05       	cpc	r25, r11
     9f2:	ac 05       	cpc	r26, r12
     9f4:	bd 05       	cpc	r27, r13
     9f6:	30 f5       	brcc	.+76     	; 0xa44 <__udivdi3+0x546>
     9f8:	29 8d       	ldd	r18, Y+25	; 0x19
     9fa:	3a 8d       	ldd	r19, Y+26	; 0x1a
     9fc:	4b 8d       	ldd	r20, Y+27	; 0x1b
     9fe:	5c 8d       	ldd	r21, Y+28	; 0x1c
     a00:	21 50       	subi	r18, 0x01	; 1
     a02:	30 40       	sbci	r19, 0x00	; 0
     a04:	40 40       	sbci	r20, 0x00	; 0
     a06:	50 40       	sbci	r21, 0x00	; 0
     a08:	29 8f       	std	Y+25, r18	; 0x19
     a0a:	3a 8f       	std	Y+26, r19	; 0x1a
     a0c:	4b 8f       	std	Y+27, r20	; 0x1b
     a0e:	5c 8f       	std	Y+28, r21	; 0x1c
     a10:	8e 0d       	add	r24, r14
     a12:	9f 1d       	adc	r25, r15
     a14:	a0 1f       	adc	r26, r16
     a16:	b1 1f       	adc	r27, r17
     a18:	8e 15       	cp	r24, r14
     a1a:	9f 05       	cpc	r25, r15
     a1c:	a0 07       	cpc	r26, r16
     a1e:	b1 07       	cpc	r27, r17
     a20:	88 f0       	brcs	.+34     	; 0xa44 <__udivdi3+0x546>
     a22:	8a 15       	cp	r24, r10
     a24:	9b 05       	cpc	r25, r11
     a26:	ac 05       	cpc	r26, r12
     a28:	bd 05       	cpc	r27, r13
     a2a:	60 f4       	brcc	.+24     	; 0xa44 <__udivdi3+0x546>
     a2c:	21 50       	subi	r18, 0x01	; 1
     a2e:	30 40       	sbci	r19, 0x00	; 0
     a30:	40 40       	sbci	r20, 0x00	; 0
     a32:	50 40       	sbci	r21, 0x00	; 0
     a34:	29 8f       	std	Y+25, r18	; 0x19
     a36:	3a 8f       	std	Y+26, r19	; 0x1a
     a38:	4b 8f       	std	Y+27, r20	; 0x1b
     a3a:	5c 8f       	std	Y+28, r21	; 0x1c
     a3c:	8e 0d       	add	r24, r14
     a3e:	9f 1d       	adc	r25, r15
     a40:	a0 1f       	adc	r26, r16
     a42:	b1 1f       	adc	r27, r17
     a44:	ac 01       	movw	r20, r24
     a46:	bd 01       	movw	r22, r26
     a48:	4a 19       	sub	r20, r10
     a4a:	5b 09       	sbc	r21, r11
     a4c:	6c 09       	sbc	r22, r12
     a4e:	7d 09       	sbc	r23, r13
     a50:	5a 01       	movw	r10, r20
     a52:	6b 01       	movw	r12, r22
     a54:	cb 01       	movw	r24, r22
     a56:	ba 01       	movw	r22, r20
     a58:	a4 01       	movw	r20, r8
     a5a:	93 01       	movw	r18, r6
     a5c:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     a60:	22 2e       	mov	r2, r18
     a62:	53 2e       	mov	r5, r19
     a64:	44 2e       	mov	r4, r20
     a66:	35 2e       	mov	r3, r21
     a68:	69 a7       	std	Y+41, r22	; 0x29
     a6a:	7a a7       	std	Y+42, r23	; 0x2a
     a6c:	8b a7       	std	Y+43, r24	; 0x2b
     a6e:	9c a7       	std	Y+44, r25	; 0x2c
     a70:	c6 01       	movw	r24, r12
     a72:	b5 01       	movw	r22, r10
     a74:	a4 01       	movw	r20, r8
     a76:	93 01       	movw	r18, r6
     a78:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     a7c:	62 2c       	mov	r6, r2
     a7e:	75 2c       	mov	r7, r5
     a80:	84 2c       	mov	r8, r4
     a82:	93 2c       	mov	r9, r3
     a84:	c4 01       	movw	r24, r8
     a86:	b3 01       	movw	r22, r6
     a88:	29 a1       	ldd	r18, Y+33	; 0x21
     a8a:	3a a1       	ldd	r19, Y+34	; 0x22
     a8c:	4b a1       	ldd	r20, Y+35	; 0x23
     a8e:	5c a1       	ldd	r21, Y+36	; 0x24
     a90:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     a94:	9b 01       	movw	r18, r22
     a96:	ac 01       	movw	r20, r24
     a98:	69 a5       	ldd	r22, Y+41	; 0x29
     a9a:	7a a5       	ldd	r23, Y+42	; 0x2a
     a9c:	8b a5       	ldd	r24, Y+43	; 0x2b
     a9e:	9c a5       	ldd	r25, Y+44	; 0x2c
     aa0:	6b 01       	movw	r12, r22
     aa2:	bb 24       	eor	r11, r11
     aa4:	aa 24       	eor	r10, r10
     aa6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     aa8:	9e 8d       	ldd	r25, Y+30	; 0x1e
     aaa:	af 8d       	ldd	r26, Y+31	; 0x1f
     aac:	b8 a1       	ldd	r27, Y+32	; 0x20
     aae:	a0 70       	andi	r26, 0x00	; 0
     ab0:	b0 70       	andi	r27, 0x00	; 0
     ab2:	a8 2a       	or	r10, r24
     ab4:	b9 2a       	or	r11, r25
     ab6:	ca 2a       	or	r12, r26
     ab8:	db 2a       	or	r13, r27
     aba:	a2 16       	cp	r10, r18
     abc:	b3 06       	cpc	r11, r19
     abe:	c4 06       	cpc	r12, r20
     ac0:	d5 06       	cpc	r13, r21
     ac2:	e0 f4       	brcc	.+56     	; 0xafc <__udivdi3+0x5fe>
     ac4:	08 94       	sec
     ac6:	61 08       	sbc	r6, r1
     ac8:	71 08       	sbc	r7, r1
     aca:	81 08       	sbc	r8, r1
     acc:	91 08       	sbc	r9, r1
     ace:	ae 0c       	add	r10, r14
     ad0:	bf 1c       	adc	r11, r15
     ad2:	c0 1e       	adc	r12, r16
     ad4:	d1 1e       	adc	r13, r17
     ad6:	ae 14       	cp	r10, r14
     ad8:	bf 04       	cpc	r11, r15
     ada:	c0 06       	cpc	r12, r16
     adc:	d1 06       	cpc	r13, r17
     ade:	70 f0       	brcs	.+28     	; 0xafc <__udivdi3+0x5fe>
     ae0:	a2 16       	cp	r10, r18
     ae2:	b3 06       	cpc	r11, r19
     ae4:	c4 06       	cpc	r12, r20
     ae6:	d5 06       	cpc	r13, r21
     ae8:	48 f4       	brcc	.+18     	; 0xafc <__udivdi3+0x5fe>
     aea:	08 94       	sec
     aec:	61 08       	sbc	r6, r1
     aee:	71 08       	sbc	r7, r1
     af0:	81 08       	sbc	r8, r1
     af2:	91 08       	sbc	r9, r1
     af4:	ae 0c       	add	r10, r14
     af6:	bf 1c       	adc	r11, r15
     af8:	c0 1e       	adc	r12, r16
     afa:	d1 1e       	adc	r13, r17
     afc:	15 01       	movw	r2, r10
     afe:	26 01       	movw	r4, r12
     b00:	22 1a       	sub	r2, r18
     b02:	33 0a       	sbc	r3, r19
     b04:	44 0a       	sbc	r4, r20
     b06:	55 0a       	sbc	r5, r21
     b08:	89 8d       	ldd	r24, Y+25	; 0x19
     b0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
     b0c:	ab 8d       	ldd	r26, Y+27	; 0x1b
     b0e:	bc 8d       	ldd	r27, Y+28	; 0x1c
     b10:	6c 01       	movw	r12, r24
     b12:	bb 24       	eor	r11, r11
     b14:	aa 24       	eor	r10, r10
     b16:	a6 28       	or	r10, r6
     b18:	b7 28       	or	r11, r7
     b1a:	c8 28       	or	r12, r8
     b1c:	d9 28       	or	r13, r9
     b1e:	98 01       	movw	r18, r16
     b20:	44 27       	eor	r20, r20
     b22:	55 27       	eor	r21, r21
     b24:	2d 8f       	std	Y+29, r18	; 0x1d
     b26:	3e 8f       	std	Y+30, r19	; 0x1e
     b28:	4f 8f       	std	Y+31, r20	; 0x1f
     b2a:	58 a3       	std	Y+32, r21	; 0x20
     b2c:	b8 01       	movw	r22, r16
     b2e:	a7 01       	movw	r20, r14
     b30:	60 70       	andi	r22, 0x00	; 0
     b32:	70 70       	andi	r23, 0x00	; 0
     b34:	49 a3       	std	Y+33, r20	; 0x21
     b36:	5a a3       	std	Y+34, r21	; 0x22
     b38:	6b a3       	std	Y+35, r22	; 0x23
     b3a:	7c a3       	std	Y+36, r23	; 0x24
     b3c:	c2 01       	movw	r24, r4
     b3e:	b1 01       	movw	r22, r2
     b40:	2d 8d       	ldd	r18, Y+29	; 0x1d
     b42:	3e 8d       	ldd	r19, Y+30	; 0x1e
     b44:	4f 8d       	ldd	r20, Y+31	; 0x1f
     b46:	58 a1       	ldd	r21, Y+32	; 0x20
     b48:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     b4c:	62 2e       	mov	r6, r18
     b4e:	93 2e       	mov	r9, r19
     b50:	84 2e       	mov	r8, r20
     b52:	75 2e       	mov	r7, r21
     b54:	69 a7       	std	Y+41, r22	; 0x29
     b56:	7a a7       	std	Y+42, r23	; 0x2a
     b58:	8b a7       	std	Y+43, r24	; 0x2b
     b5a:	9c a7       	std	Y+44, r25	; 0x2c
     b5c:	c2 01       	movw	r24, r4
     b5e:	b1 01       	movw	r22, r2
     b60:	2d 8d       	ldd	r18, Y+29	; 0x1d
     b62:	3e 8d       	ldd	r19, Y+30	; 0x1e
     b64:	4f 8d       	ldd	r20, Y+31	; 0x1f
     b66:	58 a1       	ldd	r21, Y+32	; 0x20
     b68:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     b6c:	86 2d       	mov	r24, r6
     b6e:	99 2d       	mov	r25, r9
     b70:	a8 2d       	mov	r26, r8
     b72:	b7 2d       	mov	r27, r7
     b74:	89 8f       	std	Y+25, r24	; 0x19
     b76:	9a 8f       	std	Y+26, r25	; 0x1a
     b78:	ab 8f       	std	Y+27, r26	; 0x1b
     b7a:	bc 8f       	std	Y+28, r27	; 0x1c
     b7c:	bc 01       	movw	r22, r24
     b7e:	cd 01       	movw	r24, r26
     b80:	29 a1       	ldd	r18, Y+33	; 0x21
     b82:	3a a1       	ldd	r19, Y+34	; 0x22
     b84:	4b a1       	ldd	r20, Y+35	; 0x23
     b86:	5c a1       	ldd	r21, Y+36	; 0x24
     b88:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     b8c:	3b 01       	movw	r6, r22
     b8e:	4c 01       	movw	r8, r24
     b90:	29 a4       	ldd	r2, Y+41	; 0x29
     b92:	3a a4       	ldd	r3, Y+42	; 0x2a
     b94:	4b a4       	ldd	r4, Y+43	; 0x2b
     b96:	5c a4       	ldd	r5, Y+44	; 0x2c
     b98:	d1 01       	movw	r26, r2
     b9a:	99 27       	eor	r25, r25
     b9c:	88 27       	eor	r24, r24
     b9e:	2d a0       	ldd	r2, Y+37	; 0x25
     ba0:	3e a0       	ldd	r3, Y+38	; 0x26
     ba2:	4f a0       	ldd	r4, Y+39	; 0x27
     ba4:	58 a4       	ldd	r5, Y+40	; 0x28
     ba6:	92 01       	movw	r18, r4
     ba8:	44 27       	eor	r20, r20
     baa:	55 27       	eor	r21, r21
     bac:	82 2b       	or	r24, r18
     bae:	93 2b       	or	r25, r19
     bb0:	a4 2b       	or	r26, r20
     bb2:	b5 2b       	or	r27, r21
     bb4:	86 15       	cp	r24, r6
     bb6:	97 05       	cpc	r25, r7
     bb8:	a8 05       	cpc	r26, r8
     bba:	b9 05       	cpc	r27, r9
     bbc:	30 f5       	brcc	.+76     	; 0xc0a <__udivdi3+0x70c>
     bbe:	29 8d       	ldd	r18, Y+25	; 0x19
     bc0:	3a 8d       	ldd	r19, Y+26	; 0x1a
     bc2:	4b 8d       	ldd	r20, Y+27	; 0x1b
     bc4:	5c 8d       	ldd	r21, Y+28	; 0x1c
     bc6:	21 50       	subi	r18, 0x01	; 1
     bc8:	30 40       	sbci	r19, 0x00	; 0
     bca:	40 40       	sbci	r20, 0x00	; 0
     bcc:	50 40       	sbci	r21, 0x00	; 0
     bce:	29 8f       	std	Y+25, r18	; 0x19
     bd0:	3a 8f       	std	Y+26, r19	; 0x1a
     bd2:	4b 8f       	std	Y+27, r20	; 0x1b
     bd4:	5c 8f       	std	Y+28, r21	; 0x1c
     bd6:	8e 0d       	add	r24, r14
     bd8:	9f 1d       	adc	r25, r15
     bda:	a0 1f       	adc	r26, r16
     bdc:	b1 1f       	adc	r27, r17
     bde:	8e 15       	cp	r24, r14
     be0:	9f 05       	cpc	r25, r15
     be2:	a0 07       	cpc	r26, r16
     be4:	b1 07       	cpc	r27, r17
     be6:	88 f0       	brcs	.+34     	; 0xc0a <__udivdi3+0x70c>
     be8:	86 15       	cp	r24, r6
     bea:	97 05       	cpc	r25, r7
     bec:	a8 05       	cpc	r26, r8
     bee:	b9 05       	cpc	r27, r9
     bf0:	60 f4       	brcc	.+24     	; 0xc0a <__udivdi3+0x70c>
     bf2:	21 50       	subi	r18, 0x01	; 1
     bf4:	30 40       	sbci	r19, 0x00	; 0
     bf6:	40 40       	sbci	r20, 0x00	; 0
     bf8:	50 40       	sbci	r21, 0x00	; 0
     bfa:	29 8f       	std	Y+25, r18	; 0x19
     bfc:	3a 8f       	std	Y+26, r19	; 0x1a
     bfe:	4b 8f       	std	Y+27, r20	; 0x1b
     c00:	5c 8f       	std	Y+28, r21	; 0x1c
     c02:	8e 0d       	add	r24, r14
     c04:	9f 1d       	adc	r25, r15
     c06:	a0 1f       	adc	r26, r16
     c08:	b1 1f       	adc	r27, r17
     c0a:	ac 01       	movw	r20, r24
     c0c:	bd 01       	movw	r22, r26
     c0e:	46 19       	sub	r20, r6
     c10:	57 09       	sbc	r21, r7
     c12:	68 09       	sbc	r22, r8
     c14:	79 09       	sbc	r23, r9
     c16:	3a 01       	movw	r6, r20
     c18:	4b 01       	movw	r8, r22
     c1a:	cb 01       	movw	r24, r22
     c1c:	ba 01       	movw	r22, r20
     c1e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c20:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c22:	4f 8d       	ldd	r20, Y+31	; 0x1f
     c24:	58 a1       	ldd	r21, Y+32	; 0x20
     c26:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     c2a:	52 2e       	mov	r5, r18
     c2c:	43 2e       	mov	r4, r19
     c2e:	34 2e       	mov	r3, r20
     c30:	25 2e       	mov	r2, r21
     c32:	69 a7       	std	Y+41, r22	; 0x29
     c34:	7a a7       	std	Y+42, r23	; 0x2a
     c36:	8b a7       	std	Y+43, r24	; 0x2b
     c38:	9c a7       	std	Y+44, r25	; 0x2c
     c3a:	c4 01       	movw	r24, r8
     c3c:	b3 01       	movw	r22, r6
     c3e:	2d 8d       	ldd	r18, Y+29	; 0x1d
     c40:	3e 8d       	ldd	r19, Y+30	; 0x1e
     c42:	4f 8d       	ldd	r20, Y+31	; 0x1f
     c44:	58 a1       	ldd	r21, Y+32	; 0x20
     c46:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     c4a:	65 2c       	mov	r6, r5
     c4c:	74 2c       	mov	r7, r4
     c4e:	83 2c       	mov	r8, r3
     c50:	92 2c       	mov	r9, r2
     c52:	c4 01       	movw	r24, r8
     c54:	b3 01       	movw	r22, r6
     c56:	29 a1       	ldd	r18, Y+33	; 0x21
     c58:	3a a1       	ldd	r19, Y+34	; 0x22
     c5a:	4b a1       	ldd	r20, Y+35	; 0x23
     c5c:	5c a1       	ldd	r21, Y+36	; 0x24
     c5e:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     c62:	1b 01       	movw	r2, r22
     c64:	2c 01       	movw	r4, r24
     c66:	69 a5       	ldd	r22, Y+41	; 0x29
     c68:	7a a5       	ldd	r23, Y+42	; 0x2a
     c6a:	8b a5       	ldd	r24, Y+43	; 0x2b
     c6c:	9c a5       	ldd	r25, Y+44	; 0x2c
     c6e:	ab 01       	movw	r20, r22
     c70:	33 27       	eor	r19, r19
     c72:	22 27       	eor	r18, r18
     c74:	8d a1       	ldd	r24, Y+37	; 0x25
     c76:	9e a1       	ldd	r25, Y+38	; 0x26
     c78:	af a1       	ldd	r26, Y+39	; 0x27
     c7a:	b8 a5       	ldd	r27, Y+40	; 0x28
     c7c:	a0 70       	andi	r26, 0x00	; 0
     c7e:	b0 70       	andi	r27, 0x00	; 0
     c80:	28 2b       	or	r18, r24
     c82:	39 2b       	or	r19, r25
     c84:	4a 2b       	or	r20, r26
     c86:	5b 2b       	or	r21, r27
     c88:	22 15       	cp	r18, r2
     c8a:	33 05       	cpc	r19, r3
     c8c:	44 05       	cpc	r20, r4
     c8e:	55 05       	cpc	r21, r5
     c90:	c0 f4       	brcc	.+48     	; 0xcc2 <__udivdi3+0x7c4>
     c92:	08 94       	sec
     c94:	61 08       	sbc	r6, r1
     c96:	71 08       	sbc	r7, r1
     c98:	81 08       	sbc	r8, r1
     c9a:	91 08       	sbc	r9, r1
     c9c:	2e 0d       	add	r18, r14
     c9e:	3f 1d       	adc	r19, r15
     ca0:	40 1f       	adc	r20, r16
     ca2:	51 1f       	adc	r21, r17
     ca4:	2e 15       	cp	r18, r14
     ca6:	3f 05       	cpc	r19, r15
     ca8:	40 07       	cpc	r20, r16
     caa:	51 07       	cpc	r21, r17
     cac:	50 f0       	brcs	.+20     	; 0xcc2 <__udivdi3+0x7c4>
     cae:	22 15       	cp	r18, r2
     cb0:	33 05       	cpc	r19, r3
     cb2:	44 05       	cpc	r20, r4
     cb4:	55 05       	cpc	r21, r5
     cb6:	28 f4       	brcc	.+10     	; 0xcc2 <__udivdi3+0x7c4>
     cb8:	08 94       	sec
     cba:	61 08       	sbc	r6, r1
     cbc:	71 08       	sbc	r7, r1
     cbe:	81 08       	sbc	r8, r1
     cc0:	91 08       	sbc	r9, r1
     cc2:	89 8d       	ldd	r24, Y+25	; 0x19
     cc4:	9a 8d       	ldd	r25, Y+26	; 0x1a
     cc6:	ab 8d       	ldd	r26, Y+27	; 0x1b
     cc8:	bc 8d       	ldd	r27, Y+28	; 0x1c
     cca:	8c 01       	movw	r16, r24
     ccc:	ff 24       	eor	r15, r15
     cce:	ee 24       	eor	r14, r14
     cd0:	e6 28       	or	r14, r6
     cd2:	f7 28       	or	r15, r7
     cd4:	08 29       	or	r16, r8
     cd6:	19 29       	or	r17, r9
     cd8:	4d c2       	rjmp	.+1178   	; 0x1174 <__udivdi3+0xc76>
     cda:	a2 16       	cp	r10, r18
     cdc:	b3 06       	cpc	r11, r19
     cde:	c4 06       	cpc	r12, r20
     ce0:	d5 06       	cpc	r13, r21
     ce2:	08 f4       	brcc	.+2      	; 0xce6 <__udivdi3+0x7e8>
     ce4:	34 c2       	rjmp	.+1128   	; 0x114e <__udivdi3+0xc50>
     ce6:	20 30       	cpi	r18, 0x00	; 0
     ce8:	90 e0       	ldi	r25, 0x00	; 0
     cea:	39 07       	cpc	r19, r25
     cec:	91 e0       	ldi	r25, 0x01	; 1
     cee:	49 07       	cpc	r20, r25
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	59 07       	cpc	r21, r25
     cf4:	50 f4       	brcc	.+20     	; 0xd0a <__udivdi3+0x80c>
     cf6:	2f 3f       	cpi	r18, 0xFF	; 255
     cf8:	31 05       	cpc	r19, r1
     cfa:	41 05       	cpc	r20, r1
     cfc:	51 05       	cpc	r21, r1
     cfe:	09 f0       	breq	.+2      	; 0xd02 <__udivdi3+0x804>
     d00:	90 f4       	brcc	.+36     	; 0xd26 <__udivdi3+0x828>
     d02:	66 24       	eor	r6, r6
     d04:	77 24       	eor	r7, r7
     d06:	43 01       	movw	r8, r6
     d08:	19 c0       	rjmp	.+50     	; 0xd3c <__udivdi3+0x83e>
     d0a:	20 30       	cpi	r18, 0x00	; 0
     d0c:	a0 e0       	ldi	r26, 0x00	; 0
     d0e:	3a 07       	cpc	r19, r26
     d10:	a0 e0       	ldi	r26, 0x00	; 0
     d12:	4a 07       	cpc	r20, r26
     d14:	a1 e0       	ldi	r26, 0x01	; 1
     d16:	5a 07       	cpc	r21, r26
     d18:	60 f4       	brcc	.+24     	; 0xd32 <__udivdi3+0x834>
     d1a:	90 e1       	ldi	r25, 0x10	; 16
     d1c:	69 2e       	mov	r6, r25
     d1e:	71 2c       	mov	r7, r1
     d20:	81 2c       	mov	r8, r1
     d22:	91 2c       	mov	r9, r1
     d24:	0b c0       	rjmp	.+22     	; 0xd3c <__udivdi3+0x83e>
     d26:	88 e0       	ldi	r24, 0x08	; 8
     d28:	68 2e       	mov	r6, r24
     d2a:	71 2c       	mov	r7, r1
     d2c:	81 2c       	mov	r8, r1
     d2e:	91 2c       	mov	r9, r1
     d30:	05 c0       	rjmp	.+10     	; 0xd3c <__udivdi3+0x83e>
     d32:	b8 e1       	ldi	r27, 0x18	; 24
     d34:	6b 2e       	mov	r6, r27
     d36:	71 2c       	mov	r7, r1
     d38:	81 2c       	mov	r8, r1
     d3a:	91 2c       	mov	r9, r1
     d3c:	da 01       	movw	r26, r20
     d3e:	c9 01       	movw	r24, r18
     d40:	06 2c       	mov	r0, r6
     d42:	04 c0       	rjmp	.+8      	; 0xd4c <__udivdi3+0x84e>
     d44:	b6 95       	lsr	r27
     d46:	a7 95       	ror	r26
     d48:	97 95       	ror	r25
     d4a:	87 95       	ror	r24
     d4c:	0a 94       	dec	r0
     d4e:	d2 f7       	brpl	.-12     	; 0xd44 <__udivdi3+0x846>
     d50:	8e 51       	subi	r24, 0x1E	; 30
     d52:	9e 4f       	sbci	r25, 0xFE	; 254
     d54:	fc 01       	movw	r30, r24
     d56:	80 81       	ld	r24, Z
     d58:	68 0e       	add	r6, r24
     d5a:	71 1c       	adc	r7, r1
     d5c:	81 1c       	adc	r8, r1
     d5e:	91 1c       	adc	r9, r1
     d60:	80 e2       	ldi	r24, 0x20	; 32
     d62:	90 e0       	ldi	r25, 0x00	; 0
     d64:	a0 e0       	ldi	r26, 0x00	; 0
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	86 19       	sub	r24, r6
     d6a:	97 09       	sbc	r25, r7
     d6c:	a8 09       	sbc	r26, r8
     d6e:	b9 09       	sbc	r27, r9
     d70:	89 f4       	brne	.+34     	; 0xd94 <__udivdi3+0x896>
     d72:	2a 15       	cp	r18, r10
     d74:	3b 05       	cpc	r19, r11
     d76:	4c 05       	cpc	r20, r12
     d78:	5d 05       	cpc	r21, r13
     d7a:	08 f4       	brcc	.+2      	; 0xd7e <__udivdi3+0x880>
     d7c:	ef c1       	rjmp	.+990    	; 0x115c <__udivdi3+0xc5e>
     d7e:	2d a0       	ldd	r2, Y+37	; 0x25
     d80:	3e a0       	ldd	r3, Y+38	; 0x26
     d82:	4f a0       	ldd	r4, Y+39	; 0x27
     d84:	58 a4       	ldd	r5, Y+40	; 0x28
     d86:	2e 14       	cp	r2, r14
     d88:	3f 04       	cpc	r3, r15
     d8a:	40 06       	cpc	r4, r16
     d8c:	51 06       	cpc	r5, r17
     d8e:	08 f0       	brcs	.+2      	; 0xd92 <__udivdi3+0x894>
     d90:	e5 c1       	rjmp	.+970    	; 0x115c <__udivdi3+0xc5e>
     d92:	dd c1       	rjmp	.+954    	; 0x114e <__udivdi3+0xc50>
     d94:	89 a7       	std	Y+41, r24	; 0x29
     d96:	19 01       	movw	r2, r18
     d98:	2a 01       	movw	r4, r20
     d9a:	04 c0       	rjmp	.+8      	; 0xda4 <__udivdi3+0x8a6>
     d9c:	22 0c       	add	r2, r2
     d9e:	33 1c       	adc	r3, r3
     da0:	44 1c       	adc	r4, r4
     da2:	55 1c       	adc	r5, r5
     da4:	8a 95       	dec	r24
     da6:	d2 f7       	brpl	.-12     	; 0xd9c <__udivdi3+0x89e>
     da8:	d8 01       	movw	r26, r16
     daa:	c7 01       	movw	r24, r14
     dac:	06 2c       	mov	r0, r6
     dae:	04 c0       	rjmp	.+8      	; 0xdb8 <__udivdi3+0x8ba>
     db0:	b6 95       	lsr	r27
     db2:	a7 95       	ror	r26
     db4:	97 95       	ror	r25
     db6:	87 95       	ror	r24
     db8:	0a 94       	dec	r0
     dba:	d2 f7       	brpl	.-12     	; 0xdb0 <__udivdi3+0x8b2>
     dbc:	28 2a       	or	r2, r24
     dbe:	39 2a       	or	r3, r25
     dc0:	4a 2a       	or	r4, r26
     dc2:	5b 2a       	or	r5, r27
     dc4:	a8 01       	movw	r20, r16
     dc6:	97 01       	movw	r18, r14
     dc8:	09 a4       	ldd	r0, Y+41	; 0x29
     dca:	04 c0       	rjmp	.+8      	; 0xdd4 <__udivdi3+0x8d6>
     dcc:	22 0f       	add	r18, r18
     dce:	33 1f       	adc	r19, r19
     dd0:	44 1f       	adc	r20, r20
     dd2:	55 1f       	adc	r21, r21
     dd4:	0a 94       	dec	r0
     dd6:	d2 f7       	brpl	.-12     	; 0xdcc <__udivdi3+0x8ce>
     dd8:	29 ab       	std	Y+49, r18	; 0x31
     dda:	3a ab       	std	Y+50, r19	; 0x32
     ddc:	4b ab       	std	Y+51, r20	; 0x33
     dde:	5c ab       	std	Y+52, r21	; 0x34
     de0:	86 01       	movw	r16, r12
     de2:	75 01       	movw	r14, r10
     de4:	06 2c       	mov	r0, r6
     de6:	04 c0       	rjmp	.+8      	; 0xdf0 <__udivdi3+0x8f2>
     de8:	16 95       	lsr	r17
     dea:	07 95       	ror	r16
     dec:	f7 94       	ror	r15
     dee:	e7 94       	ror	r14
     df0:	0a 94       	dec	r0
     df2:	d2 f7       	brpl	.-12     	; 0xde8 <__udivdi3+0x8ea>
     df4:	b6 01       	movw	r22, r12
     df6:	a5 01       	movw	r20, r10
     df8:	09 a4       	ldd	r0, Y+41	; 0x29
     dfa:	04 c0       	rjmp	.+8      	; 0xe04 <__udivdi3+0x906>
     dfc:	44 0f       	add	r20, r20
     dfe:	55 1f       	adc	r21, r21
     e00:	66 1f       	adc	r22, r22
     e02:	77 1f       	adc	r23, r23
     e04:	0a 94       	dec	r0
     e06:	d2 f7       	brpl	.-12     	; 0xdfc <__udivdi3+0x8fe>
     e08:	4d 8f       	std	Y+29, r20	; 0x1d
     e0a:	5e 8f       	std	Y+30, r21	; 0x1e
     e0c:	6f 8f       	std	Y+31, r22	; 0x1f
     e0e:	78 a3       	std	Y+32, r23	; 0x20
     e10:	6d a1       	ldd	r22, Y+37	; 0x25
     e12:	7e a1       	ldd	r23, Y+38	; 0x26
     e14:	8f a1       	ldd	r24, Y+39	; 0x27
     e16:	98 a5       	ldd	r25, Y+40	; 0x28
     e18:	04 c0       	rjmp	.+8      	; 0xe22 <__udivdi3+0x924>
     e1a:	96 95       	lsr	r25
     e1c:	87 95       	ror	r24
     e1e:	77 95       	ror	r23
     e20:	67 95       	ror	r22
     e22:	6a 94       	dec	r6
     e24:	d2 f7       	brpl	.-12     	; 0xe1a <__udivdi3+0x91c>
     e26:	3b 01       	movw	r6, r22
     e28:	4c 01       	movw	r8, r24
     e2a:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e2c:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e2e:	af 8d       	ldd	r26, Y+31	; 0x1f
     e30:	b8 a1       	ldd	r27, Y+32	; 0x20
     e32:	86 29       	or	r24, r6
     e34:	97 29       	or	r25, r7
     e36:	a8 29       	or	r26, r8
     e38:	b9 29       	or	r27, r9
     e3a:	8d 8f       	std	Y+29, r24	; 0x1d
     e3c:	9e 8f       	std	Y+30, r25	; 0x1e
     e3e:	af 8f       	std	Y+31, r26	; 0x1f
     e40:	b8 a3       	std	Y+32, r27	; 0x20
     e42:	52 01       	movw	r10, r4
     e44:	cc 24       	eor	r12, r12
     e46:	dd 24       	eor	r13, r13
     e48:	a9 a2       	std	Y+33, r10	; 0x21
     e4a:	ba a2       	std	Y+34, r11	; 0x22
     e4c:	cb a2       	std	Y+35, r12	; 0x23
     e4e:	dc a2       	std	Y+36, r13	; 0x24
     e50:	a2 01       	movw	r20, r4
     e52:	91 01       	movw	r18, r2
     e54:	40 70       	andi	r20, 0x00	; 0
     e56:	50 70       	andi	r21, 0x00	; 0
     e58:	2d ab       	std	Y+53, r18	; 0x35
     e5a:	3e ab       	std	Y+54, r19	; 0x36
     e5c:	4f ab       	std	Y+55, r20	; 0x37
     e5e:	58 af       	std	Y+56, r21	; 0x38
     e60:	c8 01       	movw	r24, r16
     e62:	b7 01       	movw	r22, r14
     e64:	a6 01       	movw	r20, r12
     e66:	95 01       	movw	r18, r10
     e68:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     e6c:	62 2e       	mov	r6, r18
     e6e:	a3 2e       	mov	r10, r19
     e70:	d4 2e       	mov	r13, r20
     e72:	c5 2e       	mov	r12, r21
     e74:	6d a7       	std	Y+45, r22	; 0x2d
     e76:	7e a7       	std	Y+46, r23	; 0x2e
     e78:	8f a7       	std	Y+47, r24	; 0x2f
     e7a:	98 ab       	std	Y+48, r25	; 0x30
     e7c:	c8 01       	movw	r24, r16
     e7e:	b7 01       	movw	r22, r14
     e80:	29 a1       	ldd	r18, Y+33	; 0x21
     e82:	3a a1       	ldd	r19, Y+34	; 0x22
     e84:	4b a1       	ldd	r20, Y+35	; 0x23
     e86:	5c a1       	ldd	r21, Y+36	; 0x24
     e88:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     e8c:	e6 2c       	mov	r14, r6
     e8e:	fa 2c       	mov	r15, r10
     e90:	0d 2d       	mov	r16, r13
     e92:	1c 2d       	mov	r17, r12
     e94:	e9 8e       	std	Y+25, r14	; 0x19
     e96:	fa 8e       	std	Y+26, r15	; 0x1a
     e98:	0b 8f       	std	Y+27, r16	; 0x1b
     e9a:	1c 8f       	std	Y+28, r17	; 0x1c
     e9c:	c8 01       	movw	r24, r16
     e9e:	b7 01       	movw	r22, r14
     ea0:	2d a9       	ldd	r18, Y+53	; 0x35
     ea2:	3e a9       	ldd	r19, Y+54	; 0x36
     ea4:	4f a9       	ldd	r20, Y+55	; 0x37
     ea6:	58 ad       	ldd	r21, Y+56	; 0x38
     ea8:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     eac:	ad a4       	ldd	r10, Y+45	; 0x2d
     eae:	be a4       	ldd	r11, Y+46	; 0x2e
     eb0:	cf a4       	ldd	r12, Y+47	; 0x2f
     eb2:	d8 a8       	ldd	r13, Y+48	; 0x30
     eb4:	85 01       	movw	r16, r10
     eb6:	ff 24       	eor	r15, r15
     eb8:	ee 24       	eor	r14, r14
     eba:	ad 8c       	ldd	r10, Y+29	; 0x1d
     ebc:	be 8c       	ldd	r11, Y+30	; 0x1e
     ebe:	cf 8c       	ldd	r12, Y+31	; 0x1f
     ec0:	d8 a0       	ldd	r13, Y+32	; 0x20
     ec2:	96 01       	movw	r18, r12
     ec4:	44 27       	eor	r20, r20
     ec6:	55 27       	eor	r21, r21
     ec8:	e2 2a       	or	r14, r18
     eca:	f3 2a       	or	r15, r19
     ecc:	04 2b       	or	r16, r20
     ece:	15 2b       	or	r17, r21
     ed0:	e6 16       	cp	r14, r22
     ed2:	f7 06       	cpc	r15, r23
     ed4:	08 07       	cpc	r16, r24
     ed6:	19 07       	cpc	r17, r25
     ed8:	30 f5       	brcc	.+76     	; 0xf26 <__udivdi3+0xa28>
     eda:	29 8d       	ldd	r18, Y+25	; 0x19
     edc:	3a 8d       	ldd	r19, Y+26	; 0x1a
     ede:	4b 8d       	ldd	r20, Y+27	; 0x1b
     ee0:	5c 8d       	ldd	r21, Y+28	; 0x1c
     ee2:	21 50       	subi	r18, 0x01	; 1
     ee4:	30 40       	sbci	r19, 0x00	; 0
     ee6:	40 40       	sbci	r20, 0x00	; 0
     ee8:	50 40       	sbci	r21, 0x00	; 0
     eea:	29 8f       	std	Y+25, r18	; 0x19
     eec:	3a 8f       	std	Y+26, r19	; 0x1a
     eee:	4b 8f       	std	Y+27, r20	; 0x1b
     ef0:	5c 8f       	std	Y+28, r21	; 0x1c
     ef2:	e2 0c       	add	r14, r2
     ef4:	f3 1c       	adc	r15, r3
     ef6:	04 1d       	adc	r16, r4
     ef8:	15 1d       	adc	r17, r5
     efa:	e2 14       	cp	r14, r2
     efc:	f3 04       	cpc	r15, r3
     efe:	04 05       	cpc	r16, r4
     f00:	15 05       	cpc	r17, r5
     f02:	88 f0       	brcs	.+34     	; 0xf26 <__udivdi3+0xa28>
     f04:	e6 16       	cp	r14, r22
     f06:	f7 06       	cpc	r15, r23
     f08:	08 07       	cpc	r16, r24
     f0a:	19 07       	cpc	r17, r25
     f0c:	60 f4       	brcc	.+24     	; 0xf26 <__udivdi3+0xa28>
     f0e:	21 50       	subi	r18, 0x01	; 1
     f10:	30 40       	sbci	r19, 0x00	; 0
     f12:	40 40       	sbci	r20, 0x00	; 0
     f14:	50 40       	sbci	r21, 0x00	; 0
     f16:	29 8f       	std	Y+25, r18	; 0x19
     f18:	3a 8f       	std	Y+26, r19	; 0x1a
     f1a:	4b 8f       	std	Y+27, r20	; 0x1b
     f1c:	5c 8f       	std	Y+28, r21	; 0x1c
     f1e:	e2 0c       	add	r14, r2
     f20:	f3 1c       	adc	r15, r3
     f22:	04 1d       	adc	r16, r4
     f24:	15 1d       	adc	r17, r5
     f26:	e6 1a       	sub	r14, r22
     f28:	f7 0a       	sbc	r15, r23
     f2a:	08 0b       	sbc	r16, r24
     f2c:	19 0b       	sbc	r17, r25
     f2e:	c8 01       	movw	r24, r16
     f30:	b7 01       	movw	r22, r14
     f32:	29 a1       	ldd	r18, Y+33	; 0x21
     f34:	3a a1       	ldd	r19, Y+34	; 0x22
     f36:	4b a1       	ldd	r20, Y+35	; 0x23
     f38:	5c a1       	ldd	r21, Y+36	; 0x24
     f3a:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     f3e:	a2 2e       	mov	r10, r18
     f40:	d3 2e       	mov	r13, r19
     f42:	c4 2e       	mov	r12, r20
     f44:	b5 2e       	mov	r11, r21
     f46:	6d a7       	std	Y+45, r22	; 0x2d
     f48:	7e a7       	std	Y+46, r23	; 0x2e
     f4a:	8f a7       	std	Y+47, r24	; 0x2f
     f4c:	98 ab       	std	Y+48, r25	; 0x30
     f4e:	c8 01       	movw	r24, r16
     f50:	b7 01       	movw	r22, r14
     f52:	29 a1       	ldd	r18, Y+33	; 0x21
     f54:	3a a1       	ldd	r19, Y+34	; 0x22
     f56:	4b a1       	ldd	r20, Y+35	; 0x23
     f58:	5c a1       	ldd	r21, Y+36	; 0x24
     f5a:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
     f5e:	6a 2c       	mov	r6, r10
     f60:	7d 2c       	mov	r7, r13
     f62:	8c 2c       	mov	r8, r12
     f64:	9b 2c       	mov	r9, r11
     f66:	c4 01       	movw	r24, r8
     f68:	b3 01       	movw	r22, r6
     f6a:	2d a9       	ldd	r18, Y+53	; 0x35
     f6c:	3e a9       	ldd	r19, Y+54	; 0x36
     f6e:	4f a9       	ldd	r20, Y+55	; 0x37
     f70:	58 ad       	ldd	r21, Y+56	; 0x38
     f72:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
     f76:	9b 01       	movw	r18, r22
     f78:	ac 01       	movw	r20, r24
     f7a:	ad a4       	ldd	r10, Y+45	; 0x2d
     f7c:	be a4       	ldd	r11, Y+46	; 0x2e
     f7e:	cf a4       	ldd	r12, Y+47	; 0x2f
     f80:	d8 a8       	ldd	r13, Y+48	; 0x30
     f82:	d5 01       	movw	r26, r10
     f84:	99 27       	eor	r25, r25
     f86:	88 27       	eor	r24, r24
     f88:	ad 8c       	ldd	r10, Y+29	; 0x1d
     f8a:	be 8c       	ldd	r11, Y+30	; 0x1e
     f8c:	cf 8c       	ldd	r12, Y+31	; 0x1f
     f8e:	d8 a0       	ldd	r13, Y+32	; 0x20
     f90:	6f ef       	ldi	r22, 0xFF	; 255
     f92:	e6 2e       	mov	r14, r22
     f94:	6f ef       	ldi	r22, 0xFF	; 255
     f96:	f6 2e       	mov	r15, r22
     f98:	01 2d       	mov	r16, r1
     f9a:	11 2d       	mov	r17, r1
     f9c:	ae 20       	and	r10, r14
     f9e:	bf 20       	and	r11, r15
     fa0:	c0 22       	and	r12, r16
     fa2:	d1 22       	and	r13, r17
     fa4:	8a 29       	or	r24, r10
     fa6:	9b 29       	or	r25, r11
     fa8:	ac 29       	or	r26, r12
     faa:	bd 29       	or	r27, r13
     fac:	82 17       	cp	r24, r18
     fae:	93 07       	cpc	r25, r19
     fb0:	a4 07       	cpc	r26, r20
     fb2:	b5 07       	cpc	r27, r21
     fb4:	e0 f4       	brcc	.+56     	; 0xfee <__udivdi3+0xaf0>
     fb6:	08 94       	sec
     fb8:	61 08       	sbc	r6, r1
     fba:	71 08       	sbc	r7, r1
     fbc:	81 08       	sbc	r8, r1
     fbe:	91 08       	sbc	r9, r1
     fc0:	82 0d       	add	r24, r2
     fc2:	93 1d       	adc	r25, r3
     fc4:	a4 1d       	adc	r26, r4
     fc6:	b5 1d       	adc	r27, r5
     fc8:	82 15       	cp	r24, r2
     fca:	93 05       	cpc	r25, r3
     fcc:	a4 05       	cpc	r26, r4
     fce:	b5 05       	cpc	r27, r5
     fd0:	70 f0       	brcs	.+28     	; 0xfee <__udivdi3+0xaf0>
     fd2:	82 17       	cp	r24, r18
     fd4:	93 07       	cpc	r25, r19
     fd6:	a4 07       	cpc	r26, r20
     fd8:	b5 07       	cpc	r27, r21
     fda:	48 f4       	brcc	.+18     	; 0xfee <__udivdi3+0xaf0>
     fdc:	08 94       	sec
     fde:	61 08       	sbc	r6, r1
     fe0:	71 08       	sbc	r7, r1
     fe2:	81 08       	sbc	r8, r1
     fe4:	91 08       	sbc	r9, r1
     fe6:	82 0d       	add	r24, r2
     fe8:	93 1d       	adc	r25, r3
     fea:	a4 1d       	adc	r26, r4
     fec:	b5 1d       	adc	r27, r5
     fee:	1c 01       	movw	r2, r24
     ff0:	2d 01       	movw	r4, r26
     ff2:	22 1a       	sub	r2, r18
     ff4:	33 0a       	sbc	r3, r19
     ff6:	44 0a       	sbc	r4, r20
     ff8:	55 0a       	sbc	r5, r21
     ffa:	2d 8e       	std	Y+29, r2	; 0x1d
     ffc:	3e 8e       	std	Y+30, r3	; 0x1e
     ffe:	4f 8e       	std	Y+31, r4	; 0x1f
    1000:	58 a2       	std	Y+32, r5	; 0x20
    1002:	a9 8c       	ldd	r10, Y+25	; 0x19
    1004:	ba 8c       	ldd	r11, Y+26	; 0x1a
    1006:	cb 8c       	ldd	r12, Y+27	; 0x1b
    1008:	dc 8c       	ldd	r13, Y+28	; 0x1c
    100a:	85 01       	movw	r16, r10
    100c:	ff 24       	eor	r15, r15
    100e:	ee 24       	eor	r14, r14
    1010:	e6 28       	or	r14, r6
    1012:	f7 28       	or	r15, r7
    1014:	08 29       	or	r16, r8
    1016:	19 29       	or	r17, r9
    1018:	af ef       	ldi	r26, 0xFF	; 255
    101a:	aa 2e       	mov	r10, r26
    101c:	af ef       	ldi	r26, 0xFF	; 255
    101e:	ba 2e       	mov	r11, r26
    1020:	c1 2c       	mov	r12, r1
    1022:	d1 2c       	mov	r13, r1
    1024:	ae 20       	and	r10, r14
    1026:	bf 20       	and	r11, r15
    1028:	c0 22       	and	r12, r16
    102a:	d1 22       	and	r13, r17
    102c:	18 01       	movw	r2, r16
    102e:	44 24       	eor	r4, r4
    1030:	55 24       	eor	r5, r5
    1032:	69 a8       	ldd	r6, Y+49	; 0x31
    1034:	7a a8       	ldd	r7, Y+50	; 0x32
    1036:	8b a8       	ldd	r8, Y+51	; 0x33
    1038:	9c a8       	ldd	r9, Y+52	; 0x34
    103a:	2f ef       	ldi	r18, 0xFF	; 255
    103c:	3f ef       	ldi	r19, 0xFF	; 255
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	50 e0       	ldi	r21, 0x00	; 0
    1042:	62 22       	and	r6, r18
    1044:	73 22       	and	r7, r19
    1046:	84 22       	and	r8, r20
    1048:	95 22       	and	r9, r21
    104a:	69 a9       	ldd	r22, Y+49	; 0x31
    104c:	7a a9       	ldd	r23, Y+50	; 0x32
    104e:	8b a9       	ldd	r24, Y+51	; 0x33
    1050:	9c a9       	ldd	r25, Y+52	; 0x34
    1052:	ac 01       	movw	r20, r24
    1054:	66 27       	eor	r22, r22
    1056:	77 27       	eor	r23, r23
    1058:	49 8f       	std	Y+25, r20	; 0x19
    105a:	5a 8f       	std	Y+26, r21	; 0x1a
    105c:	6b 8f       	std	Y+27, r22	; 0x1b
    105e:	7c 8f       	std	Y+28, r23	; 0x1c
    1060:	c6 01       	movw	r24, r12
    1062:	b5 01       	movw	r22, r10
    1064:	a4 01       	movw	r20, r8
    1066:	93 01       	movw	r18, r6
    1068:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
    106c:	69 a3       	std	Y+33, r22	; 0x21
    106e:	7a a3       	std	Y+34, r23	; 0x22
    1070:	8b a3       	std	Y+35, r24	; 0x23
    1072:	9c a3       	std	Y+36, r25	; 0x24
    1074:	c6 01       	movw	r24, r12
    1076:	b5 01       	movw	r22, r10
    1078:	29 8d       	ldd	r18, Y+25	; 0x19
    107a:	3a 8d       	ldd	r19, Y+26	; 0x1a
    107c:	4b 8d       	ldd	r20, Y+27	; 0x1b
    107e:	5c 8d       	ldd	r21, Y+28	; 0x1c
    1080:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
    1084:	5b 01       	movw	r10, r22
    1086:	6c 01       	movw	r12, r24
    1088:	c2 01       	movw	r24, r4
    108a:	b1 01       	movw	r22, r2
    108c:	a4 01       	movw	r20, r8
    108e:	93 01       	movw	r18, r6
    1090:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
    1094:	3b 01       	movw	r6, r22
    1096:	4c 01       	movw	r8, r24
    1098:	c2 01       	movw	r24, r4
    109a:	b1 01       	movw	r22, r2
    109c:	29 8d       	ldd	r18, Y+25	; 0x19
    109e:	3a 8d       	ldd	r19, Y+26	; 0x1a
    10a0:	4b 8d       	ldd	r20, Y+27	; 0x1b
    10a2:	5c 8d       	ldd	r21, Y+28	; 0x1c
    10a4:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
    10a8:	9b 01       	movw	r18, r22
    10aa:	ac 01       	movw	r20, r24
    10ac:	a6 0c       	add	r10, r6
    10ae:	b7 1c       	adc	r11, r7
    10b0:	c8 1c       	adc	r12, r8
    10b2:	d9 1c       	adc	r13, r9
    10b4:	29 a0       	ldd	r2, Y+33	; 0x21
    10b6:	3a a0       	ldd	r3, Y+34	; 0x22
    10b8:	4b a0       	ldd	r4, Y+35	; 0x23
    10ba:	5c a0       	ldd	r5, Y+36	; 0x24
    10bc:	c2 01       	movw	r24, r4
    10be:	aa 27       	eor	r26, r26
    10c0:	bb 27       	eor	r27, r27
    10c2:	a8 0e       	add	r10, r24
    10c4:	b9 1e       	adc	r11, r25
    10c6:	ca 1e       	adc	r12, r26
    10c8:	db 1e       	adc	r13, r27
    10ca:	a6 14       	cp	r10, r6
    10cc:	b7 04       	cpc	r11, r7
    10ce:	c8 04       	cpc	r12, r8
    10d0:	d9 04       	cpc	r13, r9
    10d2:	20 f4       	brcc	.+8      	; 0x10dc <__udivdi3+0xbde>
    10d4:	20 50       	subi	r18, 0x00	; 0
    10d6:	30 40       	sbci	r19, 0x00	; 0
    10d8:	4f 4f       	sbci	r20, 0xFF	; 255
    10da:	5f 4f       	sbci	r21, 0xFF	; 255
    10dc:	c6 01       	movw	r24, r12
    10de:	aa 27       	eor	r26, r26
    10e0:	bb 27       	eor	r27, r27
    10e2:	82 0f       	add	r24, r18
    10e4:	93 1f       	adc	r25, r19
    10e6:	a4 1f       	adc	r26, r20
    10e8:	b5 1f       	adc	r27, r21
    10ea:	2d 8d       	ldd	r18, Y+29	; 0x1d
    10ec:	3e 8d       	ldd	r19, Y+30	; 0x1e
    10ee:	4f 8d       	ldd	r20, Y+31	; 0x1f
    10f0:	58 a1       	ldd	r21, Y+32	; 0x20
    10f2:	28 17       	cp	r18, r24
    10f4:	39 07       	cpc	r19, r25
    10f6:	4a 07       	cpc	r20, r26
    10f8:	5b 07       	cpc	r21, r27
    10fa:	18 f1       	brcs	.+70     	; 0x1142 <__udivdi3+0xc44>
    10fc:	82 17       	cp	r24, r18
    10fe:	93 07       	cpc	r25, r19
    1100:	a4 07       	cpc	r26, r20
    1102:	b5 07       	cpc	r27, r21
    1104:	a1 f5       	brne	.+104    	; 0x116e <__udivdi3+0xc70>
    1106:	65 01       	movw	r12, r10
    1108:	bb 24       	eor	r11, r11
    110a:	aa 24       	eor	r10, r10
    110c:	89 a1       	ldd	r24, Y+33	; 0x21
    110e:	9a a1       	ldd	r25, Y+34	; 0x22
    1110:	ab a1       	ldd	r26, Y+35	; 0x23
    1112:	bc a1       	ldd	r27, Y+36	; 0x24
    1114:	a0 70       	andi	r26, 0x00	; 0
    1116:	b0 70       	andi	r27, 0x00	; 0
    1118:	a8 0e       	add	r10, r24
    111a:	b9 1e       	adc	r11, r25
    111c:	ca 1e       	adc	r12, r26
    111e:	db 1e       	adc	r13, r27
    1120:	8d a1       	ldd	r24, Y+37	; 0x25
    1122:	9e a1       	ldd	r25, Y+38	; 0x26
    1124:	af a1       	ldd	r26, Y+39	; 0x27
    1126:	b8 a5       	ldd	r27, Y+40	; 0x28
    1128:	09 a4       	ldd	r0, Y+41	; 0x29
    112a:	04 c0       	rjmp	.+8      	; 0x1134 <__udivdi3+0xc36>
    112c:	88 0f       	add	r24, r24
    112e:	99 1f       	adc	r25, r25
    1130:	aa 1f       	adc	r26, r26
    1132:	bb 1f       	adc	r27, r27
    1134:	0a 94       	dec	r0
    1136:	d2 f7       	brpl	.-12     	; 0x112c <__udivdi3+0xc2e>
    1138:	8a 15       	cp	r24, r10
    113a:	9b 05       	cpc	r25, r11
    113c:	ac 05       	cpc	r26, r12
    113e:	bd 05       	cpc	r27, r13
    1140:	b0 f4       	brcc	.+44     	; 0x116e <__udivdi3+0xc70>
    1142:	08 94       	sec
    1144:	e1 08       	sbc	r14, r1
    1146:	f1 08       	sbc	r15, r1
    1148:	01 09       	sbc	r16, r1
    114a:	11 09       	sbc	r17, r1
    114c:	10 c0       	rjmp	.+32     	; 0x116e <__udivdi3+0xc70>
    114e:	aa 24       	eor	r10, r10
    1150:	bb 24       	eor	r11, r11
    1152:	65 01       	movw	r12, r10
    1154:	ee 24       	eor	r14, r14
    1156:	ff 24       	eor	r15, r15
    1158:	87 01       	movw	r16, r14
    115a:	0c c0       	rjmp	.+24     	; 0x1174 <__udivdi3+0xc76>
    115c:	aa 24       	eor	r10, r10
    115e:	bb 24       	eor	r11, r11
    1160:	65 01       	movw	r12, r10
    1162:	81 e0       	ldi	r24, 0x01	; 1
    1164:	e8 2e       	mov	r14, r24
    1166:	f1 2c       	mov	r15, r1
    1168:	01 2d       	mov	r16, r1
    116a:	11 2d       	mov	r17, r1
    116c:	03 c0       	rjmp	.+6      	; 0x1174 <__udivdi3+0xc76>
    116e:	aa 24       	eor	r10, r10
    1170:	bb 24       	eor	r11, r11
    1172:	65 01       	movw	r12, r10
    1174:	fe 01       	movw	r30, r28
    1176:	71 96       	adiw	r30, 0x11	; 17
    1178:	88 e0       	ldi	r24, 0x08	; 8
    117a:	df 01       	movw	r26, r30
    117c:	1d 92       	st	X+, r1
    117e:	8a 95       	dec	r24
    1180:	e9 f7       	brne	.-6      	; 0x117c <__udivdi3+0xc7e>
    1182:	e9 8a       	std	Y+17, r14	; 0x11
    1184:	fa 8a       	std	Y+18, r15	; 0x12
    1186:	0b 8b       	std	Y+19, r16	; 0x13
    1188:	1c 8b       	std	Y+20, r17	; 0x14
    118a:	ad 8a       	std	Y+21, r10	; 0x15
    118c:	be 8a       	std	Y+22, r11	; 0x16
    118e:	cf 8a       	std	Y+23, r12	; 0x17
    1190:	d8 8e       	std	Y+24, r13	; 0x18
    1192:	2e 2d       	mov	r18, r14
    1194:	3a 89       	ldd	r19, Y+18	; 0x12
    1196:	4b 89       	ldd	r20, Y+19	; 0x13
    1198:	5c 89       	ldd	r21, Y+20	; 0x14
    119a:	6a 2d       	mov	r22, r10
    119c:	7e 89       	ldd	r23, Y+22	; 0x16
    119e:	8f 89       	ldd	r24, Y+23	; 0x17
    11a0:	98 8d       	ldd	r25, Y+24	; 0x18
    11a2:	e8 96       	adiw	r28, 0x38	; 56
    11a4:	e2 e1       	ldi	r30, 0x12	; 18
    11a6:	0c 94 07 3b 	jmp	0x760e	; 0x760e <__epilogue_restores__>

000011aa <bootloader>:
	.gpio_cont_ddr = &NAND1_CONT_DDR, .gpio_cont_pin = &NAND1_CONT_PIN, .gpio_cont_port = &NAND1_CONT_PORT,
	.gpio_io_ddr = &NAND1_IO_DDR, .gpio_io_pin = &NAND1_IO_PIN, .gpio_io_port = &NAND1_IO_PORT
};

void bootloader(void) {
	cli();
    11aa:	f8 94       	cli
	// disable watchdog, if enabled
	// disable all peripherals
	UDCON = 1;
    11ac:	81 e0       	ldi	r24, 0x01	; 1
    11ae:	80 93 e0 00 	sts	0x00E0, r24
	USBCON = (1<<FRZCLK);  // disable USB
    11b2:	80 e2       	ldi	r24, 0x20	; 32
    11b4:	80 93 d8 00 	sts	0x00D8, r24
	UCSR1B = 0;
    11b8:	e9 ec       	ldi	r30, 0xC9	; 201
    11ba:	f0 e0       	ldi	r31, 0x00	; 0
    11bc:	10 82       	st	Z, r1
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    11be:	8f e4       	ldi	r24, 0x4F	; 79
    11c0:	93 ec       	ldi	r25, 0xC3	; 195
    11c2:	a0 e0       	ldi	r26, 0x00	; 0
    11c4:	b0 e0       	ldi	r27, 0x00	; 0
    11c6:	01 97       	sbiw	r24, 0x01	; 1
    11c8:	a1 09       	sbc	r26, r1
    11ca:	b1 09       	sbc	r27, r1
    11cc:	00 00       	nop
    11ce:	01 f0       	breq	.+0      	; 0x11d0 <bootloader+0x26>
    11d0:	d1 f7       	brne	.-12     	; 0x11c6 <bootloader+0x1c>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    11d2:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    11d4:	00 00       	nop
	_delay_ms(50);

	EIMSK = 0; PCICR = 0; SPCR = 0; ACSR = 0; EECR = 0; ADCSRA = 0;
    11d6:	1d ba       	out	0x1d, r1	; 29
    11d8:	10 92 68 00 	sts	0x0068, r1
    11dc:	1c bc       	out	0x2c, r1	; 44
    11de:	10 be       	out	0x30, r1	; 48
    11e0:	1f ba       	out	0x1f, r1	; 31
    11e2:	10 92 7a 00 	sts	0x007A, r1
	TIMSK0 = 0; TIMSK1 = 0; TIMSK2 = 0; TIMSK3 = 0; UCSR1B = 0; TWCR = 0;
    11e6:	10 92 6e 00 	sts	0x006E, r1
    11ea:	10 92 6f 00 	sts	0x006F, r1
    11ee:	10 92 70 00 	sts	0x0070, r1
    11f2:	10 92 71 00 	sts	0x0071, r1
    11f6:	10 82       	st	Z, r1
    11f8:	10 92 bc 00 	sts	0x00BC, r1
	DDRA = 0; DDRB = 0; DDRC = 0; DDRD = 0; DDRE = 0; DDRF = 0;
    11fc:	11 b8       	out	0x01, r1	; 1
    11fe:	14 b8       	out	0x04, r1	; 4
    1200:	17 b8       	out	0x07, r1	; 7
    1202:	1a b8       	out	0x0a, r1	; 10
    1204:	1d b8       	out	0x0d, r1	; 13
    1206:	10 ba       	out	0x10, r1	; 16
	PORTA = 0; PORTB = 0; PORTC = 0; PORTD = 0; PORTE = 0; PORTF = 0;
    1208:	12 b8       	out	0x02, r1	; 2
    120a:	15 b8       	out	0x05, r1	; 5
    120c:	18 b8       	out	0x08, r1	; 8
    120e:	1b b8       	out	0x0b, r1	; 11
    1210:	1e b8       	out	0x0e, r1	; 14
    1212:	11 ba       	out	0x11, r1	; 17

	__asm volatile("jmp 0x1FC00");
    1214:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__data_load_end+0x183d6>
}
    1218:	08 95       	ret

0000121a <speedtest_receive>:

// pure usb receive takes 16secs (1019KB/s) for 16MB
void speedtest_receive(void) {
    121a:	cf 93       	push	r28
    121c:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    121e:	82 e0       	ldi	r24, 0x02	; 2
    1220:	80 93 e9 00 	sts	0x00E9, r24
    1224:	c0 e0       	ldi	r28, 0x00	; 0
    1226:	d2 e0       	ldi	r29, 0x02	; 2
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1228:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (i < NOR_BSS_32) {
		/* Check if the current endpoint can be read */
		while (!Endpoint_IsOUTReceived()) USB_USBTask();
    122c:	82 fd       	sbrc	r24, 2
    122e:	06 c0       	rjmp	.+12     	; 0x123c <speedtest_receive+0x22>
    1230:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    1234:	80 91 e8 00 	lds	r24, 0x00E8
    1238:	82 ff       	sbrs	r24, 2
    123a:	fa cf       	rjmp	.-12     	; 0x1230 <speedtest_receive+0x16>

	__asm volatile("jmp 0x1FC00");
}

// pure usb receive takes 16secs (1019KB/s) for 16MB
void speedtest_receive(void) {
    123c:	80 e4       	ldi	r24, 0x40	; 64
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    123e:	90 91 f1 00 	lds	r25, 0x00F1
    1242:	81 50       	subi	r24, 0x01	; 1

	while (i < NOR_BSS_32) {
		/* Check if the current endpoint can be read */
		while (!Endpoint_IsOUTReceived()) USB_USBTask();
			
		for (k = 0; k < RX_BUFFER_SIZE; ++k) {
    1244:	e1 f7       	brne	.-8      	; 0x123e <speedtest_receive+0x24>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1246:	80 91 e8 00 	lds	r24, 0x00E8
    124a:	8b 77       	andi	r24, 0x7B	; 123
    124c:	80 93 e8 00 	sts	0x00E8, r24
    1250:	21 97       	sbiw	r28, 0x01	; 1
	uint16_t i = 0;
	
	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (i < NOR_BSS_32) {
    1252:	51 f7       	brne	.-44     	; 0x1228 <speedtest_receive+0xe>
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    1254:	e0 91 ea 02 	lds	r30, 0x02EA
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	e5 51       	subi	r30, 0x15	; 21
    125c:	fd 4f       	sbci	r31, 0xFD	; 253
    125e:	8b e4       	ldi	r24, 0x4B	; 75
    1260:	80 83       	st	Z, r24
	
	if (transmit) {
		_tx_buffer_ix = 0;
    1262:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1266:	81 e0       	ldi	r24, 0x01	; 1
    1268:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    126c:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    1270:	80 fd       	sbrc	r24, 0
    1272:	06 c0       	rjmp	.+12     	; 0x1280 <speedtest_receive+0x66>
		USB_USBTask();
    1274:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    1278:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    127c:	80 ff       	sbrs	r24, 0
    127e:	fa cf       	rjmp	.-12     	; 0x1274 <speedtest_receive+0x5a>
		USB_USBTask();

	Endpoint_Write_8(_tx_buffer[0]);
    1280:	80 91 eb 02 	lds	r24, 0x02EB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    1284:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[1]);
    1288:	80 91 ec 02 	lds	r24, 0x02EC
    128c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[2]);
    1290:	80 91 ed 02 	lds	r24, 0x02ED
    1294:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[3]);
    1298:	80 91 ee 02 	lds	r24, 0x02EE
    129c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[4]);
    12a0:	80 91 ef 02 	lds	r24, 0x02EF
    12a4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[5]);
    12a8:	80 91 f0 02 	lds	r24, 0x02F0
    12ac:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[6]);
    12b0:	80 91 f1 02 	lds	r24, 0x02F1
    12b4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[7]);
    12b8:	80 91 f2 02 	lds	r24, 0x02F2
    12bc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[8]);
    12c0:	80 91 f3 02 	lds	r24, 0x02F3
    12c4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[9]);
    12c8:	80 91 f4 02 	lds	r24, 0x02F4
    12cc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[10]);
    12d0:	80 91 f5 02 	lds	r24, 0x02F5
    12d4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[11]);
    12d8:	80 91 f6 02 	lds	r24, 0x02F6
    12dc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[12]);
    12e0:	80 91 f7 02 	lds	r24, 0x02F7
    12e4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[13]);
    12e8:	80 91 f8 02 	lds	r24, 0x02F8
    12ec:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[14]);
    12f0:	80 91 f9 02 	lds	r24, 0x02F9
    12f4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[15]);
    12f8:	80 91 fa 02 	lds	r24, 0x02FA
    12fc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[16]);
    1300:	80 91 fb 02 	lds	r24, 0x02FB
    1304:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[17]);
    1308:	80 91 fc 02 	lds	r24, 0x02FC
    130c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[18]);
    1310:	80 91 fd 02 	lds	r24, 0x02FD
    1314:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[19]);
    1318:	80 91 fe 02 	lds	r24, 0x02FE
    131c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[20]);
    1320:	80 91 ff 02 	lds	r24, 0x02FF
    1324:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[21]);
    1328:	80 91 00 03 	lds	r24, 0x0300
    132c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[22]);
    1330:	80 91 01 03 	lds	r24, 0x0301
    1334:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[23]);
    1338:	80 91 02 03 	lds	r24, 0x0302
    133c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[24]);
    1340:	80 91 03 03 	lds	r24, 0x0303
    1344:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[25]);
    1348:	80 91 04 03 	lds	r24, 0x0304
    134c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[26]);
    1350:	80 91 05 03 	lds	r24, 0x0305
    1354:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[27]);
    1358:	80 91 06 03 	lds	r24, 0x0306
    135c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[28]);
    1360:	80 91 07 03 	lds	r24, 0x0307
    1364:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[29]);
    1368:	80 91 08 03 	lds	r24, 0x0308
    136c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[30]);
    1370:	80 91 09 03 	lds	r24, 0x0309
    1374:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[31]);
    1378:	80 91 0a 03 	lds	r24, 0x030A
    137c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[32]);
    1380:	80 91 0b 03 	lds	r24, 0x030B
    1384:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[33]);
    1388:	80 91 0c 03 	lds	r24, 0x030C
    138c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[34]);
    1390:	80 91 0d 03 	lds	r24, 0x030D
    1394:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[35]);
    1398:	80 91 0e 03 	lds	r24, 0x030E
    139c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[36]);
    13a0:	80 91 0f 03 	lds	r24, 0x030F
    13a4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[37]);
    13a8:	80 91 10 03 	lds	r24, 0x0310
    13ac:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[38]);
    13b0:	80 91 11 03 	lds	r24, 0x0311
    13b4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[39]);
    13b8:	80 91 12 03 	lds	r24, 0x0312
    13bc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[40]);
    13c0:	80 91 13 03 	lds	r24, 0x0313
    13c4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[41]);
    13c8:	80 91 14 03 	lds	r24, 0x0314
    13cc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[42]);
    13d0:	80 91 15 03 	lds	r24, 0x0315
    13d4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[43]);
    13d8:	80 91 16 03 	lds	r24, 0x0316
    13dc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[44]);
    13e0:	80 91 17 03 	lds	r24, 0x0317
    13e4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[45]);
    13e8:	80 91 18 03 	lds	r24, 0x0318
    13ec:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[46]);
    13f0:	80 91 19 03 	lds	r24, 0x0319
    13f4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[47]);
    13f8:	80 91 1a 03 	lds	r24, 0x031A
    13fc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[48]);
    1400:	80 91 1b 03 	lds	r24, 0x031B
    1404:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[49]);
    1408:	80 91 1c 03 	lds	r24, 0x031C
    140c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[50]);
    1410:	80 91 1d 03 	lds	r24, 0x031D
    1414:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[51]);
    1418:	80 91 1e 03 	lds	r24, 0x031E
    141c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[52]);
    1420:	80 91 1f 03 	lds	r24, 0x031F
    1424:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[53]);
    1428:	80 91 20 03 	lds	r24, 0x0320
    142c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[54]);
    1430:	80 91 21 03 	lds	r24, 0x0321
    1434:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[55]);
    1438:	80 91 22 03 	lds	r24, 0x0322
    143c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[56]);
    1440:	80 91 23 03 	lds	r24, 0x0323
    1444:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[57]);
    1448:	80 91 24 03 	lds	r24, 0x0324
    144c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[58]);
    1450:	80 91 25 03 	lds	r24, 0x0325
    1454:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[59]);
    1458:	80 91 26 03 	lds	r24, 0x0326
    145c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[60]);
    1460:	80 91 27 03 	lds	r24, 0x0327
    1464:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[61]);
    1468:	80 91 28 03 	lds	r24, 0x0328
    146c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[62]);
    1470:	80 91 29 03 	lds	r24, 0x0329
    1474:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[63]);
    1478:	80 91 2a 03 	lds	r24, 0x032A
    147c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    1480:	80 91 e8 00 	lds	r24, 0x00E8
    1484:	8e 77       	andi	r24, 0x7E	; 126
    1486:	80 93 e8 00 	sts	0x00E8, r24
		Endpoint_ClearOUT();

		i += RX_BUFFER_SIZE;
	}	
	usbio_set_byte('K', 1);
}
    148a:	df 91       	pop	r29
    148c:	cf 91       	pop	r28
    148e:	08 95       	ret

00001490 <speedtest_send>:

// pure usb transmit takes 15secs (1040KB/s) for 16MB
void speedtest_send(void) {
    1490:	cf 93       	push	r28
    1492:	df 93       	push	r29
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1494:	81 e0       	ldi	r24, 0x01	; 1
    1496:	80 93 e9 00 	sts	0x00E9, r24
    149a:	c0 e0       	ldi	r28, 0x00	; 0
    149c:	d0 e0       	ldi	r29, 0x00	; 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    149e:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);

	while (i < NOR_BSS_128) {
		/* Check if the current endpoint can be written to and that the next sample should be stored */
		while (!Endpoint_IsINReady()) USB_USBTask();
    14a2:	80 fd       	sbrc	r24, 0
    14a4:	06 c0       	rjmp	.+12     	; 0x14b2 <speedtest_send+0x22>
    14a6:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    14aa:	80 91 e8 00 	lds	r24, 0x00E8
    14ae:	80 ff       	sbrs	r24, 0
    14b0:	fa cf       	rjmp	.-12     	; 0x14a6 <speedtest_send+0x16>
	}	
	usbio_set_byte('K', 1);
}

// pure usb transmit takes 15secs (1040KB/s) for 16MB
void speedtest_send(void) {
    14b2:	80 e4       	ldi	r24, 0x40	; 64
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    14b4:	10 92 f1 00 	sts	0x00F1, r1
    14b8:	81 50       	subi	r24, 0x01	; 1

	while (i < NOR_BSS_128) {
		/* Check if the current endpoint can be written to and that the next sample should be stored */
		while (!Endpoint_IsINReady()) USB_USBTask();

		for (k = 0; k < TX_BUFFER_SIZE; ++k) {
    14ba:	e1 f7       	brne	.-8      	; 0x14b4 <speedtest_send+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    14bc:	80 91 e8 00 	lds	r24, 0x00E8
    14c0:	8e 77       	andi	r24, 0x7E	; 126
    14c2:	80 93 e8 00 	sts	0x00E8, r24
    14c6:	21 96       	adiw	r28, 0x01	; 1
	uint32_t i = 0;
	
	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);

	while (i < NOR_BSS_128) {
    14c8:	88 e0       	ldi	r24, 0x08	; 8
    14ca:	c0 30       	cpi	r28, 0x00	; 0
    14cc:	d8 07       	cpc	r29, r24
    14ce:	39 f7       	brne	.-50     	; 0x149e <speedtest_send+0xe>

		Endpoint_ClearIN();
		
		i += TX_BUFFER_SIZE;
	}
}
    14d0:	df 91       	pop	r29
    14d2:	cf 91       	pop	r28
    14d4:	08 95       	ret

000014d6 <init_nand>:


int32_t init_nand(struct nand_driver_data *nand) {
	int32_t retval;

	retval = nand_init(nand);
    14d6:	0e 94 49 21 	call	0x4292	; 0x4292 <nand_init>
    14da:	9b 01       	movw	r18, r22
    14dc:	ac 01       	movw	r20, r24
	if (retval) {
    14de:	61 15       	cp	r22, r1
    14e0:	71 05       	cpc	r23, r1
    14e2:	81 05       	cpc	r24, r1
    14e4:	91 05       	cpc	r25, r1
    14e6:	21 f4       	brne	.+8      	; 0x14f0 <init_nand+0x1a>
	//if (!buffer) {
		////print_dbg("ERROR: could not allocate buffer\r\n");
		//return -1;
	//}

	return 1;	
    14e8:	21 e0       	ldi	r18, 0x01	; 1
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e0       	ldi	r20, 0x00	; 0
    14ee:	50 e0       	ldi	r21, 0x00	; 0
}
    14f0:	b9 01       	movw	r22, r18
    14f2:	ca 01       	movw	r24, r20
    14f4:	08 95       	ret

000014f6 <nand_initports>:

void nand_initports(void) {
	*(nand0.gpio_cont_ddr) = 0xFF; 				// all control ports - output
    14f6:	e5 e5       	ldi	r30, 0x55	; 85
    14f8:	f1 e0       	ldi	r31, 0x01	; 1
    14fa:	a0 91 55 01 	lds	r26, 0x0155
    14fe:	b0 91 56 01 	lds	r27, 0x0156
    1502:	9f ef       	ldi	r25, 0xFF	; 255
    1504:	9c 93       	st	X, r25
	*(nand0.gpio_cont_ddr) &= ~NAND_CONT_RB;	// ready / busy - input
    1506:	a0 91 55 01 	lds	r26, 0x0155
    150a:	b0 91 56 01 	lds	r27, 0x0156
    150e:	8c 91       	ld	r24, X
    1510:	8f 7b       	andi	r24, 0xBF	; 191
    1512:	8c 93       	st	X, r24
	*(nand0.gpio_cont_ddr) &= ~NAND_CONT_TRI;	// tri - input
    1514:	a0 91 55 01 	lds	r26, 0x0155
    1518:	b0 91 56 01 	lds	r27, 0x0156
    151c:	8c 91       	ld	r24, X
    151e:	8f 77       	andi	r24, 0x7F	; 127
    1520:	8c 93       	st	X, r24
	*(nand0.gpio_cont_port) = 0;				// all low
    1522:	34 97       	sbiw	r30, 0x04	; 4
    1524:	a0 81       	ld	r26, Z
    1526:	b1 81       	ldd	r27, Z+1	; 0x01
    1528:	1c 92       	st	X, r1
	*(nand0.gpio_cont_port) |= NAND_CONT_RB;	// enable pull-up for RB
    152a:	a0 81       	ld	r26, Z
    152c:	b1 81       	ldd	r27, Z+1	; 0x01
    152e:	8c 91       	ld	r24, X
    1530:	80 64       	ori	r24, 0x40	; 64
    1532:	8c 93       	st	X, r24
	*(nand0.gpio_cont_port) |= NAND_CONT_WE;	// WE high
    1534:	a0 81       	ld	r26, Z
    1536:	b1 81       	ldd	r27, Z+1	; 0x01
    1538:	8c 91       	ld	r24, X
    153a:	80 62       	ori	r24, 0x20	; 32
    153c:	8c 93       	st	X, r24
	*(nand0.gpio_cont_port) |= NAND_CONT_WP;	// WP high
    153e:	01 90       	ld	r0, Z+
    1540:	f0 81       	ld	r31, Z
    1542:	e0 2d       	mov	r30, r0
    1544:	80 81       	ld	r24, Z
    1546:	80 61       	ori	r24, 0x10	; 16
    1548:	80 83       	st	Z, r24
	*(nand0.gpio_io_ddr) = 0x00;				// all i/o ports - input
    154a:	e0 91 4f 01 	lds	r30, 0x014F
    154e:	f0 91 50 01 	lds	r31, 0x0150
    1552:	10 82       	st	Z, r1
	*(nand0.gpio_io_port) = 0x00;				// disable pull-ups
    1554:	e0 91 4b 01 	lds	r30, 0x014B
    1558:	f0 91 4c 01 	lds	r31, 0x014C
    155c:	10 82       	st	Z, r1

	*(nand1.gpio_cont_ddr) = 0xFF; 				// all control ports - output
    155e:	ec ea       	ldi	r30, 0xAC	; 172
    1560:	f1 e0       	ldi	r31, 0x01	; 1
    1562:	a0 91 ac 01 	lds	r26, 0x01AC
    1566:	b0 91 ad 01 	lds	r27, 0x01AD
    156a:	9c 93       	st	X, r25
	*(nand1.gpio_cont_ddr) &= ~NAND_CONT_RB;	// ready / busy - input
    156c:	a0 91 ac 01 	lds	r26, 0x01AC
    1570:	b0 91 ad 01 	lds	r27, 0x01AD
    1574:	8c 91       	ld	r24, X
    1576:	8f 7b       	andi	r24, 0xBF	; 191
    1578:	8c 93       	st	X, r24
	*(nand1.gpio_cont_ddr) &= ~NAND_CONT_TRI;	// tri - input
    157a:	a0 91 ac 01 	lds	r26, 0x01AC
    157e:	b0 91 ad 01 	lds	r27, 0x01AD
    1582:	8c 91       	ld	r24, X
    1584:	8f 77       	andi	r24, 0x7F	; 127
    1586:	8c 93       	st	X, r24
	*(nand1.gpio_cont_port) = 0;				// all low
    1588:	34 97       	sbiw	r30, 0x04	; 4
    158a:	a0 81       	ld	r26, Z
    158c:	b1 81       	ldd	r27, Z+1	; 0x01
    158e:	1c 92       	st	X, r1
	*(nand1.gpio_cont_port) |= NAND_CONT_RB;	// enable pull-up for RB
    1590:	a0 81       	ld	r26, Z
    1592:	b1 81       	ldd	r27, Z+1	; 0x01
    1594:	8c 91       	ld	r24, X
    1596:	80 64       	ori	r24, 0x40	; 64
    1598:	8c 93       	st	X, r24
	*(nand1.gpio_cont_port) |= NAND_CONT_WE;	// WE high
    159a:	a0 81       	ld	r26, Z
    159c:	b1 81       	ldd	r27, Z+1	; 0x01
    159e:	8c 91       	ld	r24, X
    15a0:	80 62       	ori	r24, 0x20	; 32
    15a2:	8c 93       	st	X, r24
	*(nand1.gpio_cont_port) |= NAND_CONT_WP;	// WP high
    15a4:	01 90       	ld	r0, Z+
    15a6:	f0 81       	ld	r31, Z
    15a8:	e0 2d       	mov	r30, r0
    15aa:	80 81       	ld	r24, Z
    15ac:	80 61       	ori	r24, 0x10	; 16
    15ae:	80 83       	st	Z, r24
	*(nand1.gpio_io_ddr) = 0x00;				// all i/o ports - input
    15b0:	e0 91 a6 01 	lds	r30, 0x01A6
    15b4:	f0 91 a7 01 	lds	r31, 0x01A7
    15b8:	10 82       	st	Z, r1
	*(nand1.gpio_io_port) = 0x00;				// disable pull-ups
    15ba:	e0 91 a2 01 	lds	r30, 0x01A2
    15be:	f0 91 a3 01 	lds	r31, 0x01A3
    15c2:	10 82       	st	Z, r1
//
	//*(nand1.gpio_cont_ddr) = 0xFF; 				// all control ports - input
	//*(nand1.gpio_cont_port) = 0xFF;				// disable pull-ups
	//*(nand1.gpio_io_ddr) = 0xFF;				// all i/o ports - input
	//*(nand1.gpio_io_port) = 0xFF;				// disable pull-ups
}
    15c4:	08 95       	ret

000015c6 <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void) {
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    15c6:	84 b7       	in	r24, 0x34	; 52
    15c8:	87 7f       	andi	r24, 0xF7	; 247
    15ca:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    15cc:	88 e1       	ldi	r24, 0x18	; 24
    15ce:	0f b6       	in	r0, 0x3f	; 63
    15d0:	f8 94       	cli
    15d2:	80 93 60 00 	sts	0x0060, r24
    15d6:	10 92 60 00 	sts	0x0060, r1
    15da:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    15dc:	80 e8       	ldi	r24, 0x80	; 128
    15de:	91 e0       	ldi	r25, 0x01	; 1
    15e0:	0f b6       	in	r0, 0x3f	; 63
    15e2:	f8 94       	cli
    15e4:	80 93 61 00 	sts	0x0061, r24
    15e8:	90 93 61 00 	sts	0x0061, r25
    15ec:	0f be       	out	0x3f, r0	; 63
	defined(__AVR_ATmega16U4__)  || defined(__AVR_ATmega32U4__) ||  \
	defined(__AVR_ATmega32U6__)))
	// note the JTD bit must be written twice within 4 clock cycles to disable JTAG
	// you must also set the IVSEL bit at the same time, which requires IVCE to be set first
	// port pull-up resistors are enabled - PUD(Pull Up Disable) = 0
	MCUCR = (1 << JTD) | (1 << IVCE) | (0 << PUD);
    15ee:	91 e8       	ldi	r25, 0x81	; 129
    15f0:	95 bf       	out	0x35, r25	; 53
	MCUCR = (1 << JTD) | (0 << IVSEL) | (0 << IVCE) | (0 << PUD);
    15f2:	85 bf       	out	0x35, r24	; 53
	//PRR0 = 0xFF;
	//PRR1 = 0x7F;
	//ACSR = 0x80;
	
	//set all i/o lines to input
	nor_releaseports();
    15f4:	0e 94 ab 2a 	call	0x5556	; 0x5556 <nor_releaseports>

	USB_Init();
    15f8:	0c 94 1d 37 	jmp	0x6e3a	; 0x6e3a <USB_Init>

000015fc <main>:

//uint8_t buffer[2112];
//uint8_t block_status[1024];

int main(void)
{
    15fc:	2f 92       	push	r2
    15fe:	3f 92       	push	r3
    1600:	4f 92       	push	r4
    1602:	5f 92       	push	r5
    1604:	6f 92       	push	r6
    1606:	7f 92       	push	r7
    1608:	8f 92       	push	r8
    160a:	9f 92       	push	r9
    160c:	af 92       	push	r10
    160e:	bf 92       	push	r11
    1610:	cf 92       	push	r12
    1612:	df 92       	push	r13
    1614:	ef 92       	push	r14
    1616:	ff 92       	push	r15
    1618:	0f 93       	push	r16
    161a:	1f 93       	push	r17
    161c:	df 93       	push	r29
    161e:	cf 93       	push	r28
    1620:	cd b7       	in	r28, 0x3d	; 61
    1622:	de b7       	in	r29, 0x3e	; 62
    1624:	62 97       	sbiw	r28, 0x12	; 18
    1626:	0f b6       	in	r0, 0x3f	; 63
    1628:	f8 94       	cli
    162a:	de bf       	out	0x3e, r29	; 62
    162c:	0f be       	out	0x3f, r0	; 63
    162e:	cd bf       	out	0x3d, r28	; 61
	SetupHardware();
    1630:	ca df       	rcall	.-108    	; 0x15c6 <SetupHardware>
	sei();
    1632:	78 94       	sei

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	while (USB_DeviceState != DEVICE_STATE_Configured)  /* wait */ 
    1634:	80 91 73 03 	lds	r24, 0x0373
    1638:	84 30       	cpi	r24, 0x04	; 4
    163a:	31 f0       	breq	.+12     	; 0x1648 <main+0x4c>
		USB_USBTask();
    163c:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
	sei();

	// Initialize the USB, and then wait for the host to set configuration.
	// If the Teensy is powered without a PC connected to the USB port,
	// this will wait forever.
	while (USB_DeviceState != DEVICE_STATE_Configured)  /* wait */ 
    1640:	80 91 73 03 	lds	r24, 0x0373
    1644:	84 30       	cpi	r24, 0x04	; 4
    1646:	d1 f7       	brne	.-12     	; 0x163c <main+0x40>
		USB_USBTask();

	//configure all i/o lines (and set tristate=low)
	//nor_initports();
	nand_initports();
    1648:	56 df       	rcall	.-340    	; 0x14f6 <nand_initports>
}

static __inline__ void      /* exactly 8 cycles/loop, max 2**32 loops */
_delay_loop_3_x( uint32_t __n )
{                                               /* cycles per loop      */
    __asm__ volatile (                          /* __n..one        zero */
    164a:	8f e3       	ldi	r24, 0x3F	; 63
    164c:	92 e4       	ldi	r25, 0x42	; 66
    164e:	af e0       	ldi	r26, 0x0F	; 15
    1650:	b0 e0       	ldi	r27, 0x00	; 0
    1652:	01 97       	sbiw	r24, 0x01	; 1
    1654:	a1 09       	sbc	r26, r1
    1656:	b1 09       	sbc	r27, r1
    1658:	00 00       	nop
    165a:	01 f0       	breq	.+0      	; 0x165c <main+0x60>
    165c:	d1 f7       	brne	.-12     	; 0x1652 <main+0x56>
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    165e:	c8 95       	lpm
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    1660:	00 00       	nop
uint8_t _tx_buffer_ix, _rx_buffer_ix;
uint8_t _tx_buffer[TX_BUFFER_SIZE], _rx_buffer[RX_BUFFER_SIZE];

static inline void usbio_initbuffers(void) __attribute__ ((always_inline));
static inline void usbio_initbuffers(void) {
	_tx_buffer_ix = _rx_buffer_ix = _rx_buffer_size = 0;
    1662:	10 92 6d 03 	sts	0x036D, r1
    1666:	10 92 6c 03 	sts	0x036C, r1
    166a:	10 92 e8 02 	sts	0x02E8, r1
    166e:	10 92 ea 02 	sts	0x02EA, r1
	memset(_tx_buffer, 0, TX_BUFFER_SIZE);
    1672:	80 e4       	ldi	r24, 0x40	; 64
    1674:	eb ee       	ldi	r30, 0xEB	; 235
    1676:	f2 e0       	ldi	r31, 0x02	; 2
    1678:	df 01       	movw	r26, r30
    167a:	a8 2e       	mov	r10, r24
    167c:	1d 92       	st	X+, r1
    167e:	aa 94       	dec	r10
    1680:	e9 f7       	brne	.-6      	; 0x167c <main+0x80>
	memset(_rx_buffer, 0, RX_BUFFER_SIZE);
    1682:	eb e2       	ldi	r30, 0x2B	; 43
    1684:	f3 e0       	ldi	r31, 0x03	; 3
    1686:	df 01       	movw	r26, r30
    1688:	1d 92       	st	X+, r1
    168a:	8a 95       	dec	r24
    168c:	e9 f7       	brne	.-6      	; 0x1688 <main+0x8c>

	usbio_initbuffers();
	
	int16_t command = -1;
	uint8_t nand_id = 0;
	uint16_t nand_block = 0;
    168e:	aa 24       	eor	r10, r10
    1690:	bb 24       	eor	r11, r11
	_delay_ms(1000);

	usbio_initbuffers();
	
	int16_t command = -1;
	uint8_t nand_id = 0;
    1692:	cc 24       	eor	r12, r12
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1694:	22 e0       	ldi	r18, 0x02	; 2
    1696:	f2 2e       	mov	r15, r18
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    1698:	dd 24       	eor	r13, r13
    169a:	da 94       	dec	r13
    169c:	92 e0       	ldi	r25, 0x02	; 2
    169e:	e9 2e       	mov	r14, r25
    16a0:	15 01       	movw	r2, r10
    16a2:	02 c0       	rjmp	.+4      	; 0x16a8 <main+0xac>
    16a4:	09 89       	ldd	r16, Y+17	; 0x11
    16a6:	1a 89       	ldd	r17, Y+18	; 0x12
	uint16_t nand_block = 0;
	
	while (1) {
		USB_USBTask();
    16a8:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    16ac:	1a 8b       	std	Y+18, r17	; 0x12
    16ae:	09 8b       	std	Y+17, r16	; 0x11
		while (USB_DeviceState == DEVICE_STATE_Configured) { // is user still connected?
    16b0:	80 91 73 03 	lds	r24, 0x0373
    16b4:	84 30       	cpi	r24, 0x04	; 4
    16b6:	b1 f7       	brne	.-20     	; 0x16a4 <main+0xa8>
}

static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
    16b8:	80 91 6c 03 	lds	r24, 0x036C
    16bc:	90 91 6d 03 	lds	r25, 0x036D
    16c0:	9c 01       	movw	r18, r24
    16c2:	00 97       	sbiw	r24, 0x00	; 0
    16c4:	11 f0       	breq	.+4      	; 0x16ca <main+0xce>
    16c6:	0c 94 b6 15 	jmp	0x2b6c	; 0x2b6c <__stack+0xa6d>
    16ca:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    16ce:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    16d2:	82 fd       	sbrc	r24, 2
    16d4:	0a c0       	rjmp	.+20     	; 0x16ea <main+0xee>
    16d6:	09 89       	ldd	r16, Y+17	; 0x11
    16d8:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    16da:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    16de:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    16e2:	82 ff       	sbrs	r24, 2
    16e4:	fa cf       	rjmp	.-12     	; 0x16da <main+0xde>
    16e6:	1a 8b       	std	Y+18, r17	; 0x12
    16e8:	09 8b       	std	Y+17, r16	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    16ea:	90 91 f1 00 	lds	r25, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    16ee:	90 93 2b 03 	sts	0x032B, r25
    16f2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    16f6:	20 93 2c 03 	sts	0x032C, r18
    16fa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    16fe:	80 93 2d 03 	sts	0x032D, r24
    1702:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    1706:	80 93 2e 03 	sts	0x032E, r24
    170a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    170e:	80 93 2f 03 	sts	0x032F, r24
    1712:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    1716:	80 93 30 03 	sts	0x0330, r24
    171a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    171e:	80 93 31 03 	sts	0x0331, r24
    1722:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    1726:	80 93 32 03 	sts	0x0332, r24
    172a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    172e:	80 93 33 03 	sts	0x0333, r24
    1732:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    1736:	80 93 34 03 	sts	0x0334, r24
    173a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    173e:	80 93 35 03 	sts	0x0335, r24
    1742:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    1746:	80 93 36 03 	sts	0x0336, r24
    174a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    174e:	80 93 37 03 	sts	0x0337, r24
    1752:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    1756:	80 93 38 03 	sts	0x0338, r24
    175a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    175e:	80 93 39 03 	sts	0x0339, r24
    1762:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    1766:	80 93 3a 03 	sts	0x033A, r24
    176a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    176e:	80 93 3b 03 	sts	0x033B, r24
    1772:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    1776:	80 93 3c 03 	sts	0x033C, r24
    177a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    177e:	80 93 3d 03 	sts	0x033D, r24
    1782:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    1786:	80 93 3e 03 	sts	0x033E, r24
    178a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    178e:	80 93 3f 03 	sts	0x033F, r24
    1792:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    1796:	80 93 40 03 	sts	0x0340, r24
    179a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    179e:	80 93 41 03 	sts	0x0341, r24
    17a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    17a6:	80 93 42 03 	sts	0x0342, r24
    17aa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    17ae:	80 93 43 03 	sts	0x0343, r24
    17b2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    17b6:	80 93 44 03 	sts	0x0344, r24
    17ba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    17be:	80 93 45 03 	sts	0x0345, r24
    17c2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    17c6:	80 93 46 03 	sts	0x0346, r24
    17ca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    17ce:	80 93 47 03 	sts	0x0347, r24
    17d2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    17d6:	80 93 48 03 	sts	0x0348, r24
    17da:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    17de:	80 93 49 03 	sts	0x0349, r24
    17e2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    17e6:	80 93 4a 03 	sts	0x034A, r24
    17ea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    17ee:	80 93 4b 03 	sts	0x034B, r24
    17f2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    17f6:	80 93 4c 03 	sts	0x034C, r24
    17fa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    17fe:	80 93 4d 03 	sts	0x034D, r24
    1802:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    1806:	80 93 4e 03 	sts	0x034E, r24
    180a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    180e:	80 93 4f 03 	sts	0x034F, r24
    1812:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    1816:	80 93 50 03 	sts	0x0350, r24
    181a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    181e:	80 93 51 03 	sts	0x0351, r24
    1822:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    1826:	80 93 52 03 	sts	0x0352, r24
    182a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    182e:	80 93 53 03 	sts	0x0353, r24
    1832:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    1836:	80 93 54 03 	sts	0x0354, r24
    183a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    183e:	80 93 55 03 	sts	0x0355, r24
    1842:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    1846:	80 93 56 03 	sts	0x0356, r24
    184a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    184e:	80 93 57 03 	sts	0x0357, r24
    1852:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    1856:	80 93 58 03 	sts	0x0358, r24
    185a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    185e:	80 93 59 03 	sts	0x0359, r24
    1862:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    1866:	80 93 5a 03 	sts	0x035A, r24
    186a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    186e:	80 93 5b 03 	sts	0x035B, r24
    1872:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    1876:	80 93 5c 03 	sts	0x035C, r24
    187a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    187e:	80 93 5d 03 	sts	0x035D, r24
    1882:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    1886:	80 93 5e 03 	sts	0x035E, r24
    188a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    188e:	80 93 5f 03 	sts	0x035F, r24
    1892:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    1896:	80 93 60 03 	sts	0x0360, r24
    189a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    189e:	80 93 61 03 	sts	0x0361, r24
    18a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    18a6:	80 93 62 03 	sts	0x0362, r24
    18aa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    18ae:	80 93 63 03 	sts	0x0363, r24
    18b2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    18b6:	80 93 64 03 	sts	0x0364, r24
    18ba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    18be:	80 93 65 03 	sts	0x0365, r24
    18c2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    18c6:	80 93 66 03 	sts	0x0366, r24
    18ca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    18ce:	80 93 67 03 	sts	0x0367, r24
    18d2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    18d6:	80 93 68 03 	sts	0x0368, r24
    18da:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    18de:	80 93 69 03 	sts	0x0369, r24
    18e2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    18e6:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    18ea:	80 91 e8 00 	lds	r24, 0x00E8
    18ee:	8b 77       	andi	r24, 0x7B	; 123
    18f0:	80 93 e8 00 	sts	0x00E8, r24
static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
    18f4:	9a 8b       	std	Y+18, r25	; 0x12
    18f6:	19 8a       	std	Y+17, r1	; 0x11
    18f8:	30 e0       	ldi	r19, 0x00	; 0
    18fa:	e9 89       	ldd	r30, Y+17	; 0x11
    18fc:	fa 89       	ldd	r31, Y+18	; 0x12
    18fe:	2e 2b       	or	r18, r30
    1900:	3f 2b       	or	r19, r31
    1902:	30 93 6d 03 	sts	0x036D, r19
    1906:	20 93 6c 03 	sts	0x036C, r18
		_rx_buffer_ix = 2;
    190a:	e0 92 e8 02 	sts	0x02E8, r14
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    190e:	21 15       	cp	r18, r1
    1910:	31 05       	cpc	r19, r1
    1912:	09 f4       	brne	.+2      	; 0x1916 <main+0x31a>
    1914:	cd ce       	rjmp	.-614    	; 0x16b0 <main+0xb4>
    1916:	40 91 e8 02 	lds	r20, 0x02E8
    191a:	40 34       	cpi	r20, 0x40	; 64
    191c:	08 f0       	brcs	.+2      	; 0x1920 <main+0x324>
    191e:	c8 ce       	rjmp	.-624    	; 0x16b0 <main+0xb4>
		--_rx_buffer_size;
    1920:	21 50       	subi	r18, 0x01	; 1
    1922:	30 40       	sbci	r19, 0x00	; 0
    1924:	30 93 6d 03 	sts	0x036D, r19
    1928:	20 93 6c 03 	sts	0x036C, r18
		++_rx_buffer_ix;
    192c:	84 2f       	mov	r24, r20
    192e:	8f 5f       	subi	r24, 0xFF	; 255
    1930:	80 93 e8 02 	sts	0x02E8, r24
		return _rx_buffer[_rx_buffer_ix - 1];
    1934:	e8 2f       	mov	r30, r24
    1936:	f0 e0       	ldi	r31, 0x00	; 0
    1938:	e6 5d       	subi	r30, 0xD6	; 214
    193a:	fc 4f       	sbci	r31, 0xFC	; 252
			command = usbio_get_byte();
			if (command == -1) continue;
			
			switch (command) {
    193c:	e0 81       	ld	r30, Z
    193e:	f0 e0       	ldi	r31, 0x00	; 0
    1940:	ee 31       	cpi	r30, 0x1E	; 30
    1942:	f1 05       	cpc	r31, r1
    1944:	08 f0       	brcs	.+2      	; 0x1948 <main+0x34c>
    1946:	b4 ce       	rjmp	.-664    	; 0x16b0 <main+0xb4>
    1948:	e4 5b       	subi	r30, 0xB4	; 180
    194a:	ff 4f       	sbci	r31, 0xFF	; 255
    194c:	ee 0f       	add	r30, r30
    194e:	ff 1f       	adc	r31, r31
    1950:	05 90       	lpm	r0, Z+
    1952:	f4 91       	lpm	r31, Z+
    1954:	e0 2d       	mov	r30, r0
    1956:	09 94       	ijmp
				break;
			case CMD_NAND_BLOCK_SET:
				nand_block = (usbio_get_byte() << 8) | usbio_get_byte();
				break;
			case CMD_NAND_READ_BLOCK_RAW:
				switch (nand_id) {
    1958:	cc 20       	and	r12, r12
    195a:	11 f0       	breq	.+4      	; 0x1960 <main+0x364>
    195c:	0c 94 a9 18 	jmp	0x3152	; 0x3152 <__stack+0x1053>
				case 0:
					nand_read_block_raw(&nand0, nand_block);
    1960:	21 01       	movw	r4, r2
    1962:	80 e0       	ldi	r24, 0x00	; 0
    1964:	91 e0       	ldi	r25, 0x01	; 1
					break;
				case 1:
					nand_read_block_raw(&nand1, nand_block);
    1966:	82 01       	movw	r16, r4
    1968:	20 e0       	ldi	r18, 0x00	; 0
    196a:	30 e0       	ldi	r19, 0x00	; 0
    196c:	40 e0       	ldi	r20, 0x00	; 0
    196e:	50 e0       	ldi	r21, 0x00	; 0
    1970:	60 e0       	ldi	r22, 0x00	; 0
    1972:	70 e0       	ldi	r23, 0x00	; 0
    1974:	0e 94 4b 21 	call	0x4296	; 0x4296 <nand_read_block_raw>
    1978:	9b ce       	rjmp	.-714    	; 0x16b0 <main+0xb4>
}

static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
    197a:	21 15       	cp	r18, r1
    197c:	31 05       	cpc	r19, r1
    197e:	11 f0       	breq	.+4      	; 0x1984 <main+0x388>
    1980:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <__stack+0xfe9>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1984:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1988:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    198c:	82 fd       	sbrc	r24, 2
    198e:	0a c0       	rjmp	.+20     	; 0x19a4 <main+0x3a8>
    1990:	09 89       	ldd	r16, Y+17	; 0x11
    1992:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    1994:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    1998:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    199c:	82 ff       	sbrs	r24, 2
    199e:	fa cf       	rjmp	.-12     	; 0x1994 <main+0x398>
    19a0:	1a 8b       	std	Y+18, r17	; 0x12
    19a2:	09 8b       	std	Y+17, r16	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    19a4:	90 91 f1 00 	lds	r25, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    19a8:	90 93 2b 03 	sts	0x032B, r25
    19ac:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    19b0:	20 93 2c 03 	sts	0x032C, r18
    19b4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    19b8:	80 93 2d 03 	sts	0x032D, r24
    19bc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    19c0:	80 93 2e 03 	sts	0x032E, r24
    19c4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    19c8:	80 93 2f 03 	sts	0x032F, r24
    19cc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    19d0:	80 93 30 03 	sts	0x0330, r24
    19d4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    19d8:	80 93 31 03 	sts	0x0331, r24
    19dc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    19e0:	80 93 32 03 	sts	0x0332, r24
    19e4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    19e8:	80 93 33 03 	sts	0x0333, r24
    19ec:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    19f0:	80 93 34 03 	sts	0x0334, r24
    19f4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    19f8:	80 93 35 03 	sts	0x0335, r24
    19fc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    1a00:	80 93 36 03 	sts	0x0336, r24
    1a04:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    1a08:	80 93 37 03 	sts	0x0337, r24
    1a0c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    1a10:	80 93 38 03 	sts	0x0338, r24
    1a14:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    1a18:	80 93 39 03 	sts	0x0339, r24
    1a1c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    1a20:	80 93 3a 03 	sts	0x033A, r24
    1a24:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    1a28:	80 93 3b 03 	sts	0x033B, r24
    1a2c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    1a30:	80 93 3c 03 	sts	0x033C, r24
    1a34:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    1a38:	80 93 3d 03 	sts	0x033D, r24
    1a3c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    1a40:	80 93 3e 03 	sts	0x033E, r24
    1a44:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    1a48:	80 93 3f 03 	sts	0x033F, r24
    1a4c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    1a50:	80 93 40 03 	sts	0x0340, r24
    1a54:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    1a58:	80 93 41 03 	sts	0x0341, r24
    1a5c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    1a60:	80 93 42 03 	sts	0x0342, r24
    1a64:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    1a68:	80 93 43 03 	sts	0x0343, r24
    1a6c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    1a70:	80 93 44 03 	sts	0x0344, r24
    1a74:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    1a78:	80 93 45 03 	sts	0x0345, r24
    1a7c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    1a80:	80 93 46 03 	sts	0x0346, r24
    1a84:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    1a88:	80 93 47 03 	sts	0x0347, r24
    1a8c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    1a90:	80 93 48 03 	sts	0x0348, r24
    1a94:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    1a98:	80 93 49 03 	sts	0x0349, r24
    1a9c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    1aa0:	80 93 4a 03 	sts	0x034A, r24
    1aa4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    1aa8:	80 93 4b 03 	sts	0x034B, r24
    1aac:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    1ab0:	80 93 4c 03 	sts	0x034C, r24
    1ab4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    1ab8:	80 93 4d 03 	sts	0x034D, r24
    1abc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    1ac0:	80 93 4e 03 	sts	0x034E, r24
    1ac4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    1ac8:	80 93 4f 03 	sts	0x034F, r24
    1acc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    1ad0:	80 93 50 03 	sts	0x0350, r24
    1ad4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    1ad8:	80 93 51 03 	sts	0x0351, r24
    1adc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    1ae0:	80 93 52 03 	sts	0x0352, r24
    1ae4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    1ae8:	80 93 53 03 	sts	0x0353, r24
    1aec:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    1af0:	80 93 54 03 	sts	0x0354, r24
    1af4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    1af8:	80 93 55 03 	sts	0x0355, r24
    1afc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    1b00:	80 93 56 03 	sts	0x0356, r24
    1b04:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    1b08:	80 93 57 03 	sts	0x0357, r24
    1b0c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    1b10:	80 93 58 03 	sts	0x0358, r24
    1b14:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    1b18:	80 93 59 03 	sts	0x0359, r24
    1b1c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    1b20:	80 93 5a 03 	sts	0x035A, r24
    1b24:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    1b28:	80 93 5b 03 	sts	0x035B, r24
    1b2c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    1b30:	80 93 5c 03 	sts	0x035C, r24
    1b34:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    1b38:	80 93 5d 03 	sts	0x035D, r24
    1b3c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    1b40:	80 93 5e 03 	sts	0x035E, r24
    1b44:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    1b48:	80 93 5f 03 	sts	0x035F, r24
    1b4c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    1b50:	80 93 60 03 	sts	0x0360, r24
    1b54:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    1b58:	80 93 61 03 	sts	0x0361, r24
    1b5c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    1b60:	80 93 62 03 	sts	0x0362, r24
    1b64:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    1b68:	80 93 63 03 	sts	0x0363, r24
    1b6c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    1b70:	80 93 64 03 	sts	0x0364, r24
    1b74:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    1b78:	80 93 65 03 	sts	0x0365, r24
    1b7c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    1b80:	80 93 66 03 	sts	0x0366, r24
    1b84:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    1b88:	80 93 67 03 	sts	0x0367, r24
    1b8c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    1b90:	80 93 68 03 	sts	0x0368, r24
    1b94:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    1b98:	80 93 69 03 	sts	0x0369, r24
    1b9c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    1ba0:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1ba4:	80 91 e8 00 	lds	r24, 0x00E8
    1ba8:	8b 77       	andi	r24, 0x7B	; 123
    1baa:	80 93 e8 00 	sts	0x00E8, r24
static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
    1bae:	9e 87       	std	Y+14, r25	; 0x0e
    1bb0:	1d 86       	std	Y+13, r1	; 0x0d
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	4d 85       	ldd	r20, Y+13	; 0x0d
    1bb6:	5e 85       	ldd	r21, Y+14	; 0x0e
    1bb8:	24 2b       	or	r18, r20
    1bba:	35 2b       	or	r19, r21
    1bbc:	30 93 6d 03 	sts	0x036D, r19
    1bc0:	20 93 6c 03 	sts	0x036C, r18
		_rx_buffer_ix = 2;
    1bc4:	e0 92 e8 02 	sts	0x02E8, r14
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    1bc8:	21 15       	cp	r18, r1
    1bca:	31 05       	cpc	r19, r1
    1bcc:	11 f0       	breq	.+4      	; 0x1bd2 <main+0x5d6>
    1bce:	0c 94 0e 1c 	jmp	0x381c	; 0x381c <__stack+0x171d>
				break;
			case CMD_NAND_ID_SET:
				nand_id = usbio_get_byte();
				break;
			case CMD_NAND_BLOCK_SET:
				nand_block = (usbio_get_byte() << 8) | usbio_get_byte();
    1bd2:	80 e0       	ldi	r24, 0x00	; 0
    1bd4:	9f ef       	ldi	r25, 0xFF	; 255
    1bd6:	9c 83       	std	Y+4, r25	; 0x04
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1bda:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1bde:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    1be2:	82 fd       	sbrc	r24, 2
    1be4:	0a c0       	rjmp	.+20     	; 0x1bfa <main+0x5fe>
    1be6:	09 89       	ldd	r16, Y+17	; 0x11
    1be8:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    1bea:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    1bee:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    1bf2:	82 ff       	sbrs	r24, 2
    1bf4:	fa cf       	rjmp	.-12     	; 0x1bea <main+0x5ee>
    1bf6:	1a 8b       	std	Y+18, r17	; 0x12
    1bf8:	09 8b       	std	Y+17, r16	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1bfa:	90 91 f1 00 	lds	r25, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    1bfe:	90 93 2b 03 	sts	0x032B, r25
    1c02:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    1c06:	20 93 2c 03 	sts	0x032C, r18
    1c0a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    1c0e:	80 93 2d 03 	sts	0x032D, r24
    1c12:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    1c16:	80 93 2e 03 	sts	0x032E, r24
    1c1a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    1c1e:	80 93 2f 03 	sts	0x032F, r24
    1c22:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    1c26:	80 93 30 03 	sts	0x0330, r24
    1c2a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    1c2e:	80 93 31 03 	sts	0x0331, r24
    1c32:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    1c36:	80 93 32 03 	sts	0x0332, r24
    1c3a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    1c3e:	80 93 33 03 	sts	0x0333, r24
    1c42:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    1c46:	80 93 34 03 	sts	0x0334, r24
    1c4a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    1c4e:	80 93 35 03 	sts	0x0335, r24
    1c52:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    1c56:	80 93 36 03 	sts	0x0336, r24
    1c5a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    1c5e:	80 93 37 03 	sts	0x0337, r24
    1c62:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    1c66:	80 93 38 03 	sts	0x0338, r24
    1c6a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    1c6e:	80 93 39 03 	sts	0x0339, r24
    1c72:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    1c76:	80 93 3a 03 	sts	0x033A, r24
    1c7a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    1c7e:	80 93 3b 03 	sts	0x033B, r24
    1c82:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    1c86:	80 93 3c 03 	sts	0x033C, r24
    1c8a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    1c8e:	80 93 3d 03 	sts	0x033D, r24
    1c92:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    1c96:	80 93 3e 03 	sts	0x033E, r24
    1c9a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    1c9e:	80 93 3f 03 	sts	0x033F, r24
    1ca2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    1ca6:	80 93 40 03 	sts	0x0340, r24
    1caa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    1cae:	80 93 41 03 	sts	0x0341, r24
    1cb2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    1cb6:	80 93 42 03 	sts	0x0342, r24
    1cba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    1cbe:	80 93 43 03 	sts	0x0343, r24
    1cc2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    1cc6:	80 93 44 03 	sts	0x0344, r24
    1cca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    1cce:	80 93 45 03 	sts	0x0345, r24
    1cd2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    1cd6:	80 93 46 03 	sts	0x0346, r24
    1cda:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    1cde:	80 93 47 03 	sts	0x0347, r24
    1ce2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    1ce6:	80 93 48 03 	sts	0x0348, r24
    1cea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    1cee:	80 93 49 03 	sts	0x0349, r24
    1cf2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    1cf6:	80 93 4a 03 	sts	0x034A, r24
    1cfa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    1cfe:	80 93 4b 03 	sts	0x034B, r24
    1d02:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    1d06:	80 93 4c 03 	sts	0x034C, r24
    1d0a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    1d0e:	80 93 4d 03 	sts	0x034D, r24
    1d12:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    1d16:	80 93 4e 03 	sts	0x034E, r24
    1d1a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    1d1e:	80 93 4f 03 	sts	0x034F, r24
    1d22:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    1d26:	80 93 50 03 	sts	0x0350, r24
    1d2a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    1d2e:	80 93 51 03 	sts	0x0351, r24
    1d32:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    1d36:	80 93 52 03 	sts	0x0352, r24
    1d3a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    1d3e:	80 93 53 03 	sts	0x0353, r24
    1d42:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    1d46:	80 93 54 03 	sts	0x0354, r24
    1d4a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    1d4e:	80 93 55 03 	sts	0x0355, r24
    1d52:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    1d56:	80 93 56 03 	sts	0x0356, r24
    1d5a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    1d5e:	80 93 57 03 	sts	0x0357, r24
    1d62:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    1d66:	80 93 58 03 	sts	0x0358, r24
    1d6a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    1d6e:	80 93 59 03 	sts	0x0359, r24
    1d72:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    1d76:	80 93 5a 03 	sts	0x035A, r24
    1d7a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    1d7e:	80 93 5b 03 	sts	0x035B, r24
    1d82:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    1d86:	80 93 5c 03 	sts	0x035C, r24
    1d8a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    1d8e:	80 93 5d 03 	sts	0x035D, r24
    1d92:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    1d96:	80 93 5e 03 	sts	0x035E, r24
    1d9a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    1d9e:	80 93 5f 03 	sts	0x035F, r24
    1da2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    1da6:	80 93 60 03 	sts	0x0360, r24
    1daa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    1dae:	80 93 61 03 	sts	0x0361, r24
    1db2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    1db6:	80 93 62 03 	sts	0x0362, r24
    1dba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    1dbe:	80 93 63 03 	sts	0x0363, r24
    1dc2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    1dc6:	80 93 64 03 	sts	0x0364, r24
    1dca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    1dce:	80 93 65 03 	sts	0x0365, r24
    1dd2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    1dd6:	80 93 66 03 	sts	0x0366, r24
    1dda:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    1dde:	80 93 67 03 	sts	0x0367, r24
    1de2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    1de6:	80 93 68 03 	sts	0x0368, r24
    1dea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    1dee:	80 93 69 03 	sts	0x0369, r24
    1df2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    1df6:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    1dfa:	80 91 e8 00 	lds	r24, 0x00E8
    1dfe:	8b 77       	andi	r24, 0x7B	; 123
    1e00:	80 93 e8 00 	sts	0x00E8, r24
static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
    1e04:	98 8b       	std	Y+16, r25	; 0x10
    1e06:	1f 86       	std	Y+15, r1	; 0x0f
    1e08:	30 e0       	ldi	r19, 0x00	; 0
    1e0a:	af 85       	ldd	r26, Y+15	; 0x0f
    1e0c:	b8 89       	ldd	r27, Y+16	; 0x10
    1e0e:	2a 2b       	or	r18, r26
    1e10:	3b 2b       	or	r19, r27
    1e12:	30 93 6d 03 	sts	0x036D, r19
    1e16:	20 93 6c 03 	sts	0x036C, r18
		_rx_buffer_ix = 2;
    1e1a:	e0 92 e8 02 	sts	0x02E8, r14
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    1e1e:	21 15       	cp	r18, r1
    1e20:	31 05       	cpc	r19, r1
    1e22:	11 f0       	breq	.+4      	; 0x1e28 <main+0x82c>
    1e24:	0c 94 ee 1a 	jmp	0x35dc	; 0x35dc <__stack+0x14dd>
    1e28:	22 24       	eor	r2, r2
    1e2a:	2a 94       	dec	r2
    1e2c:	32 2c       	mov	r3, r2
				break;
    1e2e:	40 cc       	rjmp	.-1920   	; 0x16b0 <main+0xb4>
}

static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
    1e30:	21 15       	cp	r18, r1
    1e32:	31 05       	cpc	r19, r1
    1e34:	11 f0       	breq	.+4      	; 0x1e3a <main+0x83e>
    1e36:	0c 94 61 18 	jmp	0x30c2	; 0x30c2 <__stack+0xfc3>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    1e3a:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    1e3e:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    1e42:	82 fd       	sbrc	r24, 2
    1e44:	0a c0       	rjmp	.+20     	; 0x1e5a <main+0x85e>
    1e46:	09 89       	ldd	r16, Y+17	; 0x11
    1e48:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    1e4a:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    1e4e:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    1e52:	82 ff       	sbrs	r24, 2
    1e54:	fa cf       	rjmp	.-12     	; 0x1e4a <main+0x84e>
    1e56:	1a 8b       	std	Y+18, r17	; 0x12
    1e58:	09 8b       	std	Y+17, r16	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    1e5a:	90 91 f1 00 	lds	r25, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    1e5e:	90 93 2b 03 	sts	0x032B, r25
    1e62:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    1e66:	20 93 2c 03 	sts	0x032C, r18
    1e6a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    1e6e:	80 93 2d 03 	sts	0x032D, r24
    1e72:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    1e76:	80 93 2e 03 	sts	0x032E, r24
    1e7a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    1e7e:	80 93 2f 03 	sts	0x032F, r24
    1e82:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    1e86:	80 93 30 03 	sts	0x0330, r24
    1e8a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    1e8e:	80 93 31 03 	sts	0x0331, r24
    1e92:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    1e96:	80 93 32 03 	sts	0x0332, r24
    1e9a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    1e9e:	80 93 33 03 	sts	0x0333, r24
    1ea2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    1ea6:	80 93 34 03 	sts	0x0334, r24
    1eaa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    1eae:	80 93 35 03 	sts	0x0335, r24
    1eb2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    1eb6:	80 93 36 03 	sts	0x0336, r24
    1eba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    1ebe:	80 93 37 03 	sts	0x0337, r24
    1ec2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    1ec6:	80 93 38 03 	sts	0x0338, r24
    1eca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    1ece:	80 93 39 03 	sts	0x0339, r24
    1ed2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    1ed6:	80 93 3a 03 	sts	0x033A, r24
    1eda:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    1ede:	80 93 3b 03 	sts	0x033B, r24
    1ee2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    1ee6:	80 93 3c 03 	sts	0x033C, r24
    1eea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    1eee:	80 93 3d 03 	sts	0x033D, r24
    1ef2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    1ef6:	80 93 3e 03 	sts	0x033E, r24
    1efa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    1efe:	80 93 3f 03 	sts	0x033F, r24
    1f02:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    1f06:	80 93 40 03 	sts	0x0340, r24
    1f0a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    1f0e:	80 93 41 03 	sts	0x0341, r24
    1f12:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    1f16:	80 93 42 03 	sts	0x0342, r24
    1f1a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    1f1e:	80 93 43 03 	sts	0x0343, r24
    1f22:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    1f26:	80 93 44 03 	sts	0x0344, r24
    1f2a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    1f2e:	80 93 45 03 	sts	0x0345, r24
    1f32:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    1f36:	80 93 46 03 	sts	0x0346, r24
    1f3a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    1f3e:	80 93 47 03 	sts	0x0347, r24
    1f42:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    1f46:	80 93 48 03 	sts	0x0348, r24
    1f4a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    1f4e:	80 93 49 03 	sts	0x0349, r24
    1f52:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    1f56:	80 93 4a 03 	sts	0x034A, r24
    1f5a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    1f5e:	80 93 4b 03 	sts	0x034B, r24
    1f62:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    1f66:	80 93 4c 03 	sts	0x034C, r24
    1f6a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    1f6e:	80 93 4d 03 	sts	0x034D, r24
    1f72:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    1f76:	80 93 4e 03 	sts	0x034E, r24
    1f7a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    1f7e:	80 93 4f 03 	sts	0x034F, r24
    1f82:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    1f86:	80 93 50 03 	sts	0x0350, r24
    1f8a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    1f8e:	80 93 51 03 	sts	0x0351, r24
    1f92:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    1f96:	80 93 52 03 	sts	0x0352, r24
    1f9a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    1f9e:	80 93 53 03 	sts	0x0353, r24
    1fa2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    1fa6:	80 93 54 03 	sts	0x0354, r24
    1faa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    1fae:	80 93 55 03 	sts	0x0355, r24
    1fb2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    1fb6:	80 93 56 03 	sts	0x0356, r24
    1fba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    1fbe:	80 93 57 03 	sts	0x0357, r24
    1fc2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    1fc6:	80 93 58 03 	sts	0x0358, r24
    1fca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    1fce:	80 93 59 03 	sts	0x0359, r24
    1fd2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    1fd6:	80 93 5a 03 	sts	0x035A, r24
    1fda:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    1fde:	80 93 5b 03 	sts	0x035B, r24
    1fe2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    1fe6:	80 93 5c 03 	sts	0x035C, r24
    1fea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    1fee:	80 93 5d 03 	sts	0x035D, r24
    1ff2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    1ff6:	80 93 5e 03 	sts	0x035E, r24
    1ffa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    1ffe:	80 93 5f 03 	sts	0x035F, r24
    2002:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    2006:	80 93 60 03 	sts	0x0360, r24
    200a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    200e:	80 93 61 03 	sts	0x0361, r24
    2012:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    2016:	80 93 62 03 	sts	0x0362, r24
    201a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    201e:	80 93 63 03 	sts	0x0363, r24
    2022:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    2026:	80 93 64 03 	sts	0x0364, r24
    202a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    202e:	80 93 65 03 	sts	0x0365, r24
    2032:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    2036:	80 93 66 03 	sts	0x0366, r24
    203a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    203e:	80 93 67 03 	sts	0x0367, r24
    2042:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    2046:	80 93 68 03 	sts	0x0368, r24
    204a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    204e:	80 93 69 03 	sts	0x0369, r24
    2052:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    2056:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    205a:	80 91 e8 00 	lds	r24, 0x00E8
    205e:	8b 77       	andi	r24, 0x7B	; 123
    2060:	80 93 e8 00 	sts	0x00E8, r24
static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
    2064:	9c 87       	std	Y+12, r25	; 0x0c
    2066:	1b 86       	std	Y+11, r1	; 0x0b
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	ab 84       	ldd	r10, Y+11	; 0x0b
    206c:	bc 84       	ldd	r11, Y+12	; 0x0c
    206e:	2a 29       	or	r18, r10
    2070:	3b 29       	or	r19, r11
    2072:	30 93 6d 03 	sts	0x036D, r19
    2076:	20 93 6c 03 	sts	0x036C, r18
		_rx_buffer_ix = 2;
    207a:	e0 92 e8 02 	sts	0x02E8, r14
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    207e:	21 15       	cp	r18, r1
    2080:	31 05       	cpc	r19, r1
    2082:	11 f0       	breq	.+4      	; 0x2088 <main+0xa8c>
    2084:	0c 94 53 1e 	jmp	0x3ca6	; 0x3ca6 <__stack+0x1ba7>
    2088:	cc 24       	eor	r12, r12
    208a:	ca 94       	dec	r12
					break;
				}				
				break;
			case CMD_NAND_ID_SET:
				nand_id = usbio_get_byte();
				break;
    208c:	11 cb       	rjmp	.-2526   	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_WRITE_BLOCK_UBM:
				nor_write_block(NOR_PRG_MODE_UBM);
				break;
			case CMD_NOR_WRITE_BLOCK_WBP:
				nor_write_block(NOR_PRG_MODE_WBP);
    208e:	82 e0       	ldi	r24, 0x02	; 2
    2090:	0e 94 44 32 	call	0x6488	; 0x6488 <nor_write_block>
				break;
    2094:	0d cb       	rjmp	.-2534   	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_ADDRESS_INCREMENT_DISABLE:
				nor_address_increment_set(0);
				break;
			case CMD_NOR_2ND_DIE_ENABLE:
				nor_2nd_die_offset(0x40); //A22=HIGH for Samsung K8Q2815
    2096:	80 e4       	ldi	r24, 0x40	; 64
    2098:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <nor_2nd_die_offset>
				break;
    209c:	09 cb       	rjmp	.-2542   	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_ADDRESS_INCREMENT_ENABLE:
				nor_address_increment_set(1);
				break;
			case CMD_NOR_ADDRESS_INCREMENT_DISABLE:
				nor_address_increment_set(0);
    209e:	80 e0       	ldi	r24, 0x00	; 0
    20a0:	0e 94 cd 2a 	call	0x559a	; 0x559a <nor_address_increment_set>
				break;
    20a4:	05 cb       	rjmp	.-2550   	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_ADDRESS_INCREMENT:
				nor_address_increment(1);
				break;
			case CMD_NOR_ADDRESS_INCREMENT_ENABLE:
				nor_address_increment_set(1);
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	0e 94 cd 2a 	call	0x559a	; 0x559a <nor_address_increment_set>
				break;
    20ac:	01 cb       	rjmp	.-2558   	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_ADDRESS_SET:
				nor_address_set(usbio_get_byte(), usbio_get_byte(), usbio_get_byte());
				break;
			case CMD_NOR_ADDRESS_INCREMENT:
				nor_address_increment(1);
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	0e 94 d3 2a 	call	0x55a6	; 0x55a6 <nor_address_increment>
				break;
    20b4:	fd ca       	rjmp	.-2566   	; 0x16b0 <main+0xb4>
}

static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
    20b6:	21 15       	cp	r18, r1
    20b8:	31 05       	cpc	r19, r1
    20ba:	09 f0       	breq	.+2      	; 0x20be <main+0xac2>
    20bc:	b3 c6       	rjmp	.+3430   	; 0x2e24 <__stack+0xd25>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    20be:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    20c2:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    20c6:	82 fd       	sbrc	r24, 2
    20c8:	0a c0       	rjmp	.+20     	; 0x20de <main+0xae2>
    20ca:	09 89       	ldd	r16, Y+17	; 0x11
    20cc:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    20ce:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    20d2:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    20d6:	82 ff       	sbrs	r24, 2
    20d8:	fa cf       	rjmp	.-12     	; 0x20ce <main+0xad2>
    20da:	1a 8b       	std	Y+18, r17	; 0x12
    20dc:	09 8b       	std	Y+17, r16	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    20de:	90 91 f1 00 	lds	r25, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    20e2:	90 93 2b 03 	sts	0x032B, r25
    20e6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    20ea:	20 93 2c 03 	sts	0x032C, r18
    20ee:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    20f2:	80 93 2d 03 	sts	0x032D, r24
    20f6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    20fa:	80 93 2e 03 	sts	0x032E, r24
    20fe:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    2102:	80 93 2f 03 	sts	0x032F, r24
    2106:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    210a:	80 93 30 03 	sts	0x0330, r24
    210e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    2112:	80 93 31 03 	sts	0x0331, r24
    2116:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    211a:	80 93 32 03 	sts	0x0332, r24
    211e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    2122:	80 93 33 03 	sts	0x0333, r24
    2126:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    212a:	80 93 34 03 	sts	0x0334, r24
    212e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    2132:	80 93 35 03 	sts	0x0335, r24
    2136:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    213a:	80 93 36 03 	sts	0x0336, r24
    213e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    2142:	80 93 37 03 	sts	0x0337, r24
    2146:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    214a:	80 93 38 03 	sts	0x0338, r24
    214e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    2152:	80 93 39 03 	sts	0x0339, r24
    2156:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    215a:	80 93 3a 03 	sts	0x033A, r24
    215e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    2162:	80 93 3b 03 	sts	0x033B, r24
    2166:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    216a:	80 93 3c 03 	sts	0x033C, r24
    216e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    2172:	80 93 3d 03 	sts	0x033D, r24
    2176:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    217a:	80 93 3e 03 	sts	0x033E, r24
    217e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    2182:	80 93 3f 03 	sts	0x033F, r24
    2186:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    218a:	80 93 40 03 	sts	0x0340, r24
    218e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    2192:	80 93 41 03 	sts	0x0341, r24
    2196:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    219a:	80 93 42 03 	sts	0x0342, r24
    219e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    21a2:	80 93 43 03 	sts	0x0343, r24
    21a6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    21aa:	80 93 44 03 	sts	0x0344, r24
    21ae:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    21b2:	80 93 45 03 	sts	0x0345, r24
    21b6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    21ba:	80 93 46 03 	sts	0x0346, r24
    21be:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    21c2:	80 93 47 03 	sts	0x0347, r24
    21c6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    21ca:	80 93 48 03 	sts	0x0348, r24
    21ce:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    21d2:	80 93 49 03 	sts	0x0349, r24
    21d6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    21da:	80 93 4a 03 	sts	0x034A, r24
    21de:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    21e2:	80 93 4b 03 	sts	0x034B, r24
    21e6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    21ea:	80 93 4c 03 	sts	0x034C, r24
    21ee:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    21f2:	80 93 4d 03 	sts	0x034D, r24
    21f6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    21fa:	80 93 4e 03 	sts	0x034E, r24
    21fe:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    2202:	80 93 4f 03 	sts	0x034F, r24
    2206:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    220a:	80 93 50 03 	sts	0x0350, r24
    220e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    2212:	80 93 51 03 	sts	0x0351, r24
    2216:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    221a:	80 93 52 03 	sts	0x0352, r24
    221e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    2222:	80 93 53 03 	sts	0x0353, r24
    2226:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    222a:	80 93 54 03 	sts	0x0354, r24
    222e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    2232:	80 93 55 03 	sts	0x0355, r24
    2236:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    223a:	80 93 56 03 	sts	0x0356, r24
    223e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    2242:	80 93 57 03 	sts	0x0357, r24
    2246:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    224a:	80 93 58 03 	sts	0x0358, r24
    224e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    2252:	80 93 59 03 	sts	0x0359, r24
    2256:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    225a:	80 93 5a 03 	sts	0x035A, r24
    225e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    2262:	80 93 5b 03 	sts	0x035B, r24
    2266:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    226a:	80 93 5c 03 	sts	0x035C, r24
    226e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    2272:	80 93 5d 03 	sts	0x035D, r24
    2276:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    227a:	80 93 5e 03 	sts	0x035E, r24
    227e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    2282:	80 93 5f 03 	sts	0x035F, r24
    2286:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    228a:	80 93 60 03 	sts	0x0360, r24
    228e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    2292:	80 93 61 03 	sts	0x0361, r24
    2296:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    229a:	80 93 62 03 	sts	0x0362, r24
    229e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    22a2:	80 93 63 03 	sts	0x0363, r24
    22a6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    22aa:	80 93 64 03 	sts	0x0364, r24
    22ae:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    22b2:	80 93 65 03 	sts	0x0365, r24
    22b6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    22ba:	80 93 66 03 	sts	0x0366, r24
    22be:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    22c2:	80 93 67 03 	sts	0x0367, r24
    22c6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    22ca:	80 93 68 03 	sts	0x0368, r24
    22ce:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    22d2:	80 93 69 03 	sts	0x0369, r24
    22d6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    22da:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    22de:	80 91 e8 00 	lds	r24, 0x00E8
    22e2:	8b 77       	andi	r24, 0x7B	; 123
    22e4:	80 93 e8 00 	sts	0x00E8, r24
static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
    22e8:	9e 83       	std	Y+6, r25	; 0x06
    22ea:	1d 82       	std	Y+5, r1	; 0x05
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4d 81       	ldd	r20, Y+5	; 0x05
    22f0:	5e 81       	ldd	r21, Y+6	; 0x06
    22f2:	24 2b       	or	r18, r20
    22f4:	35 2b       	or	r19, r21
    22f6:	30 93 6d 03 	sts	0x036D, r19
    22fa:	20 93 6c 03 	sts	0x036C, r18
		_rx_buffer_ix = 2;
    22fe:	e0 92 e8 02 	sts	0x02E8, r14
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    2302:	21 15       	cp	r18, r1
    2304:	31 05       	cpc	r19, r1
    2306:	11 f0       	breq	.+4      	; 0x230c <__stack+0x20d>
    2308:	0c 94 5e 1e 	jmp	0x3cbc	; 0x3cbc <__stack+0x1bbd>
				break;
			case CMD_NOR_ERASE_CHIP:
				nor_erase_chip();
				break;
			case CMD_NOR_ADDRESS_SET:
				nor_address_set(usbio_get_byte(), usbio_get_byte(), usbio_get_byte());
    230c:	1f ef       	ldi	r17, 0xFF	; 255
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    230e:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2312:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    2316:	82 fd       	sbrc	r24, 2
    2318:	0a c0       	rjmp	.+20     	; 0x232e <__stack+0x22f>
    231a:	a9 88       	ldd	r10, Y+17	; 0x11
    231c:	ba 88       	ldd	r11, Y+18	; 0x12
		USB_USBTask();
    231e:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    2322:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    2326:	82 ff       	sbrs	r24, 2
    2328:	fa cf       	rjmp	.-12     	; 0x231e <__stack+0x21f>
    232a:	ba 8a       	std	Y+18, r11	; 0x12
    232c:	a9 8a       	std	Y+17, r10	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    232e:	90 91 f1 00 	lds	r25, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    2332:	90 93 2b 03 	sts	0x032B, r25
    2336:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    233a:	20 93 2c 03 	sts	0x032C, r18
    233e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    2342:	80 93 2d 03 	sts	0x032D, r24
    2346:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    234a:	80 93 2e 03 	sts	0x032E, r24
    234e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    2352:	80 93 2f 03 	sts	0x032F, r24
    2356:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    235a:	80 93 30 03 	sts	0x0330, r24
    235e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    2362:	80 93 31 03 	sts	0x0331, r24
    2366:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    236a:	80 93 32 03 	sts	0x0332, r24
    236e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    2372:	80 93 33 03 	sts	0x0333, r24
    2376:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    237a:	80 93 34 03 	sts	0x0334, r24
    237e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    2382:	80 93 35 03 	sts	0x0335, r24
    2386:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    238a:	80 93 36 03 	sts	0x0336, r24
    238e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    2392:	80 93 37 03 	sts	0x0337, r24
    2396:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    239a:	80 93 38 03 	sts	0x0338, r24
    239e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    23a2:	80 93 39 03 	sts	0x0339, r24
    23a6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    23aa:	80 93 3a 03 	sts	0x033A, r24
    23ae:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    23b2:	80 93 3b 03 	sts	0x033B, r24
    23b6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    23ba:	80 93 3c 03 	sts	0x033C, r24
    23be:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    23c2:	80 93 3d 03 	sts	0x033D, r24
    23c6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    23ca:	80 93 3e 03 	sts	0x033E, r24
    23ce:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    23d2:	80 93 3f 03 	sts	0x033F, r24
    23d6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    23da:	80 93 40 03 	sts	0x0340, r24
    23de:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    23e2:	80 93 41 03 	sts	0x0341, r24
    23e6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    23ea:	80 93 42 03 	sts	0x0342, r24
    23ee:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    23f2:	80 93 43 03 	sts	0x0343, r24
    23f6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    23fa:	80 93 44 03 	sts	0x0344, r24
    23fe:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    2402:	80 93 45 03 	sts	0x0345, r24
    2406:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    240a:	80 93 46 03 	sts	0x0346, r24
    240e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    2412:	80 93 47 03 	sts	0x0347, r24
    2416:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    241a:	80 93 48 03 	sts	0x0348, r24
    241e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    2422:	80 93 49 03 	sts	0x0349, r24
    2426:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    242a:	80 93 4a 03 	sts	0x034A, r24
    242e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    2432:	80 93 4b 03 	sts	0x034B, r24
    2436:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    243a:	80 93 4c 03 	sts	0x034C, r24
    243e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    2442:	80 93 4d 03 	sts	0x034D, r24
    2446:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    244a:	80 93 4e 03 	sts	0x034E, r24
    244e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    2452:	80 93 4f 03 	sts	0x034F, r24
    2456:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    245a:	80 93 50 03 	sts	0x0350, r24
    245e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    2462:	80 93 51 03 	sts	0x0351, r24
    2466:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    246a:	80 93 52 03 	sts	0x0352, r24
    246e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    2472:	80 93 53 03 	sts	0x0353, r24
    2476:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    247a:	80 93 54 03 	sts	0x0354, r24
    247e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    2482:	80 93 55 03 	sts	0x0355, r24
    2486:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    248a:	80 93 56 03 	sts	0x0356, r24
    248e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    2492:	80 93 57 03 	sts	0x0357, r24
    2496:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    249a:	80 93 58 03 	sts	0x0358, r24
    249e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    24a2:	80 93 59 03 	sts	0x0359, r24
    24a6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    24aa:	80 93 5a 03 	sts	0x035A, r24
    24ae:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    24b2:	80 93 5b 03 	sts	0x035B, r24
    24b6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    24ba:	80 93 5c 03 	sts	0x035C, r24
    24be:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    24c2:	80 93 5d 03 	sts	0x035D, r24
    24c6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    24ca:	80 93 5e 03 	sts	0x035E, r24
    24ce:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    24d2:	80 93 5f 03 	sts	0x035F, r24
    24d6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    24da:	80 93 60 03 	sts	0x0360, r24
    24de:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    24e2:	80 93 61 03 	sts	0x0361, r24
    24e6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    24ea:	80 93 62 03 	sts	0x0362, r24
    24ee:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    24f2:	80 93 63 03 	sts	0x0363, r24
    24f6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    24fa:	80 93 64 03 	sts	0x0364, r24
    24fe:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    2502:	80 93 65 03 	sts	0x0365, r24
    2506:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    250a:	80 93 66 03 	sts	0x0366, r24
    250e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    2512:	80 93 67 03 	sts	0x0367, r24
    2516:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    251a:	80 93 68 03 	sts	0x0368, r24
    251e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    2522:	80 93 69 03 	sts	0x0369, r24
    2526:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    252a:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    252e:	80 91 e8 00 	lds	r24, 0x00E8
    2532:	8b 77       	andi	r24, 0x7B	; 123
    2534:	80 93 e8 00 	sts	0x00E8, r24
static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
    2538:	98 87       	std	Y+8, r25	; 0x08
    253a:	1f 82       	std	Y+7, r1	; 0x07
    253c:	30 e0       	ldi	r19, 0x00	; 0
    253e:	8f 81       	ldd	r24, Y+7	; 0x07
    2540:	98 85       	ldd	r25, Y+8	; 0x08
    2542:	28 2b       	or	r18, r24
    2544:	39 2b       	or	r19, r25
    2546:	30 93 6d 03 	sts	0x036D, r19
    254a:	20 93 6c 03 	sts	0x036C, r18
		_rx_buffer_ix = 2;
    254e:	e0 92 e8 02 	sts	0x02E8, r14
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    2552:	21 15       	cp	r18, r1
    2554:	31 05       	cpc	r19, r1
    2556:	11 f0       	breq	.+4      	; 0x255c <__stack+0x45d>
    2558:	0c 94 5a 1e 	jmp	0x3cb4	; 0x3cb4 <__stack+0x1bb5>
    255c:	0f ef       	ldi	r16, 0xFF	; 255
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    255e:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2562:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    2566:	82 fd       	sbrc	r24, 2
    2568:	0a c0       	rjmp	.+20     	; 0x257e <__stack+0x47f>
    256a:	a9 88       	ldd	r10, Y+17	; 0x11
    256c:	ba 88       	ldd	r11, Y+18	; 0x12
		USB_USBTask();
    256e:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    2572:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    2576:	82 ff       	sbrs	r24, 2
    2578:	fa cf       	rjmp	.-12     	; 0x256e <__stack+0x46f>
    257a:	ba 8a       	std	Y+18, r11	; 0x12
    257c:	a9 8a       	std	Y+17, r10	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    257e:	90 91 f1 00 	lds	r25, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    2582:	90 93 2b 03 	sts	0x032B, r25
    2586:	40 91 f1 00 	lds	r20, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    258a:	40 93 2c 03 	sts	0x032C, r20
    258e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    2592:	80 93 2d 03 	sts	0x032D, r24
    2596:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    259a:	80 93 2e 03 	sts	0x032E, r24
    259e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    25a2:	80 93 2f 03 	sts	0x032F, r24
    25a6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    25aa:	80 93 30 03 	sts	0x0330, r24
    25ae:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    25b2:	80 93 31 03 	sts	0x0331, r24
    25b6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    25ba:	80 93 32 03 	sts	0x0332, r24
    25be:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    25c2:	80 93 33 03 	sts	0x0333, r24
    25c6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    25ca:	80 93 34 03 	sts	0x0334, r24
    25ce:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    25d2:	80 93 35 03 	sts	0x0335, r24
    25d6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    25da:	80 93 36 03 	sts	0x0336, r24
    25de:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    25e2:	80 93 37 03 	sts	0x0337, r24
    25e6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    25ea:	80 93 38 03 	sts	0x0338, r24
    25ee:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    25f2:	80 93 39 03 	sts	0x0339, r24
    25f6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    25fa:	80 93 3a 03 	sts	0x033A, r24
    25fe:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    2602:	80 93 3b 03 	sts	0x033B, r24
    2606:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    260a:	80 93 3c 03 	sts	0x033C, r24
    260e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    2612:	80 93 3d 03 	sts	0x033D, r24
    2616:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    261a:	80 93 3e 03 	sts	0x033E, r24
    261e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    2622:	80 93 3f 03 	sts	0x033F, r24
    2626:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    262a:	80 93 40 03 	sts	0x0340, r24
    262e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    2632:	80 93 41 03 	sts	0x0341, r24
    2636:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    263a:	80 93 42 03 	sts	0x0342, r24
    263e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    2642:	80 93 43 03 	sts	0x0343, r24
    2646:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    264a:	80 93 44 03 	sts	0x0344, r24
    264e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    2652:	80 93 45 03 	sts	0x0345, r24
    2656:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    265a:	80 93 46 03 	sts	0x0346, r24
    265e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    2662:	80 93 47 03 	sts	0x0347, r24
    2666:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    266a:	80 93 48 03 	sts	0x0348, r24
    266e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    2672:	80 93 49 03 	sts	0x0349, r24
    2676:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    267a:	80 93 4a 03 	sts	0x034A, r24
    267e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    2682:	80 93 4b 03 	sts	0x034B, r24
    2686:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    268a:	80 93 4c 03 	sts	0x034C, r24
    268e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    2692:	80 93 4d 03 	sts	0x034D, r24
    2696:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    269a:	80 93 4e 03 	sts	0x034E, r24
    269e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    26a2:	80 93 4f 03 	sts	0x034F, r24
    26a6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    26aa:	80 93 50 03 	sts	0x0350, r24
    26ae:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    26b2:	80 93 51 03 	sts	0x0351, r24
    26b6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    26ba:	80 93 52 03 	sts	0x0352, r24
    26be:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    26c2:	80 93 53 03 	sts	0x0353, r24
    26c6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    26ca:	80 93 54 03 	sts	0x0354, r24
    26ce:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    26d2:	80 93 55 03 	sts	0x0355, r24
    26d6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    26da:	80 93 56 03 	sts	0x0356, r24
    26de:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    26e2:	80 93 57 03 	sts	0x0357, r24
    26e6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    26ea:	80 93 58 03 	sts	0x0358, r24
    26ee:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    26f2:	80 93 59 03 	sts	0x0359, r24
    26f6:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    26fa:	80 93 5a 03 	sts	0x035A, r24
    26fe:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    2702:	80 93 5b 03 	sts	0x035B, r24
    2706:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    270a:	80 93 5c 03 	sts	0x035C, r24
    270e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    2712:	80 93 5d 03 	sts	0x035D, r24
    2716:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    271a:	80 93 5e 03 	sts	0x035E, r24
    271e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    2722:	80 93 5f 03 	sts	0x035F, r24
    2726:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    272a:	80 93 60 03 	sts	0x0360, r24
    272e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    2732:	80 93 61 03 	sts	0x0361, r24
    2736:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    273a:	80 93 62 03 	sts	0x0362, r24
    273e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    2742:	80 93 63 03 	sts	0x0363, r24
    2746:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    274a:	80 93 64 03 	sts	0x0364, r24
    274e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    2752:	80 93 65 03 	sts	0x0365, r24
    2756:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    275a:	80 93 66 03 	sts	0x0366, r24
    275e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    2762:	80 93 67 03 	sts	0x0367, r24
    2766:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    276a:	80 93 68 03 	sts	0x0368, r24
    276e:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    2772:	80 93 69 03 	sts	0x0369, r24
    2776:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    277a:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    277e:	80 91 e8 00 	lds	r24, 0x00E8
    2782:	8b 77       	andi	r24, 0x7B	; 123
    2784:	80 93 e8 00 	sts	0x00E8, r24
static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
    2788:	9a 87       	std	Y+10, r25	; 0x0a
    278a:	19 86       	std	Y+9, r1	; 0x09
    278c:	50 e0       	ldi	r21, 0x00	; 0
    278e:	a9 85       	ldd	r26, Y+9	; 0x09
    2790:	ba 85       	ldd	r27, Y+10	; 0x0a
    2792:	4a 2b       	or	r20, r26
    2794:	5b 2b       	or	r21, r27
    2796:	50 93 6d 03 	sts	0x036D, r21
    279a:	40 93 6c 03 	sts	0x036C, r20
		_rx_buffer_ix = 2;
    279e:	e0 92 e8 02 	sts	0x02E8, r14
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    27a2:	41 15       	cp	r20, r1
    27a4:	51 05       	cpc	r21, r1
    27a6:	09 f0       	breq	.+2      	; 0x27aa <__stack+0x6ab>
    27a8:	cd c1       	rjmp	.+922    	; 0x2b44 <__stack+0xa45>
    27aa:	4f ef       	ldi	r20, 0xFF	; 255
    27ac:	81 2f       	mov	r24, r17
    27ae:	60 2f       	mov	r22, r16
    27b0:	0e 94 c3 2a 	call	0x5586	; 0x5586 <nor_address_set>
				break;
    27b4:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_ERASE_SECTOR:
				nor_erase_sector();
				break;
			case CMD_NOR_ERASE_CHIP:
				nor_erase_chip();
    27b8:	0e 94 75 2b 	call	0x56ea	; 0x56ea <nor_erase_chip>
				break;
    27bc:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_RESET:
				nor_reset();
				break;
			case CMD_NOR_ERASE_SECTOR:
				nor_erase_sector();
    27c0:	0e 94 31 2b 	call	0x5662	; 0x5662 <nor_erase_sector>
				break;
    27c4:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_ID:
				nor_id();
				break;
			case CMD_NOR_RESET:
				nor_reset();
    27c8:	0e 94 f1 2a 	call	0x55e2	; 0x55e2 <nor_reset>
				break;
    27cc:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_IO_RELEASE:
				nor_releaseports();
				break;
			case CMD_NOR_ID:
				nor_id();
    27d0:	0e 94 fa 2a 	call	0x55f4	; 0x55f4 <nor_id>
				break;
    27d4:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_IO_LOCK:
				nor_initports();
				break;
			case CMD_IO_RELEASE:
				nor_releaseports();
    27d8:	0e 94 ab 2a 	call	0x5556	; 0x5556 <nor_releaseports>
				break;
    27dc:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_SPEEDTEST_WRITE:
				speedtest_receive();
				break;
			case CMD_IO_LOCK:
				nor_initports();
    27e0:	0e 94 8b 2a 	call	0x5516	; 0x5516 <nor_initports>
				break;
    27e4:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_SPEEDTEST_READ:
				speedtest_send();
				break;
			case CMD_SPEEDTEST_WRITE:
				speedtest_receive();
    27e8:	0e 94 0d 09 	call	0x121a	; 0x121a <speedtest_receive>
				break;
    27ec:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_BOOTLOADER:
				bootloader();
				break;
			case CMD_SPEEDTEST_READ:
				speedtest_send();
    27f0:	0e 94 48 0a 	call	0x1490	; 0x1490 <speedtest_send>
				break;
    27f4:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
			case CMD_PING:
				usbio_set_byte(0x42, 0);
				usbio_set_byte(0xbd, 1);
				break;
			case CMD_BOOTLOADER:
				bootloader();
    27f8:	0e 94 d5 08 	call	0x11aa	; 0x11aa <bootloader>
				break;
    27fc:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    2800:	e0 91 ea 02 	lds	r30, 0x02EA
    2804:	ae 2f       	mov	r26, r30
    2806:	b0 e0       	ldi	r27, 0x00	; 0
    2808:	a5 51       	subi	r26, 0x15	; 21
    280a:	bd 4f       	sbci	r27, 0xFD	; 253
    280c:	f2 e4       	ldi	r31, 0x42	; 66
    280e:	fc 93       	st	X, r31
    2810:	ef 5f       	subi	r30, 0xFF	; 255
    2812:	f0 e0       	ldi	r31, 0x00	; 0
    2814:	e5 51       	subi	r30, 0x15	; 21
    2816:	fd 4f       	sbci	r31, 0xFD	; 253
    2818:	8d eb       	ldi	r24, 0xBD	; 189
    281a:	a8 2e       	mov	r10, r24
    281c:	a0 82       	st	Z, r10
	
	if (transmit) {
		_tx_buffer_ix = 0;
    281e:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2822:	bb 24       	eor	r11, r11
    2824:	b3 94       	inc	r11
    2826:	b0 92 e9 00 	sts	0x00E9, r11
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    282a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    282e:	80 fd       	sbrc	r24, 0
    2830:	0a c0       	rjmp	.+20     	; 0x2846 <__stack+0x747>
    2832:	09 89       	ldd	r16, Y+17	; 0x11
    2834:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    2836:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    283a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    283e:	80 ff       	sbrs	r24, 0
    2840:	fa cf       	rjmp	.-12     	; 0x2836 <__stack+0x737>
    2842:	1a 8b       	std	Y+18, r17	; 0x12
    2844:	09 8b       	std	Y+17, r16	; 0x11
		USB_USBTask();

	Endpoint_Write_8(_tx_buffer[0]);
    2846:	80 91 eb 02 	lds	r24, 0x02EB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    284a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[1]);
    284e:	80 91 ec 02 	lds	r24, 0x02EC
    2852:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[2]);
    2856:	80 91 ed 02 	lds	r24, 0x02ED
    285a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[3]);
    285e:	80 91 ee 02 	lds	r24, 0x02EE
    2862:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[4]);
    2866:	80 91 ef 02 	lds	r24, 0x02EF
    286a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[5]);
    286e:	80 91 f0 02 	lds	r24, 0x02F0
    2872:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[6]);
    2876:	80 91 f1 02 	lds	r24, 0x02F1
    287a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[7]);
    287e:	80 91 f2 02 	lds	r24, 0x02F2
    2882:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[8]);
    2886:	80 91 f3 02 	lds	r24, 0x02F3
    288a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[9]);
    288e:	80 91 f4 02 	lds	r24, 0x02F4
    2892:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[10]);
    2896:	80 91 f5 02 	lds	r24, 0x02F5
    289a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[11]);
    289e:	80 91 f6 02 	lds	r24, 0x02F6
    28a2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[12]);
    28a6:	80 91 f7 02 	lds	r24, 0x02F7
    28aa:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[13]);
    28ae:	80 91 f8 02 	lds	r24, 0x02F8
    28b2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[14]);
    28b6:	80 91 f9 02 	lds	r24, 0x02F9
    28ba:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[15]);
    28be:	80 91 fa 02 	lds	r24, 0x02FA
    28c2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[16]);
    28c6:	80 91 fb 02 	lds	r24, 0x02FB
    28ca:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[17]);
    28ce:	80 91 fc 02 	lds	r24, 0x02FC
    28d2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[18]);
    28d6:	80 91 fd 02 	lds	r24, 0x02FD
    28da:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[19]);
    28de:	80 91 fe 02 	lds	r24, 0x02FE
    28e2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[20]);
    28e6:	80 91 ff 02 	lds	r24, 0x02FF
    28ea:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[21]);
    28ee:	80 91 00 03 	lds	r24, 0x0300
    28f2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[22]);
    28f6:	80 91 01 03 	lds	r24, 0x0301
    28fa:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[23]);
    28fe:	80 91 02 03 	lds	r24, 0x0302
    2902:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[24]);
    2906:	80 91 03 03 	lds	r24, 0x0303
    290a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[25]);
    290e:	80 91 04 03 	lds	r24, 0x0304
    2912:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[26]);
    2916:	80 91 05 03 	lds	r24, 0x0305
    291a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[27]);
    291e:	80 91 06 03 	lds	r24, 0x0306
    2922:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[28]);
    2926:	80 91 07 03 	lds	r24, 0x0307
    292a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[29]);
    292e:	80 91 08 03 	lds	r24, 0x0308
    2932:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[30]);
    2936:	80 91 09 03 	lds	r24, 0x0309
    293a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[31]);
    293e:	80 91 0a 03 	lds	r24, 0x030A
    2942:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[32]);
    2946:	80 91 0b 03 	lds	r24, 0x030B
    294a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[33]);
    294e:	80 91 0c 03 	lds	r24, 0x030C
    2952:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[34]);
    2956:	80 91 0d 03 	lds	r24, 0x030D
    295a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[35]);
    295e:	80 91 0e 03 	lds	r24, 0x030E
    2962:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[36]);
    2966:	80 91 0f 03 	lds	r24, 0x030F
    296a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[37]);
    296e:	80 91 10 03 	lds	r24, 0x0310
    2972:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[38]);
    2976:	80 91 11 03 	lds	r24, 0x0311
    297a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[39]);
    297e:	80 91 12 03 	lds	r24, 0x0312
    2982:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[40]);
    2986:	80 91 13 03 	lds	r24, 0x0313
    298a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[41]);
    298e:	80 91 14 03 	lds	r24, 0x0314
    2992:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[42]);
    2996:	80 91 15 03 	lds	r24, 0x0315
    299a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[43]);
    299e:	80 91 16 03 	lds	r24, 0x0316
    29a2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[44]);
    29a6:	80 91 17 03 	lds	r24, 0x0317
    29aa:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[45]);
    29ae:	80 91 18 03 	lds	r24, 0x0318
    29b2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[46]);
    29b6:	80 91 19 03 	lds	r24, 0x0319
    29ba:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[47]);
    29be:	80 91 1a 03 	lds	r24, 0x031A
    29c2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[48]);
    29c6:	80 91 1b 03 	lds	r24, 0x031B
    29ca:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[49]);
    29ce:	80 91 1c 03 	lds	r24, 0x031C
    29d2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[50]);
    29d6:	80 91 1d 03 	lds	r24, 0x031D
    29da:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[51]);
    29de:	80 91 1e 03 	lds	r24, 0x031E
    29e2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[52]);
    29e6:	80 91 1f 03 	lds	r24, 0x031F
    29ea:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[53]);
    29ee:	80 91 20 03 	lds	r24, 0x0320
    29f2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[54]);
    29f6:	80 91 21 03 	lds	r24, 0x0321
    29fa:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[55]);
    29fe:	80 91 22 03 	lds	r24, 0x0322
    2a02:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[56]);
    2a06:	80 91 23 03 	lds	r24, 0x0323
    2a0a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[57]);
    2a0e:	80 91 24 03 	lds	r24, 0x0324
    2a12:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[58]);
    2a16:	80 91 25 03 	lds	r24, 0x0325
    2a1a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[59]);
    2a1e:	80 91 26 03 	lds	r24, 0x0326
    2a22:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[60]);
    2a26:	80 91 27 03 	lds	r24, 0x0327
    2a2a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[61]);
    2a2e:	80 91 28 03 	lds	r24, 0x0328
    2a32:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[62]);
    2a36:	80 91 29 03 	lds	r24, 0x0329
    2a3a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[63]);
    2a3e:	80 91 2a 03 	lds	r24, 0x032A
    2a42:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2a46:	80 91 e8 00 	lds	r24, 0x00E8
    2a4a:	8e 77       	andi	r24, 0x7E	; 126
    2a4c:	80 93 e8 00 	sts	0x00E8, r24
    2a50:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_WRITE_WORD:
				nor_write_word();
				break;
			case CMD_NOR_WRITE_BLOCK_WORD:
				nor_write_block(NOR_PRG_MODE_WORD);
    2a54:	80 e0       	ldi	r24, 0x00	; 0
    2a56:	0e 94 44 32 	call	0x6488	; 0x6488 <nor_write_block>
				break;
    2a5a:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_READ_BLOCK_128KB:
				nor_read(NOR_BSS_128, 1);
				break;
			case CMD_NOR_WRITE_WORD:
				nor_write_word();
    2a5e:	0e 94 58 2d 	call	0x5ab0	; 0x5ab0 <nor_write_word>
				break;
    2a62:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_READ_BLOCK_64KB:
				nor_read(NOR_BSS_64, 1);
				break;
			case CMD_NOR_READ_BLOCK_128KB:
				nor_read(NOR_BSS_128, 1);
    2a66:	60 e0       	ldi	r22, 0x00	; 0
    2a68:	70 e0       	ldi	r23, 0x00	; 0
    2a6a:	82 e0       	ldi	r24, 0x02	; 2
    2a6c:	90 e0       	ldi	r25, 0x00	; 0
    2a6e:	41 e0       	ldi	r20, 0x01	; 1
    2a70:	0e 94 b3 2b 	call	0x5766	; 0x5766 <nor_read>
				break;
    2a74:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_READ_BLOCK_8KB:
				nor_read(NOR_BSS_8, 1);
				break;
			case CMD_NOR_READ_BLOCK_64KB:
				nor_read(NOR_BSS_64, 1);
    2a78:	60 e0       	ldi	r22, 0x00	; 0
    2a7a:	70 e0       	ldi	r23, 0x00	; 0
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	90 e0       	ldi	r25, 0x00	; 0
    2a80:	41 e0       	ldi	r20, 0x01	; 1
    2a82:	0e 94 b3 2b 	call	0x5766	; 0x5766 <nor_read>
				break;
    2a86:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_READ_BLOCK_4KB:
				nor_read(NOR_BSS_4, 1);
				break;
			case CMD_NOR_READ_BLOCK_8KB:
				nor_read(NOR_BSS_8, 1);
    2a8a:	60 e0       	ldi	r22, 0x00	; 0
    2a8c:	70 e2       	ldi	r23, 0x20	; 32
    2a8e:	80 e0       	ldi	r24, 0x00	; 0
    2a90:	90 e0       	ldi	r25, 0x00	; 0
    2a92:	41 e0       	ldi	r20, 0x01	; 1
    2a94:	0e 94 b3 2b 	call	0x5766	; 0x5766 <nor_read>
				break;
    2a98:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_READ_WORD:
				nor_read(NOR_BSS_WORD, 1);
				break;
			case CMD_NOR_READ_BLOCK_4KB:
				nor_read(NOR_BSS_4, 1);
    2a9c:	60 e0       	ldi	r22, 0x00	; 0
    2a9e:	70 e1       	ldi	r23, 0x10	; 16
    2aa0:	80 e0       	ldi	r24, 0x00	; 0
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	41 e0       	ldi	r20, 0x01	; 1
    2aa6:	0e 94 b3 2b 	call	0x5766	; 0x5766 <nor_read>
				break;
    2aaa:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_2ND_DIE_DISABLE:
				nor_2nd_die_offset(0x00); //A22=LOW for Samsung K8Q2815
				break;
			case CMD_NOR_READ_WORD:
				nor_read(NOR_BSS_WORD, 1);
    2aae:	62 e0       	ldi	r22, 0x02	; 2
    2ab0:	70 e0       	ldi	r23, 0x00	; 0
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	90 e0       	ldi	r25, 0x00	; 0
    2ab6:	41 e0       	ldi	r20, 0x01	; 1
    2ab8:	0e 94 b3 2b 	call	0x5766	; 0x5766 <nor_read>
				break;
    2abc:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_2ND_DIE_ENABLE:
				nor_2nd_die_offset(0x40); //A22=HIGH for Samsung K8Q2815
				break;
			case CMD_NOR_2ND_DIE_DISABLE:
				nor_2nd_die_offset(0x00); //A22=LOW for Samsung K8Q2815
    2ac0:	80 e0       	ldi	r24, 0x00	; 0
    2ac2:	0e 94 d0 2a 	call	0x55a0	; 0x55a0 <nor_2nd_die_offset>
				break;
    2ac6:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NOR_WRITE_BLOCK_WBP:
				nor_write_block(NOR_PRG_MODE_WBP);
				break;
			case CMD_NAND_ID:
				switch (nand_id) {
    2aca:	cc 20       	and	r12, r12
    2acc:	09 f0       	breq	.+2      	; 0x2ad0 <__stack+0x9d1>
    2ace:	72 c1       	rjmp	.+740    	; 0x2db4 <__stack+0xcb5>
				case 0:
					if (init_nand(&nand0) == 1) {
    2ad0:	80 e0       	ldi	r24, 0x00	; 0
    2ad2:	91 e0       	ldi	r25, 0x01	; 1
    2ad4:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <init_nand>
    2ad8:	61 30       	cpi	r22, 0x01	; 1
    2ada:	71 05       	cpc	r23, r1
    2adc:	81 05       	cpc	r24, r1
    2ade:	91 05       	cpc	r25, r1
    2ae0:	11 f4       	brne	.+4      	; 0x2ae6 <__stack+0x9e7>
    2ae2:	0c 94 66 1e 	jmp	0x3ccc	; 0x3ccc <__stack+0x1bcd>
    2ae6:	80 91 ea 02 	lds	r24, 0x02EA


//uint8_t buffer[2112];
//uint8_t block_status[1024];

int main(void)
    2aea:	98 2f       	mov	r25, r24
    2aec:	99 5e       	subi	r25, 0xE9	; 233
    2aee:	29 89       	ldd	r18, Y+17	; 0x11
    2af0:	3a 89       	ldd	r19, Y+18	; 0x12
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    2af2:	e8 2f       	mov	r30, r24
    2af4:	f0 e0       	ldi	r31, 0x00	; 0
    2af6:	e5 51       	subi	r30, 0x15	; 21
    2af8:	fd 4f       	sbci	r31, 0xFD	; 253
    2afa:	d0 82       	st	Z, r13
    2afc:	8f 5f       	subi	r24, 0xFF	; 255
						usbio_set_byte((nand0.info.plane_size >> 16) & 0xFF, 0);
						usbio_set_byte((nand0.info.plane_size >> 8) & 0xFF, 0);
						usbio_set_byte(nand0.info.plane_size & 0xFF, 1);
					}
					else {
						for (uint8_t i = 0; i < 23; ++i) {
    2afe:	89 17       	cp	r24, r25
    2b00:	c1 f7       	brne	.-16     	; 0x2af2 <__stack+0x9f3>
    2b02:	3a 8b       	std	Y+18, r19	; 0x12
    2b04:	29 8b       	std	Y+17, r18	; 0x11
    2b06:	e8 2f       	mov	r30, r24
    2b08:	f0 e0       	ldi	r31, 0x00	; 0
    2b0a:	e5 51       	subi	r30, 0x15	; 21
    2b0c:	fd 4f       	sbci	r31, 0xFD	; 253
    2b0e:	aa 24       	eor	r10, r10
    2b10:	aa 94       	dec	r10
    2b12:	a0 82       	st	Z, r10
	
	if (transmit) {
		_tx_buffer_ix = 0;
    2b14:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2b18:	bb 24       	eor	r11, r11
    2b1a:	b3 94       	inc	r11
    2b1c:	b0 92 e9 00 	sts	0x00E9, r11
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2b20:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    2b24:	80 fd       	sbrc	r24, 0
    2b26:	8f ce       	rjmp	.-738    	; 0x2846 <__stack+0x747>
    2b28:	09 89       	ldd	r16, Y+17	; 0x11
    2b2a:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    2b2c:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    2b30:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    2b34:	80 ff       	sbrs	r24, 0
    2b36:	fa cf       	rjmp	.-12     	; 0x2b2c <__stack+0xa2d>
    2b38:	84 ce       	rjmp	.-760    	; 0x2842 <__stack+0x743>
				break;
			case CMD_NOR_WRITE_BLOCK_WORD:
				nor_write_block(NOR_PRG_MODE_WORD);
				break;
			case CMD_NOR_WRITE_BLOCK_UBM:
				nor_write_block(NOR_PRG_MODE_UBM);
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	0e 94 44 32 	call	0x6488	; 0x6488 <nor_write_block>
				break;
    2b40:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    2b44:	90 91 e8 02 	lds	r25, 0x02E8
    2b48:	90 34       	cpi	r25, 0x40	; 64
    2b4a:	08 f0       	brcs	.+2      	; 0x2b4e <__stack+0xa4f>
    2b4c:	2e ce       	rjmp	.-932    	; 0x27aa <__stack+0x6ab>
		--_rx_buffer_size;
    2b4e:	41 50       	subi	r20, 0x01	; 1
    2b50:	50 40       	sbci	r21, 0x00	; 0
    2b52:	50 93 6d 03 	sts	0x036D, r21
    2b56:	40 93 6c 03 	sts	0x036C, r20
		++_rx_buffer_ix;
    2b5a:	9f 5f       	subi	r25, 0xFF	; 255
    2b5c:	90 93 e8 02 	sts	0x02E8, r25
		return _rx_buffer[_rx_buffer_ix - 1];
    2b60:	e9 2f       	mov	r30, r25
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	e6 5d       	subi	r30, 0xD6	; 214
    2b66:	fc 4f       	sbci	r31, 0xFC	; 252
    2b68:	40 81       	ld	r20, Z
    2b6a:	20 ce       	rjmp	.-960    	; 0x27ac <__stack+0x6ad>
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
    2b6c:	40 91 e8 02 	lds	r20, 0x02E8
    2b70:	40 34       	cpi	r20, 0x40	; 64
    2b72:	11 f0       	breq	.+4      	; 0x2b78 <__stack+0xa79>
    2b74:	0c 94 8d 0c 	jmp	0x191a	; 0x191a <main+0x31e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2b78:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2b7c:	20 91 e8 00 	lds	r18, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    2b80:	22 fd       	sbrc	r18, 2
    2b82:	0e c0       	rjmp	.+28     	; 0x2ba0 <__stack+0xaa1>
    2b84:	09 89       	ldd	r16, Y+17	; 0x11
    2b86:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    2b88:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    2b8c:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    2b90:	82 ff       	sbrs	r24, 2
    2b92:	fa cf       	rjmp	.-12     	; 0x2b88 <__stack+0xa89>
    2b94:	1a 8b       	std	Y+18, r17	; 0x12
    2b96:	09 8b       	std	Y+17, r16	; 0x11
    2b98:	80 91 6c 03 	lds	r24, 0x036C
    2b9c:	90 91 6d 03 	lds	r25, 0x036D
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2ba0:	20 91 f1 00 	lds	r18, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    2ba4:	20 93 2b 03 	sts	0x032B, r18
    2ba8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    2bac:	20 93 2c 03 	sts	0x032C, r18
    2bb0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    2bb4:	20 93 2d 03 	sts	0x032D, r18
    2bb8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    2bbc:	20 93 2e 03 	sts	0x032E, r18
    2bc0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    2bc4:	20 93 2f 03 	sts	0x032F, r18
    2bc8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    2bcc:	20 93 30 03 	sts	0x0330, r18
    2bd0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    2bd4:	20 93 31 03 	sts	0x0331, r18
    2bd8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    2bdc:	20 93 32 03 	sts	0x0332, r18
    2be0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    2be4:	20 93 33 03 	sts	0x0333, r18
    2be8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    2bec:	20 93 34 03 	sts	0x0334, r18
    2bf0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    2bf4:	20 93 35 03 	sts	0x0335, r18
    2bf8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    2bfc:	20 93 36 03 	sts	0x0336, r18
    2c00:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    2c04:	20 93 37 03 	sts	0x0337, r18
    2c08:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    2c0c:	20 93 38 03 	sts	0x0338, r18
    2c10:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    2c14:	20 93 39 03 	sts	0x0339, r18
    2c18:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    2c1c:	20 93 3a 03 	sts	0x033A, r18
    2c20:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    2c24:	20 93 3b 03 	sts	0x033B, r18
    2c28:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    2c2c:	20 93 3c 03 	sts	0x033C, r18
    2c30:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    2c34:	20 93 3d 03 	sts	0x033D, r18
    2c38:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    2c3c:	20 93 3e 03 	sts	0x033E, r18
    2c40:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    2c44:	20 93 3f 03 	sts	0x033F, r18
    2c48:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    2c4c:	20 93 40 03 	sts	0x0340, r18
    2c50:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    2c54:	20 93 41 03 	sts	0x0341, r18
    2c58:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    2c5c:	20 93 42 03 	sts	0x0342, r18
    2c60:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    2c64:	20 93 43 03 	sts	0x0343, r18
    2c68:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    2c6c:	20 93 44 03 	sts	0x0344, r18
    2c70:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    2c74:	20 93 45 03 	sts	0x0345, r18
    2c78:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    2c7c:	20 93 46 03 	sts	0x0346, r18
    2c80:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    2c84:	20 93 47 03 	sts	0x0347, r18
    2c88:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    2c8c:	20 93 48 03 	sts	0x0348, r18
    2c90:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    2c94:	20 93 49 03 	sts	0x0349, r18
    2c98:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    2c9c:	20 93 4a 03 	sts	0x034A, r18
    2ca0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    2ca4:	20 93 4b 03 	sts	0x034B, r18
    2ca8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    2cac:	20 93 4c 03 	sts	0x034C, r18
    2cb0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    2cb4:	20 93 4d 03 	sts	0x034D, r18
    2cb8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    2cbc:	20 93 4e 03 	sts	0x034E, r18
    2cc0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    2cc4:	20 93 4f 03 	sts	0x034F, r18
    2cc8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    2ccc:	20 93 50 03 	sts	0x0350, r18
    2cd0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    2cd4:	20 93 51 03 	sts	0x0351, r18
    2cd8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    2cdc:	20 93 52 03 	sts	0x0352, r18
    2ce0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    2ce4:	20 93 53 03 	sts	0x0353, r18
    2ce8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    2cec:	20 93 54 03 	sts	0x0354, r18
    2cf0:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    2cf4:	20 93 55 03 	sts	0x0355, r18
    2cf8:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    2cfc:	20 93 56 03 	sts	0x0356, r18
    2d00:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    2d04:	20 93 57 03 	sts	0x0357, r18
    2d08:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    2d0c:	20 93 58 03 	sts	0x0358, r18
    2d10:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    2d14:	20 93 59 03 	sts	0x0359, r18
    2d18:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    2d1c:	20 93 5a 03 	sts	0x035A, r18
    2d20:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    2d24:	20 93 5b 03 	sts	0x035B, r18
    2d28:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    2d2c:	20 93 5c 03 	sts	0x035C, r18
    2d30:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    2d34:	20 93 5d 03 	sts	0x035D, r18
    2d38:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    2d3c:	20 93 5e 03 	sts	0x035E, r18
    2d40:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    2d44:	20 93 5f 03 	sts	0x035F, r18
    2d48:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    2d4c:	20 93 60 03 	sts	0x0360, r18
    2d50:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    2d54:	20 93 61 03 	sts	0x0361, r18
    2d58:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    2d5c:	20 93 62 03 	sts	0x0362, r18
    2d60:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    2d64:	20 93 63 03 	sts	0x0363, r18
    2d68:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    2d6c:	20 93 64 03 	sts	0x0364, r18
    2d70:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    2d74:	20 93 65 03 	sts	0x0365, r18
    2d78:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    2d7c:	20 93 66 03 	sts	0x0366, r18
    2d80:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    2d84:	20 93 67 03 	sts	0x0367, r18
    2d88:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    2d8c:	20 93 68 03 	sts	0x0368, r18
    2d90:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    2d94:	20 93 69 03 	sts	0x0369, r18
    2d98:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    2d9c:	20 93 6a 03 	sts	0x036A, r18
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    2da0:	20 91 e8 00 	lds	r18, 0x00E8
    2da4:	2b 77       	andi	r18, 0x7B	; 123
    2da6:	20 93 e8 00 	sts	0x00E8, r18
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
    2daa:	10 92 e8 02 	sts	0x02E8, r1
    2dae:	9c 01       	movw	r18, r24
    2db0:	0c 94 87 0c 	jmp	0x190e	; 0x190e <main+0x312>
			case CMD_NOR_WRITE_BLOCK_WBP:
				nor_write_block(NOR_PRG_MODE_WBP);
				break;
			case CMD_NAND_ID:
				switch (nand_id) {
    2db4:	bc 2d       	mov	r27, r12
    2db6:	b1 30       	cpi	r27, 0x01	; 1
    2db8:	11 f0       	breq	.+4      	; 0x2dbe <__stack+0xcbf>
    2dba:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
						}
						usbio_set_byte(0xFF, 1);
					}
					break;
				case 1:
					if (init_nand(&nand1) == 1) {
    2dbe:	87 e5       	ldi	r24, 0x57	; 87
    2dc0:	91 e0       	ldi	r25, 0x01	; 1
    2dc2:	0e 94 6b 0a 	call	0x14d6	; 0x14d6 <init_nand>
    2dc6:	61 30       	cpi	r22, 0x01	; 1
    2dc8:	71 05       	cpc	r23, r1
    2dca:	81 05       	cpc	r24, r1
    2dcc:	91 05       	cpc	r25, r1
    2dce:	11 f4       	brne	.+4      	; 0x2dd4 <__stack+0xcd5>
    2dd0:	0c 94 b3 1f 	jmp	0x3f66	; 0x3f66 <__stack+0x1e67>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    2dd4:	80 91 ea 02 	lds	r24, 0x02EA


//uint8_t buffer[2112];
//uint8_t block_status[1024];

int main(void)
    2dd8:	98 2f       	mov	r25, r24
    2dda:	99 5e       	subi	r25, 0xE9	; 233
    2ddc:	29 89       	ldd	r18, Y+17	; 0x11
    2dde:	3a 89       	ldd	r19, Y+18	; 0x12
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    2de0:	e8 2f       	mov	r30, r24
    2de2:	f0 e0       	ldi	r31, 0x00	; 0
    2de4:	e5 51       	subi	r30, 0x15	; 21
    2de6:	fd 4f       	sbci	r31, 0xFD	; 253
    2de8:	d0 82       	st	Z, r13
    2dea:	8f 5f       	subi	r24, 0xFF	; 255
						usbio_set_byte((nand1.info.plane_size >> 16) & 0xFF, 0);
						usbio_set_byte((nand1.info.plane_size >> 8) & 0xFF, 0);
						usbio_set_byte(nand1.info.plane_size & 0xFF, 1);
					}
					else {
						for (uint8_t i = 0; i < 23; ++i) {
    2dec:	89 17       	cp	r24, r25
    2dee:	c1 f7       	brne	.-16     	; 0x2de0 <__stack+0xce1>
    2df0:	3a 8b       	std	Y+18, r19	; 0x12
    2df2:	29 8b       	std	Y+17, r18	; 0x11
    2df4:	e8 2f       	mov	r30, r24
    2df6:	f0 e0       	ldi	r31, 0x00	; 0
    2df8:	e5 51       	subi	r30, 0x15	; 21
    2dfa:	fd 4f       	sbci	r31, 0xFD	; 253
    2dfc:	bf ef       	ldi	r27, 0xFF	; 255
    2dfe:	b0 83       	st	Z, r27
	
	if (transmit) {
		_tx_buffer_ix = 0;
    2e00:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2e04:	e1 e0       	ldi	r30, 0x01	; 1
    2e06:	e0 93 e9 00 	sts	0x00E9, r30
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    2e0a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    2e0e:	80 fd       	sbrc	r24, 0
    2e10:	1a cd       	rjmp	.-1484   	; 0x2846 <__stack+0x747>
    2e12:	09 89       	ldd	r16, Y+17	; 0x11
    2e14:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    2e16:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    2e1a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    2e1e:	80 ff       	sbrs	r24, 0
    2e20:	fa cf       	rjmp	.-12     	; 0x2e16 <__stack+0xd17>
    2e22:	0f cd       	rjmp	.-1506   	; 0x2842 <__stack+0x743>
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
    2e24:	80 34       	cpi	r24, 0x40	; 64
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <__stack+0xd2b>
    2e28:	bc c2       	rjmp	.+1400   	; 0x33a2 <__stack+0x12a3>
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
		--_rx_buffer_size;
    2e2a:	21 50       	subi	r18, 0x01	; 1
    2e2c:	30 40       	sbci	r19, 0x00	; 0
    2e2e:	30 93 6d 03 	sts	0x036D, r19
    2e32:	20 93 6c 03 	sts	0x036C, r18
		++_rx_buffer_ix;
    2e36:	8f 5f       	subi	r24, 0xFF	; 255
    2e38:	80 93 e8 02 	sts	0x02E8, r24
		return _rx_buffer[_rx_buffer_ix - 1];
    2e3c:	e8 2f       	mov	r30, r24
    2e3e:	f0 e0       	ldi	r31, 0x00	; 0
    2e40:	e6 5d       	subi	r30, 0xD6	; 214
    2e42:	fc 4f       	sbci	r31, 0xFC	; 252
    2e44:	10 81       	ld	r17, Z
}

static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
    2e46:	21 15       	cp	r18, r1
    2e48:	31 05       	cpc	r19, r1
    2e4a:	09 f4       	brne	.+2      	; 0x2e4e <__stack+0xd4f>
    2e4c:	60 ca       	rjmp	.-2880   	; 0x230e <__stack+0x20f>
    2e4e:	98 2f       	mov	r25, r24
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
    2e50:	90 34       	cpi	r25, 0x40	; 64
    2e52:	09 f4       	brne	.+2      	; 0x2e56 <__stack+0xd57>
    2e54:	8a c1       	rjmp	.+788    	; 0x316a <__stack+0x106b>
    2e56:	a9 01       	movw	r20, r18
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    2e58:	90 34       	cpi	r25, 0x40	; 64
    2e5a:	08 f0       	brcs	.+2      	; 0x2e5e <__stack+0xd5f>
    2e5c:	84 c1       	rjmp	.+776    	; 0x3166 <__stack+0x1067>
		--_rx_buffer_size;
    2e5e:	a9 01       	movw	r20, r18
    2e60:	41 50       	subi	r20, 0x01	; 1
    2e62:	50 40       	sbci	r21, 0x00	; 0
    2e64:	50 93 6d 03 	sts	0x036D, r21
    2e68:	40 93 6c 03 	sts	0x036C, r20
		++_rx_buffer_ix;
    2e6c:	9f 5f       	subi	r25, 0xFF	; 255
    2e6e:	90 93 e8 02 	sts	0x02E8, r25
		return _rx_buffer[_rx_buffer_ix - 1];
    2e72:	e9 2f       	mov	r30, r25
    2e74:	f0 e0       	ldi	r31, 0x00	; 0
    2e76:	e6 5d       	subi	r30, 0xD6	; 214
    2e78:	fc 4f       	sbci	r31, 0xFC	; 252
    2e7a:	00 81       	ld	r16, Z
}

static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
    2e7c:	41 15       	cp	r20, r1
    2e7e:	51 05       	cpc	r21, r1
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <__stack+0xd85>
    2e82:	6d cb       	rjmp	.-2342   	; 0x255e <__stack+0x45f>
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
    2e84:	90 34       	cpi	r25, 0x40	; 64
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <__stack+0xd8b>
    2e88:	5f ce       	rjmp	.-834    	; 0x2b48 <__stack+0xa49>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    2e8a:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    2e8e:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    2e92:	82 fd       	sbrc	r24, 2
    2e94:	0a c0       	rjmp	.+20     	; 0x2eaa <__stack+0xdab>
    2e96:	a9 88       	ldd	r10, Y+17	; 0x11
    2e98:	ba 88       	ldd	r11, Y+18	; 0x12
		USB_USBTask();
    2e9a:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    2e9e:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    2ea2:	82 ff       	sbrs	r24, 2
    2ea4:	fa cf       	rjmp	.-12     	; 0x2e9a <__stack+0xd9b>
    2ea6:	ba 8a       	std	Y+18, r11	; 0x12
    2ea8:	a9 8a       	std	Y+17, r10	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    2eaa:	80 91 f1 00 	lds	r24, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    2eae:	80 93 2b 03 	sts	0x032B, r24
    2eb2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    2eb6:	80 93 2c 03 	sts	0x032C, r24
    2eba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    2ebe:	80 93 2d 03 	sts	0x032D, r24
    2ec2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    2ec6:	80 93 2e 03 	sts	0x032E, r24
    2eca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    2ece:	80 93 2f 03 	sts	0x032F, r24
    2ed2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    2ed6:	80 93 30 03 	sts	0x0330, r24
    2eda:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    2ede:	80 93 31 03 	sts	0x0331, r24
    2ee2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    2ee6:	80 93 32 03 	sts	0x0332, r24
    2eea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    2eee:	80 93 33 03 	sts	0x0333, r24
    2ef2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    2ef6:	80 93 34 03 	sts	0x0334, r24
    2efa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    2efe:	80 93 35 03 	sts	0x0335, r24
    2f02:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    2f06:	80 93 36 03 	sts	0x0336, r24
    2f0a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    2f0e:	80 93 37 03 	sts	0x0337, r24
    2f12:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    2f16:	80 93 38 03 	sts	0x0338, r24
    2f1a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    2f1e:	80 93 39 03 	sts	0x0339, r24
    2f22:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    2f26:	80 93 3a 03 	sts	0x033A, r24
    2f2a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    2f2e:	80 93 3b 03 	sts	0x033B, r24
    2f32:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    2f36:	80 93 3c 03 	sts	0x033C, r24
    2f3a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    2f3e:	80 93 3d 03 	sts	0x033D, r24
    2f42:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    2f46:	80 93 3e 03 	sts	0x033E, r24
    2f4a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    2f4e:	80 93 3f 03 	sts	0x033F, r24
    2f52:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    2f56:	80 93 40 03 	sts	0x0340, r24
    2f5a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    2f5e:	80 93 41 03 	sts	0x0341, r24
    2f62:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    2f66:	80 93 42 03 	sts	0x0342, r24
    2f6a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    2f6e:	80 93 43 03 	sts	0x0343, r24
    2f72:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    2f76:	80 93 44 03 	sts	0x0344, r24
    2f7a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    2f7e:	80 93 45 03 	sts	0x0345, r24
    2f82:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    2f86:	80 93 46 03 	sts	0x0346, r24
    2f8a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    2f8e:	80 93 47 03 	sts	0x0347, r24
    2f92:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    2f96:	80 93 48 03 	sts	0x0348, r24
    2f9a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    2f9e:	80 93 49 03 	sts	0x0349, r24
    2fa2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    2fa6:	80 93 4a 03 	sts	0x034A, r24
    2faa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    2fae:	80 93 4b 03 	sts	0x034B, r24
    2fb2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    2fb6:	80 93 4c 03 	sts	0x034C, r24
    2fba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    2fbe:	80 93 4d 03 	sts	0x034D, r24
    2fc2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    2fc6:	80 93 4e 03 	sts	0x034E, r24
    2fca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    2fce:	80 93 4f 03 	sts	0x034F, r24
    2fd2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    2fd6:	80 93 50 03 	sts	0x0350, r24
    2fda:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    2fde:	80 93 51 03 	sts	0x0351, r24
    2fe2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    2fe6:	80 93 52 03 	sts	0x0352, r24
    2fea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    2fee:	80 93 53 03 	sts	0x0353, r24
    2ff2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    2ff6:	80 93 54 03 	sts	0x0354, r24
    2ffa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    2ffe:	80 93 55 03 	sts	0x0355, r24
    3002:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    3006:	80 93 56 03 	sts	0x0356, r24
    300a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    300e:	80 93 57 03 	sts	0x0357, r24
    3012:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    3016:	80 93 58 03 	sts	0x0358, r24
    301a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    301e:	80 93 59 03 	sts	0x0359, r24
    3022:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    3026:	80 93 5a 03 	sts	0x035A, r24
    302a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    302e:	80 93 5b 03 	sts	0x035B, r24
    3032:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    3036:	80 93 5c 03 	sts	0x035C, r24
    303a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    303e:	80 93 5d 03 	sts	0x035D, r24
    3042:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    3046:	80 93 5e 03 	sts	0x035E, r24
    304a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    304e:	80 93 5f 03 	sts	0x035F, r24
    3052:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    3056:	80 93 60 03 	sts	0x0360, r24
    305a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    305e:	80 93 61 03 	sts	0x0361, r24
    3062:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    3066:	80 93 62 03 	sts	0x0362, r24
    306a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    306e:	80 93 63 03 	sts	0x0363, r24
    3072:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    3076:	80 93 64 03 	sts	0x0364, r24
    307a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    307e:	80 93 65 03 	sts	0x0365, r24
    3082:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    3086:	80 93 66 03 	sts	0x0366, r24
    308a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    308e:	80 93 67 03 	sts	0x0367, r24
    3092:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    3096:	80 93 68 03 	sts	0x0368, r24
    309a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    309e:	80 93 69 03 	sts	0x0369, r24
    30a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    30a6:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    30aa:	80 91 e8 00 	lds	r24, 0x00E8
    30ae:	8b 77       	andi	r24, 0x7B	; 123
    30b0:	80 93 e8 00 	sts	0x00E8, r24
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
    30b4:	10 92 e8 02 	sts	0x02E8, r1
    30b8:	40 91 6c 03 	lds	r20, 0x036C
    30bc:	50 91 6d 03 	lds	r21, 0x036D
    30c0:	70 cb       	rjmp	.-2336   	; 0x27a2 <__stack+0x6a3>
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
    30c2:	80 34       	cpi	r24, 0x40	; 64
    30c4:	09 f4       	brne	.+2      	; 0x30c8 <__stack+0xfc9>
    30c6:	8d c2       	rjmp	.+1306   	; 0x35e2 <__stack+0x14e3>
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
		--_rx_buffer_size;
    30c8:	21 50       	subi	r18, 0x01	; 1
    30ca:	30 40       	sbci	r19, 0x00	; 0
    30cc:	30 93 6d 03 	sts	0x036D, r19
    30d0:	20 93 6c 03 	sts	0x036C, r18
		++_rx_buffer_ix;
    30d4:	8f 5f       	subi	r24, 0xFF	; 255
    30d6:	80 93 e8 02 	sts	0x02E8, r24
		return _rx_buffer[_rx_buffer_ix - 1];
    30da:	e8 2f       	mov	r30, r24
    30dc:	f0 e0       	ldi	r31, 0x00	; 0
    30de:	e6 5d       	subi	r30, 0xD6	; 214
    30e0:	fc 4f       	sbci	r31, 0xFC	; 252
    30e2:	c0 80       	ld	r12, Z
    30e4:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
    30e8:	80 34       	cpi	r24, 0x40	; 64
    30ea:	09 f4       	brne	.+2      	; 0x30ee <__stack+0xfef>
    30ec:	bf c4       	rjmp	.+2430   	; 0x3a6c <__stack+0x196d>
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
		--_rx_buffer_size;
    30ee:	21 50       	subi	r18, 0x01	; 1
    30f0:	30 40       	sbci	r19, 0x00	; 0
    30f2:	30 93 6d 03 	sts	0x036D, r19
    30f6:	20 93 6c 03 	sts	0x036C, r18
		++_rx_buffer_ix;
    30fa:	8f 5f       	subi	r24, 0xFF	; 255
    30fc:	80 93 e8 02 	sts	0x02E8, r24
		return _rx_buffer[_rx_buffer_ix - 1];
    3100:	e8 2f       	mov	r30, r24
    3102:	f0 e0       	ldi	r31, 0x00	; 0
    3104:	e6 5d       	subi	r30, 0xD6	; 214
    3106:	fc 4f       	sbci	r31, 0xFC	; 252
				break;
			case CMD_NAND_ID_SET:
				nand_id = usbio_get_byte();
				break;
			case CMD_NAND_BLOCK_SET:
				nand_block = (usbio_get_byte() << 8) | usbio_get_byte();
    3108:	50 81       	ld	r21, Z
    310a:	5c 83       	std	Y+4, r21	; 0x04
    310c:	1b 82       	std	Y+3, r1	; 0x03
}

static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
    310e:	21 15       	cp	r18, r1
    3110:	31 05       	cpc	r19, r1
    3112:	11 f4       	brne	.+4      	; 0x3118 <__stack+0x1019>
    3114:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <main+0x5de>
    3118:	98 2f       	mov	r25, r24
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
    311a:	90 34       	cpi	r25, 0x40	; 64
    311c:	09 f4       	brne	.+2      	; 0x3120 <__stack+0x1021>
    311e:	89 c3       	rjmp	.+1810   	; 0x3832 <__stack+0x1733>
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    3120:	90 34       	cpi	r25, 0x40	; 64
    3122:	10 f0       	brcs	.+4      	; 0x3128 <__stack+0x1029>
    3124:	0c 94 14 0f 	jmp	0x1e28	; 0x1e28 <main+0x82c>
		--_rx_buffer_size;
    3128:	21 50       	subi	r18, 0x01	; 1
    312a:	30 40       	sbci	r19, 0x00	; 0
    312c:	30 93 6d 03 	sts	0x036D, r19
    3130:	20 93 6c 03 	sts	0x036C, r18
		++_rx_buffer_ix;
    3134:	9f 5f       	subi	r25, 0xFF	; 255
    3136:	90 93 e8 02 	sts	0x02E8, r25
		return _rx_buffer[_rx_buffer_ix - 1];
    313a:	e9 2f       	mov	r30, r25
    313c:	f0 e0       	ldi	r31, 0x00	; 0
    313e:	e6 5d       	subi	r30, 0xD6	; 214
    3140:	fc 4f       	sbci	r31, 0xFC	; 252
    3142:	20 80       	ld	r2, Z
    3144:	33 24       	eor	r3, r3
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
		--_rx_buffer_size;
		++_rx_buffer_ix;
    3146:	ab 80       	ldd	r10, Y+3	; 0x03
    3148:	bc 80       	ldd	r11, Y+4	; 0x04
    314a:	2a 28       	or	r2, r10
    314c:	3b 28       	or	r3, r11
    314e:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				break;
			case CMD_NAND_READ_BLOCK_RAW:
				switch (nand_id) {
    3152:	4c 2d       	mov	r20, r12
    3154:	41 30       	cpi	r20, 0x01	; 1
    3156:	11 f0       	breq	.+4      	; 0x315c <__stack+0x105d>
    3158:	0c 94 58 0b 	jmp	0x16b0	; 0x16b0 <main+0xb4>
				case 0:
					nand_read_block_raw(&nand0, nand_block);
					break;
				case 1:
					nand_read_block_raw(&nand1, nand_block);
    315c:	21 01       	movw	r4, r2
    315e:	87 e5       	ldi	r24, 0x57	; 87
    3160:	91 e0       	ldi	r25, 0x01	; 1
    3162:	0c 94 b3 0c 	jmp	0x1966	; 0x1966 <main+0x36a>
				break;
			case CMD_NOR_ERASE_CHIP:
				nor_erase_chip();
				break;
			case CMD_NOR_ADDRESS_SET:
				nor_address_set(usbio_get_byte(), usbio_get_byte(), usbio_get_byte());
    3166:	0f ef       	ldi	r16, 0xFF	; 255
    3168:	8d ce       	rjmp	.-742    	; 0x2e84 <__stack+0xd85>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    316a:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    316e:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    3172:	82 fd       	sbrc	r24, 2
    3174:	0a c0       	rjmp	.+20     	; 0x318a <__stack+0x108b>
    3176:	a9 88       	ldd	r10, Y+17	; 0x11
    3178:	ba 88       	ldd	r11, Y+18	; 0x12
		USB_USBTask();
    317a:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    317e:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    3182:	82 ff       	sbrs	r24, 2
    3184:	fa cf       	rjmp	.-12     	; 0x317a <__stack+0x107b>
    3186:	ba 8a       	std	Y+18, r11	; 0x12
    3188:	a9 8a       	std	Y+17, r10	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    318a:	80 91 f1 00 	lds	r24, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    318e:	80 93 2b 03 	sts	0x032B, r24
    3192:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    3196:	80 93 2c 03 	sts	0x032C, r24
    319a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    319e:	80 93 2d 03 	sts	0x032D, r24
    31a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    31a6:	80 93 2e 03 	sts	0x032E, r24
    31aa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    31ae:	80 93 2f 03 	sts	0x032F, r24
    31b2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    31b6:	80 93 30 03 	sts	0x0330, r24
    31ba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    31be:	80 93 31 03 	sts	0x0331, r24
    31c2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    31c6:	80 93 32 03 	sts	0x0332, r24
    31ca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    31ce:	80 93 33 03 	sts	0x0333, r24
    31d2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    31d6:	80 93 34 03 	sts	0x0334, r24
    31da:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    31de:	80 93 35 03 	sts	0x0335, r24
    31e2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    31e6:	80 93 36 03 	sts	0x0336, r24
    31ea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    31ee:	80 93 37 03 	sts	0x0337, r24
    31f2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    31f6:	80 93 38 03 	sts	0x0338, r24
    31fa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    31fe:	80 93 39 03 	sts	0x0339, r24
    3202:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    3206:	80 93 3a 03 	sts	0x033A, r24
    320a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    320e:	80 93 3b 03 	sts	0x033B, r24
    3212:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    3216:	80 93 3c 03 	sts	0x033C, r24
    321a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    321e:	80 93 3d 03 	sts	0x033D, r24
    3222:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    3226:	80 93 3e 03 	sts	0x033E, r24
    322a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    322e:	80 93 3f 03 	sts	0x033F, r24
    3232:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    3236:	80 93 40 03 	sts	0x0340, r24
    323a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    323e:	80 93 41 03 	sts	0x0341, r24
    3242:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    3246:	80 93 42 03 	sts	0x0342, r24
    324a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    324e:	80 93 43 03 	sts	0x0343, r24
    3252:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    3256:	80 93 44 03 	sts	0x0344, r24
    325a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    325e:	80 93 45 03 	sts	0x0345, r24
    3262:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    3266:	80 93 46 03 	sts	0x0346, r24
    326a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    326e:	80 93 47 03 	sts	0x0347, r24
    3272:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    3276:	80 93 48 03 	sts	0x0348, r24
    327a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    327e:	80 93 49 03 	sts	0x0349, r24
    3282:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    3286:	80 93 4a 03 	sts	0x034A, r24
    328a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    328e:	80 93 4b 03 	sts	0x034B, r24
    3292:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    3296:	80 93 4c 03 	sts	0x034C, r24
    329a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    329e:	80 93 4d 03 	sts	0x034D, r24
    32a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    32a6:	80 93 4e 03 	sts	0x034E, r24
    32aa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    32ae:	80 93 4f 03 	sts	0x034F, r24
    32b2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    32b6:	80 93 50 03 	sts	0x0350, r24
    32ba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    32be:	80 93 51 03 	sts	0x0351, r24
    32c2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    32c6:	80 93 52 03 	sts	0x0352, r24
    32ca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    32ce:	80 93 53 03 	sts	0x0353, r24
    32d2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    32d6:	80 93 54 03 	sts	0x0354, r24
    32da:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    32de:	80 93 55 03 	sts	0x0355, r24
    32e2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    32e6:	80 93 56 03 	sts	0x0356, r24
    32ea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    32ee:	80 93 57 03 	sts	0x0357, r24
    32f2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    32f6:	80 93 58 03 	sts	0x0358, r24
    32fa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    32fe:	80 93 59 03 	sts	0x0359, r24
    3302:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    3306:	80 93 5a 03 	sts	0x035A, r24
    330a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    330e:	80 93 5b 03 	sts	0x035B, r24
    3312:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    3316:	80 93 5c 03 	sts	0x035C, r24
    331a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    331e:	80 93 5d 03 	sts	0x035D, r24
    3322:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    3326:	80 93 5e 03 	sts	0x035E, r24
    332a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    332e:	80 93 5f 03 	sts	0x035F, r24
    3332:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    3336:	80 93 60 03 	sts	0x0360, r24
    333a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    333e:	80 93 61 03 	sts	0x0361, r24
    3342:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    3346:	80 93 62 03 	sts	0x0362, r24
    334a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    334e:	80 93 63 03 	sts	0x0363, r24
    3352:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    3356:	80 93 64 03 	sts	0x0364, r24
    335a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    335e:	80 93 65 03 	sts	0x0365, r24
    3362:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    3366:	80 93 66 03 	sts	0x0366, r24
    336a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    336e:	80 93 67 03 	sts	0x0367, r24
    3372:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    3376:	80 93 68 03 	sts	0x0368, r24
    337a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    337e:	80 93 69 03 	sts	0x0369, r24
    3382:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    3386:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    338a:	80 91 e8 00 	lds	r24, 0x00E8
    338e:	8b 77       	andi	r24, 0x7B	; 123
    3390:	80 93 e8 00 	sts	0x00E8, r24
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
    3394:	10 92 e8 02 	sts	0x02E8, r1
    3398:	20 91 6c 03 	lds	r18, 0x036C
    339c:	30 91 6d 03 	lds	r19, 0x036D
    33a0:	d8 c8       	rjmp	.-3664   	; 0x2552 <__stack+0x453>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    33a2:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    33a6:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    33aa:	82 fd       	sbrc	r24, 2
    33ac:	0a c0       	rjmp	.+20     	; 0x33c2 <__stack+0x12c3>
    33ae:	09 89       	ldd	r16, Y+17	; 0x11
    33b0:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    33b2:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    33b6:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    33ba:	82 ff       	sbrs	r24, 2
    33bc:	fa cf       	rjmp	.-12     	; 0x33b2 <__stack+0x12b3>
    33be:	1a 8b       	std	Y+18, r17	; 0x12
    33c0:	09 8b       	std	Y+17, r16	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    33c2:	80 91 f1 00 	lds	r24, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    33c6:	80 93 2b 03 	sts	0x032B, r24
    33ca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    33ce:	80 93 2c 03 	sts	0x032C, r24
    33d2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    33d6:	80 93 2d 03 	sts	0x032D, r24
    33da:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    33de:	80 93 2e 03 	sts	0x032E, r24
    33e2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    33e6:	80 93 2f 03 	sts	0x032F, r24
    33ea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    33ee:	80 93 30 03 	sts	0x0330, r24
    33f2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    33f6:	80 93 31 03 	sts	0x0331, r24
    33fa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    33fe:	80 93 32 03 	sts	0x0332, r24
    3402:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    3406:	80 93 33 03 	sts	0x0333, r24
    340a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    340e:	80 93 34 03 	sts	0x0334, r24
    3412:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    3416:	80 93 35 03 	sts	0x0335, r24
    341a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    341e:	80 93 36 03 	sts	0x0336, r24
    3422:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    3426:	80 93 37 03 	sts	0x0337, r24
    342a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    342e:	80 93 38 03 	sts	0x0338, r24
    3432:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    3436:	80 93 39 03 	sts	0x0339, r24
    343a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    343e:	80 93 3a 03 	sts	0x033A, r24
    3442:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    3446:	80 93 3b 03 	sts	0x033B, r24
    344a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    344e:	80 93 3c 03 	sts	0x033C, r24
    3452:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    3456:	80 93 3d 03 	sts	0x033D, r24
    345a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    345e:	80 93 3e 03 	sts	0x033E, r24
    3462:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    3466:	80 93 3f 03 	sts	0x033F, r24
    346a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    346e:	80 93 40 03 	sts	0x0340, r24
    3472:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    3476:	80 93 41 03 	sts	0x0341, r24
    347a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    347e:	80 93 42 03 	sts	0x0342, r24
    3482:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    3486:	80 93 43 03 	sts	0x0343, r24
    348a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    348e:	80 93 44 03 	sts	0x0344, r24
    3492:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    3496:	80 93 45 03 	sts	0x0345, r24
    349a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    349e:	80 93 46 03 	sts	0x0346, r24
    34a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    34a6:	80 93 47 03 	sts	0x0347, r24
    34aa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    34ae:	80 93 48 03 	sts	0x0348, r24
    34b2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    34b6:	80 93 49 03 	sts	0x0349, r24
    34ba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    34be:	80 93 4a 03 	sts	0x034A, r24
    34c2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    34c6:	80 93 4b 03 	sts	0x034B, r24
    34ca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    34ce:	80 93 4c 03 	sts	0x034C, r24
    34d2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    34d6:	80 93 4d 03 	sts	0x034D, r24
    34da:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    34de:	80 93 4e 03 	sts	0x034E, r24
    34e2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    34e6:	80 93 4f 03 	sts	0x034F, r24
    34ea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    34ee:	80 93 50 03 	sts	0x0350, r24
    34f2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    34f6:	80 93 51 03 	sts	0x0351, r24
    34fa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    34fe:	80 93 52 03 	sts	0x0352, r24
    3502:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    3506:	80 93 53 03 	sts	0x0353, r24
    350a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    350e:	80 93 54 03 	sts	0x0354, r24
    3512:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    3516:	80 93 55 03 	sts	0x0355, r24
    351a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    351e:	80 93 56 03 	sts	0x0356, r24
    3522:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    3526:	80 93 57 03 	sts	0x0357, r24
    352a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    352e:	80 93 58 03 	sts	0x0358, r24
    3532:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    3536:	80 93 59 03 	sts	0x0359, r24
    353a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    353e:	80 93 5a 03 	sts	0x035A, r24
    3542:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    3546:	80 93 5b 03 	sts	0x035B, r24
    354a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    354e:	80 93 5c 03 	sts	0x035C, r24
    3552:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    3556:	80 93 5d 03 	sts	0x035D, r24
    355a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    355e:	80 93 5e 03 	sts	0x035E, r24
    3562:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    3566:	80 93 5f 03 	sts	0x035F, r24
    356a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    356e:	80 93 60 03 	sts	0x0360, r24
    3572:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    3576:	80 93 61 03 	sts	0x0361, r24
    357a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    357e:	80 93 62 03 	sts	0x0362, r24
    3582:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    3586:	80 93 63 03 	sts	0x0363, r24
    358a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    358e:	80 93 64 03 	sts	0x0364, r24
    3592:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    3596:	80 93 65 03 	sts	0x0365, r24
    359a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    359e:	80 93 66 03 	sts	0x0366, r24
    35a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    35a6:	80 93 67 03 	sts	0x0367, r24
    35aa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    35ae:	80 93 68 03 	sts	0x0368, r24
    35b2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    35b6:	80 93 69 03 	sts	0x0369, r24
    35ba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    35be:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    35c2:	80 91 e8 00 	lds	r24, 0x00E8
    35c6:	8b 77       	andi	r24, 0x7B	; 123
    35c8:	80 93 e8 00 	sts	0x00E8, r24
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
    35cc:	10 92 e8 02 	sts	0x02E8, r1
    35d0:	20 91 6c 03 	lds	r18, 0x036C
    35d4:	30 91 6d 03 	lds	r19, 0x036D
    35d8:	0c 94 81 11 	jmp	0x2302	; 0x2302 <__stack+0x203>
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    35dc:	90 91 e8 02 	lds	r25, 0x02E8
    35e0:	9f cd       	rjmp	.-1218   	; 0x3120 <__stack+0x1021>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    35e2:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    35e6:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    35ea:	82 fd       	sbrc	r24, 2
    35ec:	0a c0       	rjmp	.+20     	; 0x3602 <__stack+0x1503>
    35ee:	09 89       	ldd	r16, Y+17	; 0x11
    35f0:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    35f2:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    35f6:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    35fa:	82 ff       	sbrs	r24, 2
    35fc:	fa cf       	rjmp	.-12     	; 0x35f2 <__stack+0x14f3>
    35fe:	1a 8b       	std	Y+18, r17	; 0x12
    3600:	09 8b       	std	Y+17, r16	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3602:	80 91 f1 00 	lds	r24, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    3606:	80 93 2b 03 	sts	0x032B, r24
    360a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    360e:	80 93 2c 03 	sts	0x032C, r24
    3612:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    3616:	80 93 2d 03 	sts	0x032D, r24
    361a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    361e:	80 93 2e 03 	sts	0x032E, r24
    3622:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    3626:	80 93 2f 03 	sts	0x032F, r24
    362a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    362e:	80 93 30 03 	sts	0x0330, r24
    3632:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    3636:	80 93 31 03 	sts	0x0331, r24
    363a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    363e:	80 93 32 03 	sts	0x0332, r24
    3642:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    3646:	80 93 33 03 	sts	0x0333, r24
    364a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    364e:	80 93 34 03 	sts	0x0334, r24
    3652:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    3656:	80 93 35 03 	sts	0x0335, r24
    365a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    365e:	80 93 36 03 	sts	0x0336, r24
    3662:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    3666:	80 93 37 03 	sts	0x0337, r24
    366a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    366e:	80 93 38 03 	sts	0x0338, r24
    3672:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    3676:	80 93 39 03 	sts	0x0339, r24
    367a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    367e:	80 93 3a 03 	sts	0x033A, r24
    3682:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    3686:	80 93 3b 03 	sts	0x033B, r24
    368a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    368e:	80 93 3c 03 	sts	0x033C, r24
    3692:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    3696:	80 93 3d 03 	sts	0x033D, r24
    369a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    369e:	80 93 3e 03 	sts	0x033E, r24
    36a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    36a6:	80 93 3f 03 	sts	0x033F, r24
    36aa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    36ae:	80 93 40 03 	sts	0x0340, r24
    36b2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    36b6:	80 93 41 03 	sts	0x0341, r24
    36ba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    36be:	80 93 42 03 	sts	0x0342, r24
    36c2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    36c6:	80 93 43 03 	sts	0x0343, r24
    36ca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    36ce:	80 93 44 03 	sts	0x0344, r24
    36d2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    36d6:	80 93 45 03 	sts	0x0345, r24
    36da:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    36de:	80 93 46 03 	sts	0x0346, r24
    36e2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    36e6:	80 93 47 03 	sts	0x0347, r24
    36ea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    36ee:	80 93 48 03 	sts	0x0348, r24
    36f2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    36f6:	80 93 49 03 	sts	0x0349, r24
    36fa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    36fe:	80 93 4a 03 	sts	0x034A, r24
    3702:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    3706:	80 93 4b 03 	sts	0x034B, r24
    370a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    370e:	80 93 4c 03 	sts	0x034C, r24
    3712:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    3716:	80 93 4d 03 	sts	0x034D, r24
    371a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    371e:	80 93 4e 03 	sts	0x034E, r24
    3722:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    3726:	80 93 4f 03 	sts	0x034F, r24
    372a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    372e:	80 93 50 03 	sts	0x0350, r24
    3732:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    3736:	80 93 51 03 	sts	0x0351, r24
    373a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    373e:	80 93 52 03 	sts	0x0352, r24
    3742:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    3746:	80 93 53 03 	sts	0x0353, r24
    374a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    374e:	80 93 54 03 	sts	0x0354, r24
    3752:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    3756:	80 93 55 03 	sts	0x0355, r24
    375a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    375e:	80 93 56 03 	sts	0x0356, r24
    3762:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    3766:	80 93 57 03 	sts	0x0357, r24
    376a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    376e:	80 93 58 03 	sts	0x0358, r24
    3772:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    3776:	80 93 59 03 	sts	0x0359, r24
    377a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    377e:	80 93 5a 03 	sts	0x035A, r24
    3782:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    3786:	80 93 5b 03 	sts	0x035B, r24
    378a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    378e:	80 93 5c 03 	sts	0x035C, r24
    3792:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    3796:	80 93 5d 03 	sts	0x035D, r24
    379a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    379e:	80 93 5e 03 	sts	0x035E, r24
    37a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    37a6:	80 93 5f 03 	sts	0x035F, r24
    37aa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    37ae:	80 93 60 03 	sts	0x0360, r24
    37b2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    37b6:	80 93 61 03 	sts	0x0361, r24
    37ba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    37be:	80 93 62 03 	sts	0x0362, r24
    37c2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    37c6:	80 93 63 03 	sts	0x0363, r24
    37ca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    37ce:	80 93 64 03 	sts	0x0364, r24
    37d2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    37d6:	80 93 65 03 	sts	0x0365, r24
    37da:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    37de:	80 93 66 03 	sts	0x0366, r24
    37e2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    37e6:	80 93 67 03 	sts	0x0367, r24
    37ea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    37ee:	80 93 68 03 	sts	0x0368, r24
    37f2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    37f6:	80 93 69 03 	sts	0x0369, r24
    37fa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    37fe:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3802:	80 91 e8 00 	lds	r24, 0x00E8
    3806:	8b 77       	andi	r24, 0x7B	; 123
    3808:	80 93 e8 00 	sts	0x00E8, r24
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
    380c:	10 92 e8 02 	sts	0x02E8, r1
    3810:	20 91 6c 03 	lds	r18, 0x036C
    3814:	30 91 6d 03 	lds	r19, 0x036D
    3818:	0c 94 3f 10 	jmp	0x207e	; 0x207e <main+0xa82>
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    381c:	90 91 e8 02 	lds	r25, 0x02E8
    3820:	89 2f       	mov	r24, r25
    3822:	90 34       	cpi	r25, 0x40	; 64
    3824:	08 f4       	brcc	.+2      	; 0x3828 <__stack+0x1729>
    3826:	63 cc       	rjmp	.-1850   	; 0x30ee <__stack+0xfef>
				break;
			case CMD_NAND_ID_SET:
				nand_id = usbio_get_byte();
				break;
			case CMD_NAND_BLOCK_SET:
				nand_block = (usbio_get_byte() << 8) | usbio_get_byte();
    3828:	e0 e0       	ldi	r30, 0x00	; 0
    382a:	ff ef       	ldi	r31, 0xFF	; 255
    382c:	fc 83       	std	Y+4, r31	; 0x04
    382e:	eb 83       	std	Y+3, r30	; 0x03
    3830:	74 cc       	rjmp	.-1816   	; 0x311a <__stack+0x101b>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3832:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3836:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    383a:	82 fd       	sbrc	r24, 2
    383c:	0a c0       	rjmp	.+20     	; 0x3852 <__stack+0x1753>
    383e:	09 89       	ldd	r16, Y+17	; 0x11
    3840:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    3842:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    3846:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    384a:	82 ff       	sbrs	r24, 2
    384c:	fa cf       	rjmp	.-12     	; 0x3842 <__stack+0x1743>
    384e:	1a 8b       	std	Y+18, r17	; 0x12
    3850:	09 8b       	std	Y+17, r16	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3852:	80 91 f1 00 	lds	r24, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    3856:	80 93 2b 03 	sts	0x032B, r24
    385a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    385e:	80 93 2c 03 	sts	0x032C, r24
    3862:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    3866:	80 93 2d 03 	sts	0x032D, r24
    386a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    386e:	80 93 2e 03 	sts	0x032E, r24
    3872:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    3876:	80 93 2f 03 	sts	0x032F, r24
    387a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    387e:	80 93 30 03 	sts	0x0330, r24
    3882:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    3886:	80 93 31 03 	sts	0x0331, r24
    388a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    388e:	80 93 32 03 	sts	0x0332, r24
    3892:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    3896:	80 93 33 03 	sts	0x0333, r24
    389a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    389e:	80 93 34 03 	sts	0x0334, r24
    38a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    38a6:	80 93 35 03 	sts	0x0335, r24
    38aa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    38ae:	80 93 36 03 	sts	0x0336, r24
    38b2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    38b6:	80 93 37 03 	sts	0x0337, r24
    38ba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    38be:	80 93 38 03 	sts	0x0338, r24
    38c2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    38c6:	80 93 39 03 	sts	0x0339, r24
    38ca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    38ce:	80 93 3a 03 	sts	0x033A, r24
    38d2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    38d6:	80 93 3b 03 	sts	0x033B, r24
    38da:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    38de:	80 93 3c 03 	sts	0x033C, r24
    38e2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    38e6:	80 93 3d 03 	sts	0x033D, r24
    38ea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    38ee:	80 93 3e 03 	sts	0x033E, r24
    38f2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    38f6:	80 93 3f 03 	sts	0x033F, r24
    38fa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    38fe:	80 93 40 03 	sts	0x0340, r24
    3902:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    3906:	80 93 41 03 	sts	0x0341, r24
    390a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    390e:	80 93 42 03 	sts	0x0342, r24
    3912:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    3916:	80 93 43 03 	sts	0x0343, r24
    391a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    391e:	80 93 44 03 	sts	0x0344, r24
    3922:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    3926:	80 93 45 03 	sts	0x0345, r24
    392a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    392e:	80 93 46 03 	sts	0x0346, r24
    3932:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    3936:	80 93 47 03 	sts	0x0347, r24
    393a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    393e:	80 93 48 03 	sts	0x0348, r24
    3942:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    3946:	80 93 49 03 	sts	0x0349, r24
    394a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    394e:	80 93 4a 03 	sts	0x034A, r24
    3952:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    3956:	80 93 4b 03 	sts	0x034B, r24
    395a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    395e:	80 93 4c 03 	sts	0x034C, r24
    3962:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    3966:	80 93 4d 03 	sts	0x034D, r24
    396a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    396e:	80 93 4e 03 	sts	0x034E, r24
    3972:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    3976:	80 93 4f 03 	sts	0x034F, r24
    397a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    397e:	80 93 50 03 	sts	0x0350, r24
    3982:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    3986:	80 93 51 03 	sts	0x0351, r24
    398a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    398e:	80 93 52 03 	sts	0x0352, r24
    3992:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    3996:	80 93 53 03 	sts	0x0353, r24
    399a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    399e:	80 93 54 03 	sts	0x0354, r24
    39a2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    39a6:	80 93 55 03 	sts	0x0355, r24
    39aa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    39ae:	80 93 56 03 	sts	0x0356, r24
    39b2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    39b6:	80 93 57 03 	sts	0x0357, r24
    39ba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    39be:	80 93 58 03 	sts	0x0358, r24
    39c2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    39c6:	80 93 59 03 	sts	0x0359, r24
    39ca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    39ce:	80 93 5a 03 	sts	0x035A, r24
    39d2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    39d6:	80 93 5b 03 	sts	0x035B, r24
    39da:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    39de:	80 93 5c 03 	sts	0x035C, r24
    39e2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    39e6:	80 93 5d 03 	sts	0x035D, r24
    39ea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    39ee:	80 93 5e 03 	sts	0x035E, r24
    39f2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    39f6:	80 93 5f 03 	sts	0x035F, r24
    39fa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    39fe:	80 93 60 03 	sts	0x0360, r24
    3a02:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    3a06:	80 93 61 03 	sts	0x0361, r24
    3a0a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    3a0e:	80 93 62 03 	sts	0x0362, r24
    3a12:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    3a16:	80 93 63 03 	sts	0x0363, r24
    3a1a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    3a1e:	80 93 64 03 	sts	0x0364, r24
    3a22:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    3a26:	80 93 65 03 	sts	0x0365, r24
    3a2a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    3a2e:	80 93 66 03 	sts	0x0366, r24
    3a32:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    3a36:	80 93 67 03 	sts	0x0367, r24
    3a3a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    3a3e:	80 93 68 03 	sts	0x0368, r24
    3a42:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    3a46:	80 93 69 03 	sts	0x0369, r24
    3a4a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    3a4e:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3a52:	80 91 e8 00 	lds	r24, 0x00E8
    3a56:	8b 77       	andi	r24, 0x7B	; 123
    3a58:	80 93 e8 00 	sts	0x00E8, r24
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
    3a5c:	10 92 e8 02 	sts	0x02E8, r1
    3a60:	20 91 6c 03 	lds	r18, 0x036C
    3a64:	30 91 6d 03 	lds	r19, 0x036D
    3a68:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <main+0x822>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3a6c:	f0 92 e9 00 	sts	0x00E9, r15
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    3a70:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    3a74:	82 fd       	sbrc	r24, 2
    3a76:	0a c0       	rjmp	.+20     	; 0x3a8c <__stack+0x198d>
    3a78:	09 89       	ldd	r16, Y+17	; 0x11
    3a7a:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    3a7c:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    3a80:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    3a84:	82 ff       	sbrs	r24, 2
    3a86:	fa cf       	rjmp	.-12     	; 0x3a7c <__stack+0x197d>
    3a88:	1a 8b       	std	Y+18, r17	; 0x12
    3a8a:	09 8b       	std	Y+17, r16	; 0x11
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    3a8c:	80 91 f1 00 	lds	r24, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    3a90:	80 93 2b 03 	sts	0x032B, r24
    3a94:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    3a98:	80 93 2c 03 	sts	0x032C, r24
    3a9c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    3aa0:	80 93 2d 03 	sts	0x032D, r24
    3aa4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    3aa8:	80 93 2e 03 	sts	0x032E, r24
    3aac:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    3ab0:	80 93 2f 03 	sts	0x032F, r24
    3ab4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    3ab8:	80 93 30 03 	sts	0x0330, r24
    3abc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    3ac0:	80 93 31 03 	sts	0x0331, r24
    3ac4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    3ac8:	80 93 32 03 	sts	0x0332, r24
    3acc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    3ad0:	80 93 33 03 	sts	0x0333, r24
    3ad4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    3ad8:	80 93 34 03 	sts	0x0334, r24
    3adc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    3ae0:	80 93 35 03 	sts	0x0335, r24
    3ae4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    3ae8:	80 93 36 03 	sts	0x0336, r24
    3aec:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    3af0:	80 93 37 03 	sts	0x0337, r24
    3af4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    3af8:	80 93 38 03 	sts	0x0338, r24
    3afc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    3b00:	80 93 39 03 	sts	0x0339, r24
    3b04:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    3b08:	80 93 3a 03 	sts	0x033A, r24
    3b0c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    3b10:	80 93 3b 03 	sts	0x033B, r24
    3b14:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    3b18:	80 93 3c 03 	sts	0x033C, r24
    3b1c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    3b20:	80 93 3d 03 	sts	0x033D, r24
    3b24:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    3b28:	80 93 3e 03 	sts	0x033E, r24
    3b2c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    3b30:	80 93 3f 03 	sts	0x033F, r24
    3b34:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    3b38:	80 93 40 03 	sts	0x0340, r24
    3b3c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    3b40:	80 93 41 03 	sts	0x0341, r24
    3b44:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    3b48:	80 93 42 03 	sts	0x0342, r24
    3b4c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    3b50:	80 93 43 03 	sts	0x0343, r24
    3b54:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    3b58:	80 93 44 03 	sts	0x0344, r24
    3b5c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    3b60:	80 93 45 03 	sts	0x0345, r24
    3b64:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    3b68:	80 93 46 03 	sts	0x0346, r24
    3b6c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    3b70:	80 93 47 03 	sts	0x0347, r24
    3b74:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    3b78:	80 93 48 03 	sts	0x0348, r24
    3b7c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    3b80:	80 93 49 03 	sts	0x0349, r24
    3b84:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    3b88:	80 93 4a 03 	sts	0x034A, r24
    3b8c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    3b90:	80 93 4b 03 	sts	0x034B, r24
    3b94:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    3b98:	80 93 4c 03 	sts	0x034C, r24
    3b9c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    3ba0:	80 93 4d 03 	sts	0x034D, r24
    3ba4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    3ba8:	80 93 4e 03 	sts	0x034E, r24
    3bac:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    3bb0:	80 93 4f 03 	sts	0x034F, r24
    3bb4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    3bb8:	80 93 50 03 	sts	0x0350, r24
    3bbc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    3bc0:	80 93 51 03 	sts	0x0351, r24
    3bc4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    3bc8:	80 93 52 03 	sts	0x0352, r24
    3bcc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    3bd0:	80 93 53 03 	sts	0x0353, r24
    3bd4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    3bd8:	80 93 54 03 	sts	0x0354, r24
    3bdc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    3be0:	80 93 55 03 	sts	0x0355, r24
    3be4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    3be8:	80 93 56 03 	sts	0x0356, r24
    3bec:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    3bf0:	80 93 57 03 	sts	0x0357, r24
    3bf4:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    3bf8:	80 93 58 03 	sts	0x0358, r24
    3bfc:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    3c00:	80 93 59 03 	sts	0x0359, r24
    3c04:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    3c08:	80 93 5a 03 	sts	0x035A, r24
    3c0c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    3c10:	80 93 5b 03 	sts	0x035B, r24
    3c14:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    3c18:	80 93 5c 03 	sts	0x035C, r24
    3c1c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    3c20:	80 93 5d 03 	sts	0x035D, r24
    3c24:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    3c28:	80 93 5e 03 	sts	0x035E, r24
    3c2c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    3c30:	80 93 5f 03 	sts	0x035F, r24
    3c34:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    3c38:	80 93 60 03 	sts	0x0360, r24
    3c3c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    3c40:	80 93 61 03 	sts	0x0361, r24
    3c44:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    3c48:	80 93 62 03 	sts	0x0362, r24
    3c4c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    3c50:	80 93 63 03 	sts	0x0363, r24
    3c54:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    3c58:	80 93 64 03 	sts	0x0364, r24
    3c5c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    3c60:	80 93 65 03 	sts	0x0365, r24
    3c64:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    3c68:	80 93 66 03 	sts	0x0366, r24
    3c6c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    3c70:	80 93 67 03 	sts	0x0367, r24
    3c74:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    3c78:	80 93 68 03 	sts	0x0368, r24
    3c7c:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    3c80:	80 93 69 03 	sts	0x0369, r24
    3c84:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    3c88:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    3c8c:	80 91 e8 00 	lds	r24, 0x00E8
    3c90:	8b 77       	andi	r24, 0x7B	; 123
    3c92:	80 93 e8 00 	sts	0x00E8, r24
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
    3c96:	10 92 e8 02 	sts	0x02E8, r1
    3c9a:	20 91 6c 03 	lds	r18, 0x036C
    3c9e:	30 91 6d 03 	lds	r19, 0x036D
    3ca2:	0c 94 e4 0d 	jmp	0x1bc8	; 0x1bc8 <main+0x5cc>
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    3ca6:	80 91 e8 02 	lds	r24, 0x02E8
    3caa:	80 34       	cpi	r24, 0x40	; 64
    3cac:	10 f0       	brcs	.+4      	; 0x3cb2 <__stack+0x1bb3>
    3cae:	0c 94 44 10 	jmp	0x2088	; 0x2088 <main+0xa8c>
    3cb2:	0a ca       	rjmp	.-3052   	; 0x30c8 <__stack+0xfc9>
    3cb4:	90 91 e8 02 	lds	r25, 0x02E8
    3cb8:	a9 01       	movw	r20, r18
    3cba:	ce c8       	rjmp	.-3684   	; 0x2e58 <__stack+0xd59>
    3cbc:	90 91 e8 02 	lds	r25, 0x02E8
    3cc0:	89 2f       	mov	r24, r25
    3cc2:	90 34       	cpi	r25, 0x40	; 64
    3cc4:	08 f4       	brcc	.+2      	; 0x3cc8 <__stack+0x1bc9>
    3cc6:	b1 c8       	rjmp	.-3742   	; 0x2e2a <__stack+0xd2b>
				break;
			case CMD_NOR_ERASE_CHIP:
				nor_erase_chip();
				break;
			case CMD_NOR_ADDRESS_SET:
				nor_address_set(usbio_get_byte(), usbio_get_byte(), usbio_get_byte());
    3cc8:	1f ef       	ldi	r17, 0xFF	; 255
    3cca:	c2 c8       	rjmp	.-3708   	; 0x2e50 <__stack+0xd51>
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    3ccc:	20 91 ea 02 	lds	r18, 0x02EA
    3cd0:	e2 2f       	mov	r30, r18
    3cd2:	f0 e0       	ldi	r31, 0x00	; 0
    3cd4:	e5 51       	subi	r30, 0x15	; 21
    3cd6:	fd 4f       	sbci	r31, 0xFD	; 253
    3cd8:	80 91 02 01 	lds	r24, 0x0102
    3cdc:	80 83       	st	Z, r24
    3cde:	2f 5f       	subi	r18, 0xFF	; 255
    3ce0:	e2 2f       	mov	r30, r18
    3ce2:	f0 e0       	ldi	r31, 0x00	; 0
    3ce4:	e5 51       	subi	r30, 0x15	; 21
    3ce6:	fd 4f       	sbci	r31, 0xFD	; 253
    3ce8:	80 91 03 01 	lds	r24, 0x0103
    3cec:	80 83       	st	Z, r24
    3cee:	2f 5f       	subi	r18, 0xFF	; 255
				case 0:
					if (init_nand(&nand0) == 1) {
						//24 bytes
						usbio_set_byte(nand0.info.maker_code, 0);
						usbio_set_byte(nand0.info.device_code, 0);
						usbio_set_byte((nand0.info.page_size >> 24) & 0xFF, 0);
    3cf0:	80 91 04 01 	lds	r24, 0x0104
    3cf4:	90 91 05 01 	lds	r25, 0x0105
    3cf8:	30 91 06 01 	lds	r19, 0x0106
    3cfc:	40 91 07 01 	lds	r20, 0x0107
    3d00:	e2 2f       	mov	r30, r18
    3d02:	f0 e0       	ldi	r31, 0x00	; 0
    3d04:	e5 51       	subi	r30, 0x15	; 21
    3d06:	fd 4f       	sbci	r31, 0xFD	; 253
    3d08:	40 83       	st	Z, r20
    3d0a:	2f 5f       	subi	r18, 0xFF	; 255
    3d0c:	e2 2f       	mov	r30, r18
    3d0e:	f0 e0       	ldi	r31, 0x00	; 0
    3d10:	e5 51       	subi	r30, 0x15	; 21
    3d12:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand0.info.page_size >> 16) & 0xFF, 0);
    3d14:	30 83       	st	Z, r19
    3d16:	2f 5f       	subi	r18, 0xFF	; 255
    3d18:	e2 2f       	mov	r30, r18
    3d1a:	f0 e0       	ldi	r31, 0x00	; 0
    3d1c:	e5 51       	subi	r30, 0x15	; 21
    3d1e:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand0.info.page_size >> 8) & 0xFF, 0);
    3d20:	90 83       	st	Z, r25
    3d22:	2f 5f       	subi	r18, 0xFF	; 255
    3d24:	e2 2f       	mov	r30, r18
    3d26:	f0 e0       	ldi	r31, 0x00	; 0
    3d28:	e5 51       	subi	r30, 0x15	; 21
    3d2a:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte(nand0.info.page_size & 0xFF, 0);
    3d2c:	80 83       	st	Z, r24
    3d2e:	2f 5f       	subi	r18, 0xFF	; 255
    3d30:	20 93 ea 02 	sts	0x02EA, r18
    3d34:	e2 2f       	mov	r30, r18
    3d36:	f0 e0       	ldi	r31, 0x00	; 0
    3d38:	e5 51       	subi	r30, 0x15	; 21
    3d3a:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte(nand0.info.oob->size, 0);
    3d3c:	a0 91 00 01 	lds	r26, 0x0100
    3d40:	b0 91 01 01 	lds	r27, 0x0101
    3d44:	8c 91       	ld	r24, X
    3d46:	80 83       	st	Z, r24
    3d48:	2f 5f       	subi	r18, 0xFF	; 255
						usbio_set_byte((nand0.info.block_size >> 24) & 0xFF, 0);
    3d4a:	80 91 10 01 	lds	r24, 0x0110
    3d4e:	90 91 11 01 	lds	r25, 0x0111
    3d52:	30 91 12 01 	lds	r19, 0x0112
    3d56:	40 91 13 01 	lds	r20, 0x0113
    3d5a:	e2 2f       	mov	r30, r18
    3d5c:	f0 e0       	ldi	r31, 0x00	; 0
    3d5e:	e5 51       	subi	r30, 0x15	; 21
    3d60:	fd 4f       	sbci	r31, 0xFD	; 253
    3d62:	40 83       	st	Z, r20
    3d64:	2f 5f       	subi	r18, 0xFF	; 255
    3d66:	e2 2f       	mov	r30, r18
    3d68:	f0 e0       	ldi	r31, 0x00	; 0
    3d6a:	e5 51       	subi	r30, 0x15	; 21
    3d6c:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand0.info.block_size >> 16) & 0xFF, 0);
    3d6e:	30 83       	st	Z, r19
    3d70:	2f 5f       	subi	r18, 0xFF	; 255
    3d72:	e2 2f       	mov	r30, r18
    3d74:	f0 e0       	ldi	r31, 0x00	; 0
    3d76:	e5 51       	subi	r30, 0x15	; 21
    3d78:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand0.info.block_size >> 8) & 0xFF, 0);
    3d7a:	90 83       	st	Z, r25
    3d7c:	2f 5f       	subi	r18, 0xFF	; 255
    3d7e:	e2 2f       	mov	r30, r18
    3d80:	f0 e0       	ldi	r31, 0x00	; 0
    3d82:	e5 51       	subi	r30, 0x15	; 21
    3d84:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte(nand0.info.block_size & 0xFF, 0);
    3d86:	80 83       	st	Z, r24
    3d88:	2f 5f       	subi	r18, 0xFF	; 255
						usbio_set_byte((nand0.info.num_blocks >> 24) & 0xFF, 0);
    3d8a:	80 91 18 01 	lds	r24, 0x0118
    3d8e:	90 91 19 01 	lds	r25, 0x0119
    3d92:	30 91 1a 01 	lds	r19, 0x011A
    3d96:	40 91 1b 01 	lds	r20, 0x011B
    3d9a:	e2 2f       	mov	r30, r18
    3d9c:	f0 e0       	ldi	r31, 0x00	; 0
    3d9e:	e5 51       	subi	r30, 0x15	; 21
    3da0:	fd 4f       	sbci	r31, 0xFD	; 253
    3da2:	40 83       	st	Z, r20
    3da4:	2f 5f       	subi	r18, 0xFF	; 255
    3da6:	e2 2f       	mov	r30, r18
    3da8:	f0 e0       	ldi	r31, 0x00	; 0
    3daa:	e5 51       	subi	r30, 0x15	; 21
    3dac:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand0.info.num_blocks >> 16) & 0xFF, 0);
    3dae:	30 83       	st	Z, r19
    3db0:	2f 5f       	subi	r18, 0xFF	; 255
    3db2:	e2 2f       	mov	r30, r18
    3db4:	f0 e0       	ldi	r31, 0x00	; 0
    3db6:	e5 51       	subi	r30, 0x15	; 21
    3db8:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand0.info.num_blocks >> 8) & 0xFF, 0);
    3dba:	90 83       	st	Z, r25
    3dbc:	92 2f       	mov	r25, r18
    3dbe:	9f 5f       	subi	r25, 0xFF	; 255
    3dc0:	e9 2f       	mov	r30, r25
    3dc2:	f0 e0       	ldi	r31, 0x00	; 0
    3dc4:	e5 51       	subi	r30, 0x15	; 21
    3dc6:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte(nand0.info.num_blocks & 0xFF, 0);
    3dc8:	80 83       	st	Z, r24
    3dca:	89 2f       	mov	r24, r25
    3dcc:	8f 5f       	subi	r24, 0xFF	; 255
    3dce:	e8 2f       	mov	r30, r24
    3dd0:	f0 e0       	ldi	r31, 0x00	; 0
    3dd2:	e5 51       	subi	r30, 0x15	; 21
    3dd4:	fd 4f       	sbci	r31, 0xFD	; 253
    3dd6:	90 91 20 01 	lds	r25, 0x0120
    3dda:	90 83       	st	Z, r25
    3ddc:	8f 5f       	subi	r24, 0xFF	; 255
    3dde:	89 83       	std	Y+1, r24	; 0x01
						usbio_set_byte(nand0.info.num_planes, 0);
						usbio_set_byte((nand0.info.plane_size >> 56) & 0xFF, 0);
    3de0:	10 91 21 01 	lds	r17, 0x0121
    3de4:	90 90 22 01 	lds	r9, 0x0122
    3de8:	80 90 23 01 	lds	r8, 0x0123
    3dec:	70 90 24 01 	lds	r7, 0x0124
    3df0:	60 90 25 01 	lds	r6, 0x0125
    3df4:	50 90 26 01 	lds	r5, 0x0126
    3df8:	40 90 27 01 	lds	r4, 0x0127
    3dfc:	e0 91 28 01 	lds	r30, 0x0128
    3e00:	ea 83       	std	Y+2, r30	; 0x02
    3e02:	a8 2e       	mov	r10, r24
    3e04:	bb 24       	eor	r11, r11
    3e06:	4b ee       	ldi	r20, 0xEB	; 235
    3e08:	52 e0       	ldi	r21, 0x02	; 2
    3e0a:	a4 0e       	add	r10, r20
    3e0c:	b5 1e       	adc	r11, r21
    3e0e:	21 2f       	mov	r18, r17
    3e10:	39 2d       	mov	r19, r9
    3e12:	48 2d       	mov	r20, r8
    3e14:	57 2d       	mov	r21, r7
    3e16:	66 2d       	mov	r22, r6
    3e18:	75 2d       	mov	r23, r5
    3e1a:	84 2d       	mov	r24, r4
    3e1c:	9e 2f       	mov	r25, r30
    3e1e:	08 e3       	ldi	r16, 0x38	; 56
    3e20:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    3e24:	d5 01       	movw	r26, r10
    3e26:	2c 93       	st	X, r18
    3e28:	b9 81       	ldd	r27, Y+1	; 0x01
    3e2a:	bf 5f       	subi	r27, 0xFF	; 255
    3e2c:	b9 83       	std	Y+1, r27	; 0x01
    3e2e:	ab 2e       	mov	r10, r27
    3e30:	bb 24       	eor	r11, r11
    3e32:	eb ee       	ldi	r30, 0xEB	; 235
    3e34:	f2 e0       	ldi	r31, 0x02	; 2
    3e36:	ae 0e       	add	r10, r30
    3e38:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand0.info.plane_size >> 48) & 0xFF, 0);
    3e3a:	21 2f       	mov	r18, r17
    3e3c:	39 2d       	mov	r19, r9
    3e3e:	48 2d       	mov	r20, r8
    3e40:	57 2d       	mov	r21, r7
    3e42:	66 2d       	mov	r22, r6
    3e44:	75 2d       	mov	r23, r5
    3e46:	84 2d       	mov	r24, r4
    3e48:	9a 81       	ldd	r25, Y+2	; 0x02
    3e4a:	00 e3       	ldi	r16, 0x30	; 48
    3e4c:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    3e50:	d5 01       	movw	r26, r10
    3e52:	2c 93       	st	X, r18
    3e54:	b9 81       	ldd	r27, Y+1	; 0x01
    3e56:	bf 5f       	subi	r27, 0xFF	; 255
    3e58:	b9 83       	std	Y+1, r27	; 0x01
    3e5a:	ab 2e       	mov	r10, r27
    3e5c:	bb 24       	eor	r11, r11
    3e5e:	eb ee       	ldi	r30, 0xEB	; 235
    3e60:	f2 e0       	ldi	r31, 0x02	; 2
    3e62:	ae 0e       	add	r10, r30
    3e64:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand0.info.plane_size >> 40) & 0xFF, 0);
    3e66:	21 2f       	mov	r18, r17
    3e68:	39 2d       	mov	r19, r9
    3e6a:	48 2d       	mov	r20, r8
    3e6c:	57 2d       	mov	r21, r7
    3e6e:	66 2d       	mov	r22, r6
    3e70:	75 2d       	mov	r23, r5
    3e72:	84 2d       	mov	r24, r4
    3e74:	9a 81       	ldd	r25, Y+2	; 0x02
    3e76:	08 e2       	ldi	r16, 0x28	; 40
    3e78:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    3e7c:	d5 01       	movw	r26, r10
    3e7e:	2c 93       	st	X, r18
    3e80:	b9 81       	ldd	r27, Y+1	; 0x01
    3e82:	bf 5f       	subi	r27, 0xFF	; 255
    3e84:	b9 83       	std	Y+1, r27	; 0x01
    3e86:	ab 2e       	mov	r10, r27
    3e88:	bb 24       	eor	r11, r11
    3e8a:	eb ee       	ldi	r30, 0xEB	; 235
    3e8c:	f2 e0       	ldi	r31, 0x02	; 2
    3e8e:	ae 0e       	add	r10, r30
    3e90:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand0.info.plane_size >> 32) & 0xFF, 0);
    3e92:	21 2f       	mov	r18, r17
    3e94:	39 2d       	mov	r19, r9
    3e96:	48 2d       	mov	r20, r8
    3e98:	57 2d       	mov	r21, r7
    3e9a:	66 2d       	mov	r22, r6
    3e9c:	75 2d       	mov	r23, r5
    3e9e:	84 2d       	mov	r24, r4
    3ea0:	9a 81       	ldd	r25, Y+2	; 0x02
    3ea2:	00 e2       	ldi	r16, 0x20	; 32
    3ea4:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    3ea8:	d5 01       	movw	r26, r10
    3eaa:	2c 93       	st	X, r18
    3eac:	b9 81       	ldd	r27, Y+1	; 0x01
    3eae:	bf 5f       	subi	r27, 0xFF	; 255
    3eb0:	b9 83       	std	Y+1, r27	; 0x01
    3eb2:	ab 2e       	mov	r10, r27
    3eb4:	bb 24       	eor	r11, r11
    3eb6:	eb ee       	ldi	r30, 0xEB	; 235
    3eb8:	f2 e0       	ldi	r31, 0x02	; 2
    3eba:	ae 0e       	add	r10, r30
    3ebc:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand0.info.plane_size >> 24) & 0xFF, 0);
    3ebe:	21 2f       	mov	r18, r17
    3ec0:	39 2d       	mov	r19, r9
    3ec2:	48 2d       	mov	r20, r8
    3ec4:	57 2d       	mov	r21, r7
    3ec6:	66 2d       	mov	r22, r6
    3ec8:	75 2d       	mov	r23, r5
    3eca:	84 2d       	mov	r24, r4
    3ecc:	9a 81       	ldd	r25, Y+2	; 0x02
    3ece:	08 e1       	ldi	r16, 0x18	; 24
    3ed0:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    3ed4:	d5 01       	movw	r26, r10
    3ed6:	2c 93       	st	X, r18
    3ed8:	b9 81       	ldd	r27, Y+1	; 0x01
    3eda:	bf 5f       	subi	r27, 0xFF	; 255
    3edc:	b9 83       	std	Y+1, r27	; 0x01
    3ede:	ab 2e       	mov	r10, r27
    3ee0:	bb 24       	eor	r11, r11
    3ee2:	eb ee       	ldi	r30, 0xEB	; 235
    3ee4:	f2 e0       	ldi	r31, 0x02	; 2
    3ee6:	ae 0e       	add	r10, r30
    3ee8:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand0.info.plane_size >> 16) & 0xFF, 0);
    3eea:	21 2f       	mov	r18, r17
    3eec:	39 2d       	mov	r19, r9
    3eee:	48 2d       	mov	r20, r8
    3ef0:	57 2d       	mov	r21, r7
    3ef2:	66 2d       	mov	r22, r6
    3ef4:	75 2d       	mov	r23, r5
    3ef6:	84 2d       	mov	r24, r4
    3ef8:	9a 81       	ldd	r25, Y+2	; 0x02
    3efa:	00 e1       	ldi	r16, 0x10	; 16
    3efc:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    3f00:	d5 01       	movw	r26, r10
    3f02:	2c 93       	st	X, r18
    3f04:	b9 81       	ldd	r27, Y+1	; 0x01
    3f06:	bf 5f       	subi	r27, 0xFF	; 255
    3f08:	b9 83       	std	Y+1, r27	; 0x01
    3f0a:	ab 2e       	mov	r10, r27
    3f0c:	bb 24       	eor	r11, r11
    3f0e:	eb ee       	ldi	r30, 0xEB	; 235
    3f10:	f2 e0       	ldi	r31, 0x02	; 2
    3f12:	ae 0e       	add	r10, r30
    3f14:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand0.info.plane_size >> 8) & 0xFF, 0);
    3f16:	21 2f       	mov	r18, r17
    3f18:	39 2d       	mov	r19, r9
    3f1a:	48 2d       	mov	r20, r8
    3f1c:	57 2d       	mov	r21, r7
    3f1e:	66 2d       	mov	r22, r6
    3f20:	75 2d       	mov	r23, r5
    3f22:	84 2d       	mov	r24, r4
    3f24:	9a 81       	ldd	r25, Y+2	; 0x02
    3f26:	08 e0       	ldi	r16, 0x08	; 8
    3f28:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    3f2c:	d5 01       	movw	r26, r10
    3f2e:	2c 93       	st	X, r18
    3f30:	e9 81       	ldd	r30, Y+1	; 0x01
    3f32:	ef 5f       	subi	r30, 0xFF	; 255
    3f34:	f0 e0       	ldi	r31, 0x00	; 0
    3f36:	e5 51       	subi	r30, 0x15	; 21
    3f38:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte(nand0.info.plane_size & 0xFF, 1);
    3f3a:	10 83       	st	Z, r17
	
	if (transmit) {
		_tx_buffer_ix = 0;
    3f3c:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    3f40:	b1 e0       	ldi	r27, 0x01	; 1
    3f42:	b0 93 e9 00 	sts	0x00E9, r27
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    3f46:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    3f4a:	80 ff       	sbrs	r24, 0
    3f4c:	02 c0       	rjmp	.+4      	; 0x3f52 <__stack+0x1e53>
    3f4e:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__stack+0x747>
    3f52:	09 89       	ldd	r16, Y+17	; 0x11
    3f54:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    3f56:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    3f5a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    3f5e:	80 ff       	sbrs	r24, 0
    3f60:	fa cf       	rjmp	.-12     	; 0x3f56 <__stack+0x1e57>
    3f62:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__stack+0x743>
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    3f66:	20 91 ea 02 	lds	r18, 0x02EA
    3f6a:	e2 2f       	mov	r30, r18
    3f6c:	f0 e0       	ldi	r31, 0x00	; 0
    3f6e:	e5 51       	subi	r30, 0x15	; 21
    3f70:	fd 4f       	sbci	r31, 0xFD	; 253
    3f72:	80 91 59 01 	lds	r24, 0x0159
    3f76:	80 83       	st	Z, r24
    3f78:	2f 5f       	subi	r18, 0xFF	; 255
    3f7a:	e2 2f       	mov	r30, r18
    3f7c:	f0 e0       	ldi	r31, 0x00	; 0
    3f7e:	e5 51       	subi	r30, 0x15	; 21
    3f80:	fd 4f       	sbci	r31, 0xFD	; 253
    3f82:	80 91 5a 01 	lds	r24, 0x015A
    3f86:	80 83       	st	Z, r24
    3f88:	2f 5f       	subi	r18, 0xFF	; 255
				case 1:
					if (init_nand(&nand1) == 1) {
						//24 bytes
						usbio_set_byte(nand1.info.maker_code, 0);
						usbio_set_byte(nand1.info.device_code, 0);
						usbio_set_byte((nand1.info.page_size >> 24) & 0xFF, 0);
    3f8a:	80 91 5b 01 	lds	r24, 0x015B
    3f8e:	90 91 5c 01 	lds	r25, 0x015C
    3f92:	30 91 5d 01 	lds	r19, 0x015D
    3f96:	40 91 5e 01 	lds	r20, 0x015E
    3f9a:	e2 2f       	mov	r30, r18
    3f9c:	f0 e0       	ldi	r31, 0x00	; 0
    3f9e:	e5 51       	subi	r30, 0x15	; 21
    3fa0:	fd 4f       	sbci	r31, 0xFD	; 253
    3fa2:	40 83       	st	Z, r20
    3fa4:	2f 5f       	subi	r18, 0xFF	; 255
    3fa6:	e2 2f       	mov	r30, r18
    3fa8:	f0 e0       	ldi	r31, 0x00	; 0
    3faa:	e5 51       	subi	r30, 0x15	; 21
    3fac:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand1.info.page_size >> 16) & 0xFF, 0);
    3fae:	30 83       	st	Z, r19
    3fb0:	2f 5f       	subi	r18, 0xFF	; 255
    3fb2:	e2 2f       	mov	r30, r18
    3fb4:	f0 e0       	ldi	r31, 0x00	; 0
    3fb6:	e5 51       	subi	r30, 0x15	; 21
    3fb8:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand1.info.page_size >> 8) & 0xFF, 0);
    3fba:	90 83       	st	Z, r25
    3fbc:	2f 5f       	subi	r18, 0xFF	; 255
    3fbe:	e2 2f       	mov	r30, r18
    3fc0:	f0 e0       	ldi	r31, 0x00	; 0
    3fc2:	e5 51       	subi	r30, 0x15	; 21
    3fc4:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte(nand1.info.page_size & 0xFF, 0);
    3fc6:	80 83       	st	Z, r24
    3fc8:	2f 5f       	subi	r18, 0xFF	; 255
    3fca:	20 93 ea 02 	sts	0x02EA, r18
    3fce:	e2 2f       	mov	r30, r18
    3fd0:	f0 e0       	ldi	r31, 0x00	; 0
    3fd2:	e5 51       	subi	r30, 0x15	; 21
    3fd4:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte(nand1.info.oob->size, 0);
    3fd6:	a0 91 57 01 	lds	r26, 0x0157
    3fda:	b0 91 58 01 	lds	r27, 0x0158
    3fde:	8c 91       	ld	r24, X
    3fe0:	80 83       	st	Z, r24
    3fe2:	2f 5f       	subi	r18, 0xFF	; 255
						usbio_set_byte((nand1.info.block_size >> 24) & 0xFF, 0);
    3fe4:	80 91 67 01 	lds	r24, 0x0167
    3fe8:	90 91 68 01 	lds	r25, 0x0168
    3fec:	30 91 69 01 	lds	r19, 0x0169
    3ff0:	40 91 6a 01 	lds	r20, 0x016A
    3ff4:	e2 2f       	mov	r30, r18
    3ff6:	f0 e0       	ldi	r31, 0x00	; 0
    3ff8:	e5 51       	subi	r30, 0x15	; 21
    3ffa:	fd 4f       	sbci	r31, 0xFD	; 253
    3ffc:	40 83       	st	Z, r20
    3ffe:	2f 5f       	subi	r18, 0xFF	; 255
    4000:	e2 2f       	mov	r30, r18
    4002:	f0 e0       	ldi	r31, 0x00	; 0
    4004:	e5 51       	subi	r30, 0x15	; 21
    4006:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand1.info.block_size >> 16) & 0xFF, 0);
    4008:	30 83       	st	Z, r19
    400a:	2f 5f       	subi	r18, 0xFF	; 255
    400c:	e2 2f       	mov	r30, r18
    400e:	f0 e0       	ldi	r31, 0x00	; 0
    4010:	e5 51       	subi	r30, 0x15	; 21
    4012:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand1.info.block_size >> 8) & 0xFF, 0);
    4014:	90 83       	st	Z, r25
    4016:	2f 5f       	subi	r18, 0xFF	; 255
    4018:	e2 2f       	mov	r30, r18
    401a:	f0 e0       	ldi	r31, 0x00	; 0
    401c:	e5 51       	subi	r30, 0x15	; 21
    401e:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte(nand1.info.block_size & 0xFF, 0);
    4020:	80 83       	st	Z, r24
    4022:	2f 5f       	subi	r18, 0xFF	; 255
						usbio_set_byte((nand1.info.num_blocks >> 24) & 0xFF, 0);
    4024:	80 91 6f 01 	lds	r24, 0x016F
    4028:	90 91 70 01 	lds	r25, 0x0170
    402c:	30 91 71 01 	lds	r19, 0x0171
    4030:	40 91 72 01 	lds	r20, 0x0172
    4034:	e2 2f       	mov	r30, r18
    4036:	f0 e0       	ldi	r31, 0x00	; 0
    4038:	e5 51       	subi	r30, 0x15	; 21
    403a:	fd 4f       	sbci	r31, 0xFD	; 253
    403c:	40 83       	st	Z, r20
    403e:	2f 5f       	subi	r18, 0xFF	; 255
    4040:	e2 2f       	mov	r30, r18
    4042:	f0 e0       	ldi	r31, 0x00	; 0
    4044:	e5 51       	subi	r30, 0x15	; 21
    4046:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand1.info.num_blocks >> 16) & 0xFF, 0);
    4048:	30 83       	st	Z, r19
    404a:	2f 5f       	subi	r18, 0xFF	; 255
    404c:	e2 2f       	mov	r30, r18
    404e:	f0 e0       	ldi	r31, 0x00	; 0
    4050:	e5 51       	subi	r30, 0x15	; 21
    4052:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte((nand1.info.num_blocks >> 8) & 0xFF, 0);
    4054:	90 83       	st	Z, r25
    4056:	92 2f       	mov	r25, r18
    4058:	9f 5f       	subi	r25, 0xFF	; 255
    405a:	e9 2f       	mov	r30, r25
    405c:	f0 e0       	ldi	r31, 0x00	; 0
    405e:	e5 51       	subi	r30, 0x15	; 21
    4060:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte(nand1.info.num_blocks & 0xFF, 0);
    4062:	80 83       	st	Z, r24
    4064:	89 2f       	mov	r24, r25
    4066:	8f 5f       	subi	r24, 0xFF	; 255
    4068:	e8 2f       	mov	r30, r24
    406a:	f0 e0       	ldi	r31, 0x00	; 0
    406c:	e5 51       	subi	r30, 0x15	; 21
    406e:	fd 4f       	sbci	r31, 0xFD	; 253
    4070:	90 91 77 01 	lds	r25, 0x0177
    4074:	90 83       	st	Z, r25
    4076:	8f 5f       	subi	r24, 0xFF	; 255
    4078:	89 83       	std	Y+1, r24	; 0x01
						usbio_set_byte(nand1.info.num_planes, 0);
						usbio_set_byte((nand1.info.plane_size >> 56) & 0xFF, 0);
    407a:	10 91 78 01 	lds	r17, 0x0178
    407e:	90 90 79 01 	lds	r9, 0x0179
    4082:	80 90 7a 01 	lds	r8, 0x017A
    4086:	70 90 7b 01 	lds	r7, 0x017B
    408a:	60 90 7c 01 	lds	r6, 0x017C
    408e:	50 90 7d 01 	lds	r5, 0x017D
    4092:	40 90 7e 01 	lds	r4, 0x017E
    4096:	40 91 7f 01 	lds	r20, 0x017F
    409a:	4a 83       	std	Y+2, r20	; 0x02
    409c:	a8 2e       	mov	r10, r24
    409e:	bb 24       	eor	r11, r11
    40a0:	8b ee       	ldi	r24, 0xEB	; 235
    40a2:	92 e0       	ldi	r25, 0x02	; 2
    40a4:	a8 0e       	add	r10, r24
    40a6:	b9 1e       	adc	r11, r25
    40a8:	21 2f       	mov	r18, r17
    40aa:	39 2d       	mov	r19, r9
    40ac:	48 2d       	mov	r20, r8
    40ae:	57 2d       	mov	r21, r7
    40b0:	66 2d       	mov	r22, r6
    40b2:	75 2d       	mov	r23, r5
    40b4:	84 2d       	mov	r24, r4
    40b6:	9a 81       	ldd	r25, Y+2	; 0x02
    40b8:	08 e3       	ldi	r16, 0x38	; 56
    40ba:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    40be:	d5 01       	movw	r26, r10
    40c0:	2c 93       	st	X, r18
    40c2:	b9 81       	ldd	r27, Y+1	; 0x01
    40c4:	bf 5f       	subi	r27, 0xFF	; 255
    40c6:	b9 83       	std	Y+1, r27	; 0x01
    40c8:	ab 2e       	mov	r10, r27
    40ca:	bb 24       	eor	r11, r11
    40cc:	eb ee       	ldi	r30, 0xEB	; 235
    40ce:	f2 e0       	ldi	r31, 0x02	; 2
    40d0:	ae 0e       	add	r10, r30
    40d2:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand1.info.plane_size >> 48) & 0xFF, 0);
    40d4:	21 2f       	mov	r18, r17
    40d6:	39 2d       	mov	r19, r9
    40d8:	48 2d       	mov	r20, r8
    40da:	57 2d       	mov	r21, r7
    40dc:	66 2d       	mov	r22, r6
    40de:	75 2d       	mov	r23, r5
    40e0:	84 2d       	mov	r24, r4
    40e2:	9a 81       	ldd	r25, Y+2	; 0x02
    40e4:	00 e3       	ldi	r16, 0x30	; 48
    40e6:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    40ea:	d5 01       	movw	r26, r10
    40ec:	2c 93       	st	X, r18
    40ee:	b9 81       	ldd	r27, Y+1	; 0x01
    40f0:	bf 5f       	subi	r27, 0xFF	; 255
    40f2:	b9 83       	std	Y+1, r27	; 0x01
    40f4:	ab 2e       	mov	r10, r27
    40f6:	bb 24       	eor	r11, r11
    40f8:	eb ee       	ldi	r30, 0xEB	; 235
    40fa:	f2 e0       	ldi	r31, 0x02	; 2
    40fc:	ae 0e       	add	r10, r30
    40fe:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand1.info.plane_size >> 40) & 0xFF, 0);
    4100:	21 2f       	mov	r18, r17
    4102:	39 2d       	mov	r19, r9
    4104:	48 2d       	mov	r20, r8
    4106:	57 2d       	mov	r21, r7
    4108:	66 2d       	mov	r22, r6
    410a:	75 2d       	mov	r23, r5
    410c:	84 2d       	mov	r24, r4
    410e:	9a 81       	ldd	r25, Y+2	; 0x02
    4110:	08 e2       	ldi	r16, 0x28	; 40
    4112:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    4116:	d5 01       	movw	r26, r10
    4118:	2c 93       	st	X, r18
    411a:	b9 81       	ldd	r27, Y+1	; 0x01
    411c:	bf 5f       	subi	r27, 0xFF	; 255
    411e:	b9 83       	std	Y+1, r27	; 0x01
    4120:	ab 2e       	mov	r10, r27
    4122:	bb 24       	eor	r11, r11
    4124:	eb ee       	ldi	r30, 0xEB	; 235
    4126:	f2 e0       	ldi	r31, 0x02	; 2
    4128:	ae 0e       	add	r10, r30
    412a:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand1.info.plane_size >> 32) & 0xFF, 0);
    412c:	21 2f       	mov	r18, r17
    412e:	39 2d       	mov	r19, r9
    4130:	48 2d       	mov	r20, r8
    4132:	57 2d       	mov	r21, r7
    4134:	66 2d       	mov	r22, r6
    4136:	75 2d       	mov	r23, r5
    4138:	84 2d       	mov	r24, r4
    413a:	9a 81       	ldd	r25, Y+2	; 0x02
    413c:	00 e2       	ldi	r16, 0x20	; 32
    413e:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    4142:	d5 01       	movw	r26, r10
    4144:	2c 93       	st	X, r18
    4146:	b9 81       	ldd	r27, Y+1	; 0x01
    4148:	bf 5f       	subi	r27, 0xFF	; 255
    414a:	b9 83       	std	Y+1, r27	; 0x01
    414c:	ab 2e       	mov	r10, r27
    414e:	bb 24       	eor	r11, r11
    4150:	eb ee       	ldi	r30, 0xEB	; 235
    4152:	f2 e0       	ldi	r31, 0x02	; 2
    4154:	ae 0e       	add	r10, r30
    4156:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand1.info.plane_size >> 24) & 0xFF, 0);
    4158:	21 2f       	mov	r18, r17
    415a:	39 2d       	mov	r19, r9
    415c:	48 2d       	mov	r20, r8
    415e:	57 2d       	mov	r21, r7
    4160:	66 2d       	mov	r22, r6
    4162:	75 2d       	mov	r23, r5
    4164:	84 2d       	mov	r24, r4
    4166:	9a 81       	ldd	r25, Y+2	; 0x02
    4168:	08 e1       	ldi	r16, 0x18	; 24
    416a:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    416e:	d5 01       	movw	r26, r10
    4170:	2c 93       	st	X, r18
    4172:	b9 81       	ldd	r27, Y+1	; 0x01
    4174:	bf 5f       	subi	r27, 0xFF	; 255
    4176:	b9 83       	std	Y+1, r27	; 0x01
    4178:	ab 2e       	mov	r10, r27
    417a:	bb 24       	eor	r11, r11
    417c:	eb ee       	ldi	r30, 0xEB	; 235
    417e:	f2 e0       	ldi	r31, 0x02	; 2
    4180:	ae 0e       	add	r10, r30
    4182:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand1.info.plane_size >> 16) & 0xFF, 0);
    4184:	21 2f       	mov	r18, r17
    4186:	39 2d       	mov	r19, r9
    4188:	48 2d       	mov	r20, r8
    418a:	57 2d       	mov	r21, r7
    418c:	66 2d       	mov	r22, r6
    418e:	75 2d       	mov	r23, r5
    4190:	84 2d       	mov	r24, r4
    4192:	9a 81       	ldd	r25, Y+2	; 0x02
    4194:	00 e1       	ldi	r16, 0x10	; 16
    4196:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    419a:	d5 01       	movw	r26, r10
    419c:	2c 93       	st	X, r18
    419e:	b9 81       	ldd	r27, Y+1	; 0x01
    41a0:	bf 5f       	subi	r27, 0xFF	; 255
    41a2:	b9 83       	std	Y+1, r27	; 0x01
    41a4:	ab 2e       	mov	r10, r27
    41a6:	bb 24       	eor	r11, r11
    41a8:	eb ee       	ldi	r30, 0xEB	; 235
    41aa:	f2 e0       	ldi	r31, 0x02	; 2
    41ac:	ae 0e       	add	r10, r30
    41ae:	bf 1e       	adc	r11, r31
						usbio_set_byte((nand1.info.plane_size >> 8) & 0xFF, 0);
    41b0:	21 2f       	mov	r18, r17
    41b2:	39 2d       	mov	r19, r9
    41b4:	48 2d       	mov	r20, r8
    41b6:	57 2d       	mov	r21, r7
    41b8:	66 2d       	mov	r22, r6
    41ba:	75 2d       	mov	r23, r5
    41bc:	84 2d       	mov	r24, r4
    41be:	9a 81       	ldd	r25, Y+2	; 0x02
    41c0:	08 e0       	ldi	r16, 0x08	; 8
    41c2:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    41c6:	d5 01       	movw	r26, r10
    41c8:	2c 93       	st	X, r18
    41ca:	e9 81       	ldd	r30, Y+1	; 0x01
    41cc:	ef 5f       	subi	r30, 0xFF	; 255
    41ce:	f0 e0       	ldi	r31, 0x00	; 0
    41d0:	e5 51       	subi	r30, 0x15	; 21
    41d2:	fd 4f       	sbci	r31, 0xFD	; 253
						usbio_set_byte(nand1.info.plane_size & 0xFF, 1);
    41d4:	10 83       	st	Z, r17
	
	if (transmit) {
		_tx_buffer_ix = 0;
    41d6:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    41da:	c0 92 e9 00 	sts	0x00E9, r12
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    41de:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    41e2:	80 ff       	sbrs	r24, 0
    41e4:	02 c0       	rjmp	.+4      	; 0x41ea <__stack+0x20eb>
    41e6:	0c 94 23 14 	jmp	0x2846	; 0x2846 <__stack+0x747>
    41ea:	09 89       	ldd	r16, Y+17	; 0x11
    41ec:	1a 89       	ldd	r17, Y+18	; 0x12
		USB_USBTask();
    41ee:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    41f2:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    41f6:	80 ff       	sbrs	r24, 0
    41f8:	fa cf       	rjmp	.-12     	; 0x41ee <__stack+0x20ef>
    41fa:	0c 94 21 14 	jmp	0x2842	; 0x2842 <__stack+0x743>

000041fe <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    41fe:	81 e0       	ldi	r24, 0x01	; 1
    4200:	61 e8       	ldi	r22, 0x81	; 129
    4202:	46 e3       	ldi	r20, 0x36	; 54
    4204:	0e 94 6f 36 	call	0x6cde	; 0x6cde <Endpoint_ConfigureEndpoint_Prv>
    4208:	82 e0       	ldi	r24, 0x02	; 2
    420a:	60 e8       	ldi	r22, 0x80	; 128
    420c:	46 e3       	ldi	r20, 0x36	; 54
    420e:	0c 94 6f 36 	jmp	0x6cde	; 0x6cde <Endpoint_ConfigureEndpoint_Prv>

00004212 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    4212:	92 30       	cpi	r25, 0x02	; 2
    4214:	09 f1       	breq	.+66     	; 0x4258 <CALLBACK_USB_GetDescriptor+0x46>
    4216:	93 30       	cpi	r25, 0x03	; 3
    4218:	b1 f0       	breq	.+44     	; 0x4246 <CALLBACK_USB_GetDescriptor+0x34>
    421a:	91 30       	cpi	r25, 0x01	; 1
    421c:	51 f0       	breq	.+20     	; 0x4232 <CALLBACK_USB_GetDescriptor+0x20>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    421e:	20 e0       	ldi	r18, 0x00	; 0
    4220:	30 e0       	ldi	r19, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    4222:	e0 e0       	ldi	r30, 0x00	; 0
    4224:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    4226:	da 01       	movw	r26, r20
    4228:	11 96       	adiw	r26, 0x01	; 1
    422a:	fc 93       	st	X, r31
    422c:	ee 93       	st	-X, r30
	return Size;
}
    422e:	c9 01       	movw	r24, r18
    4230:	08 95       	ret

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    4232:	22 e1       	ldi	r18, 0x12	; 18
    4234:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    4236:	e4 ed       	ldi	r30, 0xD4	; 212
    4238:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    423a:	da 01       	movw	r26, r20
    423c:	11 96       	adiw	r26, 0x01	; 1
    423e:	fc 93       	st	X, r31
    4240:	ee 93       	st	-X, r30
	return Size;
}
    4242:	c9 01       	movw	r24, r18
    4244:	08 95       	ret
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    4246:	81 30       	cpi	r24, 0x01	; 1
    4248:	89 f0       	breq	.+34     	; 0x426c <CALLBACK_USB_GetDescriptor+0x5a>
    424a:	81 30       	cpi	r24, 0x01	; 1
    424c:	a0 f4       	brcc	.+40     	; 0x4276 <CALLBACK_USB_GetDescriptor+0x64>
			{
				case 0x00:
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
    424e:	e6 e0       	ldi	r30, 0x06	; 6
    4250:	f1 e0       	ldi	r31, 0x01	; 1
    4252:	24 91       	lpm	r18, Z+
    4254:	30 e0       	ldi	r19, 0x00	; 0
					break;
    4256:	e7 cf       	rjmp	.-50     	; 0x4226 <CALLBACK_USB_GetDescriptor+0x14>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    4258:	20 e2       	ldi	r18, 0x20	; 32
    425a:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    425c:	e6 ee       	ldi	r30, 0xE6	; 230
    425e:	f0 e0       	ldi	r31, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
    4260:	da 01       	movw	r26, r20
    4262:	11 96       	adiw	r26, 0x01	; 1
    4264:	fc 93       	st	X, r31
    4266:	ee 93       	st	-X, r30
	return Size;
}
    4268:	c9 01       	movw	r24, r18
    426a:	08 95       	ret
					Address = &LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
					break;
				case 0x01:
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
    426c:	ea e0       	ldi	r30, 0x0A	; 10
    426e:	f1 e0       	ldi	r31, 0x01	; 1
    4270:	24 91       	lpm	r18, Z+
    4272:	30 e0       	ldi	r19, 0x00	; 0
					break;
    4274:	d8 cf       	rjmp	.-80     	; 0x4226 <CALLBACK_USB_GetDescriptor+0x14>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			switch (DescriptorNumber)
    4276:	82 30       	cpi	r24, 0x02	; 2
    4278:	39 f0       	breq	.+14     	; 0x4288 <CALLBACK_USB_GetDescriptor+0x76>
    427a:	83 30       	cpi	r24, 0x03	; 3
    427c:	81 f6       	brne	.-96     	; 0x421e <CALLBACK_USB_GetDescriptor+0xc>
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
				case 0x03:
					Address = &SerialNumberString;
					Size    = pgm_read_byte(&SerialNumberString.Header.Size);
    427e:	ec e5       	ldi	r30, 0x5C	; 92
    4280:	f1 e0       	ldi	r31, 0x01	; 1
    4282:	24 91       	lpm	r18, Z+
    4284:	30 e0       	ldi	r19, 0x00	; 0
					break;
    4286:	cf cf       	rjmp	.-98     	; 0x4226 <CALLBACK_USB_GetDescriptor+0x14>
					Address = &ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02:
					Address = &ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
    4288:	ea e1       	ldi	r30, 0x1A	; 26
    428a:	f1 e0       	ldi	r31, 0x01	; 1
    428c:	24 91       	lpm	r18, Z+
    428e:	30 e0       	ldi	r19, 0x00	; 0
					break;
    4290:	ca cf       	rjmp	.-108    	; 0x4226 <CALLBACK_USB_GetDescriptor+0x14>

00004292 <nand_init>:
 *  \return 0 on success, an error number elsewise.
 */
int32_t nand_init(struct nand_driver_data *nfd)
{
#if NAND_BUS_TYPE == NAND_BUS_TYPE_GPIO
	return nand_gpio_init(nfd);
    4292:	a5 c2       	rjmp	.+1354   	; 0x47de <nand_gpio_init>
#else
#error NAND_BUS_TYPE must be defined, see nand.h header file.
#endif
}
    4294:	08 95       	ret

00004296 <nand_read_block_raw>:
#error NAND_BUS_TYPE must be defined, see nand.h header file.
#endif
}

int32_t nand_read_block_raw(struct nand_driver_data *nfd, const uint64_t block)
{
    4296:	0f 93       	push	r16
    4298:	1f 93       	push	r17
	#if NAND_BUS_TYPE == NAND_BUS_TYPE_GPIO
	return nand_gpio_read_block(nfd, block);
    429a:	b6 d6       	rcall	.+3436   	; 0x5008 <nand_gpio_read_block>
	#else
	#error NAND_BUS_TYPE must be defined, see nand.h header file.
	#endif
}
    429c:	1f 91       	pop	r17
    429e:	0f 91       	pop	r16
    42a0:	08 95       	ret

000042a2 <_nand_gpio_write_cmd>:
 *             holds all vital data about the NAND GPIO driver.
 *  \param command Command to write to the NAND flash device.
 */
static void _nand_gpio_write_cmd(struct nand_driver_data *nfd,
		const uint8_t command)
{
    42a2:	cf 93       	push	r28
    42a4:	df 93       	push	r29
	else if ((cmd_status & 0x40) && (cmd_status & 0x01)) {
		return -EIO;
	}

	return 0;
}
    42a6:	fc 01       	movw	r30, r24
    42a8:	e1 5b       	subi	r30, 0xB1	; 177
    42aa:	ff 4f       	sbci	r31, 0xFF	; 255
    42ac:	01 90       	ld	r0, Z+
    42ae:	f0 81       	ld	r31, Z
    42b0:	e0 2d       	mov	r30, r0
 *  \param offset Offset from the base GPIO local bus address to write too.
 *  \param data Data to write to the offset address on the GPIO local bus.
 */
static inline void _nand_gpio_write_io(struct nand_driver_data *nfd, const uint8_t data)
{
	*(nfd->gpio_io_ddr) = 0xFF;
    42b2:	2f ef       	ldi	r18, 0xFF	; 255
    42b4:	20 83       	st	Z, r18
	*(nfd->gpio_io_port) = data;
    42b6:	fc 01       	movw	r30, r24
    42b8:	e5 5b       	subi	r30, 0xB5	; 181
    42ba:	ff 4f       	sbci	r31, 0xFF	; 255
    42bc:	01 90       	ld	r0, Z+
    42be:	f0 81       	ld	r31, Z
    42c0:	e0 2d       	mov	r30, r0
    42c2:	60 83       	st	Z, r22
 */
static void _nand_gpio_write_cmd(struct nand_driver_data *nfd,
		const uint8_t command)
{
	_nand_gpio_write_io(nfd, command);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_cle);
    42c4:	fc 01       	movw	r30, r24
    42c6:	ef 5a       	subi	r30, 0xAF	; 175
    42c8:	ff 4f       	sbci	r31, 0xFF	; 255
    42ca:	c0 81       	ld	r28, Z
    42cc:	d1 81       	ldd	r29, Z+1	; 0x01
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    42ce:	28 81       	ld	r18, Y
 */
static void _nand_gpio_write_cmd(struct nand_driver_data *nfd,
		const uint8_t command)
{
	_nand_gpio_write_io(nfd, command);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_cle);
    42d0:	ac 01       	movw	r20, r24
    42d2:	46 5b       	subi	r20, 0xB6	; 182
    42d4:	5f 4f       	sbci	r21, 0xFF	; 255
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    42d6:	da 01       	movw	r26, r20
    42d8:	3c 91       	ld	r19, X
    42da:	23 2b       	or	r18, r19
    42dc:	28 83       	st	Y, r18
static void _nand_gpio_write_cmd(struct nand_driver_data *nfd,
		const uint8_t command)
{
	_nand_gpio_write_io(nfd, command);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_cle);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);
    42de:	c0 81       	ld	r28, Z
    42e0:	d1 81       	ldd	r29, Z+1	; 0x01
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    42e2:	38 81       	ld	r19, Y
static void _nand_gpio_write_cmd(struct nand_driver_data *nfd,
		const uint8_t command)
{
	_nand_gpio_write_io(nfd, command);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_cle);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);
    42e4:	89 5b       	subi	r24, 0xB9	; 185
    42e6:	9f 4f       	sbci	r25, 0xFF	; 255
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    42e8:	dc 01       	movw	r26, r24
    42ea:	2c 91       	ld	r18, X
    42ec:	20 95       	com	r18
    42ee:	23 23       	and	r18, r19
    42f0:	28 83       	st	Y, r18
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_cle);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);

	//_delay_ns(t_wp);

	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);
    42f2:	c0 81       	ld	r28, Z
    42f4:	d1 81       	ldd	r29, Z+1	; 0x01
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    42f6:	28 81       	ld	r18, Y
    42f8:	8c 91       	ld	r24, X
    42fa:	28 2b       	or	r18, r24
    42fc:	28 83       	st	Y, r18

	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);

	//_delay_ns(t_alh);

	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_cle);
    42fe:	01 90       	ld	r0, Z+
    4300:	f0 81       	ld	r31, Z
    4302:	e0 2d       	mov	r30, r0
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4304:	90 81       	ld	r25, Z
    4306:	da 01       	movw	r26, r20
    4308:	8c 91       	ld	r24, X
    430a:	80 95       	com	r24
    430c:	89 23       	and	r24, r25
    430e:	80 83       	st	Z, r24
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);

	//_delay_ns(t_alh);

	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_cle);
}
    4310:	df 91       	pop	r29
    4312:	cf 91       	pop	r28
    4314:	08 95       	ret

00004316 <nand_gpio_write_addr>:
 *             holds all vital data about the NAND GPIO driver.
 *  \param addr 8 bit part of an address to write to the NAND flash device.
 */
static void nand_gpio_write_addr(struct nand_driver_data *nfd,
		const uint8_t addr)
{
    4316:	cf 93       	push	r28
    4318:	df 93       	push	r29
	else if ((cmd_status & 0x40) && (cmd_status & 0x01)) {
		return -EIO;
	}

	return 0;
}
    431a:	fc 01       	movw	r30, r24
    431c:	e1 5b       	subi	r30, 0xB1	; 177
    431e:	ff 4f       	sbci	r31, 0xFF	; 255
    4320:	01 90       	ld	r0, Z+
    4322:	f0 81       	ld	r31, Z
    4324:	e0 2d       	mov	r30, r0
 *  \param offset Offset from the base GPIO local bus address to write too.
 *  \param data Data to write to the offset address on the GPIO local bus.
 */
static inline void _nand_gpio_write_io(struct nand_driver_data *nfd, const uint8_t data)
{
	*(nfd->gpio_io_ddr) = 0xFF;
    4326:	2f ef       	ldi	r18, 0xFF	; 255
    4328:	20 83       	st	Z, r18
	*(nfd->gpio_io_port) = data;
    432a:	fc 01       	movw	r30, r24
    432c:	e5 5b       	subi	r30, 0xB5	; 181
    432e:	ff 4f       	sbci	r31, 0xFF	; 255
    4330:	01 90       	ld	r0, Z+
    4332:	f0 81       	ld	r31, Z
    4334:	e0 2d       	mov	r30, r0
    4336:	60 83       	st	Z, r22
		const uint8_t addr)
{
	_nand_gpio_write_io(nfd, addr);

	//gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);
    4338:	fc 01       	movw	r30, r24
    433a:	ef 5a       	subi	r30, 0xAF	; 175
    433c:	ff 4f       	sbci	r31, 0xFF	; 255
    433e:	c0 81       	ld	r28, Z
    4340:	d1 81       	ldd	r29, Z+1	; 0x01
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4342:	28 81       	ld	r18, Y
		const uint8_t addr)
{
	_nand_gpio_write_io(nfd, addr);

	//gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);
    4344:	dc 01       	movw	r26, r24
    4346:	a9 5b       	subi	r26, 0xB9	; 185
    4348:	bf 4f       	sbci	r27, 0xFF	; 255
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    434a:	8c 91       	ld	r24, X
    434c:	80 95       	com	r24
    434e:	82 23       	and	r24, r18
    4350:	88 83       	st	Y, r24
	//gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);

	//_delay_ns(t_als);

	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);
    4352:	01 90       	ld	r0, Z+
    4354:	f0 81       	ld	r31, Z
    4356:	e0 2d       	mov	r30, r0
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4358:	80 81       	ld	r24, Z
    435a:	9c 91       	ld	r25, X
    435c:	89 2b       	or	r24, r25
    435e:	80 83       	st	Z, r24
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);

	//_delay_ns(t_wh);

	//gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
}
    4360:	df 91       	pop	r29
    4362:	cf 91       	pop	r28
    4364:	08 95       	ret

00004366 <nand_gpio_wait_ready.clone.1>:
 *  \param nfd Pointer to the nand_driver_data struct which
 *             holds all vital data about the NAND GPIO driver.
 *
 *  \return 0 on success, an error number elsewise.
 */
static int32_t nand_gpio_wait_ready(struct nand_driver_data *nfd)
    4366:	0f 93       	push	r16
    4368:	1f 93       	push	r17
    436a:	df 93       	push	r29
    436c:	cf 93       	push	r28
    436e:	cd b7       	in	r28, 0x3d	; 61
    4370:	de b7       	in	r29, 0x3e	; 62
    4372:	28 97       	sbiw	r28, 0x08	; 8
    4374:	0f b6       	in	r0, 0x3f	; 63
    4376:	f8 94       	cli
    4378:	de bf       	out	0x3e, r29	; 62
    437a:	0f be       	out	0x3f, r0	; 63
    437c:	cd bf       	out	0x3d, r28	; 61
{
	/* Should be done within 3 milliseconds for all commands. */
	volatile uint64_t timeout = 0x200000; //approx. 3secs
    437e:	19 82       	std	Y+1, r1	; 0x01
    4380:	1a 82       	std	Y+2, r1	; 0x02
    4382:	20 e2       	ldi	r18, 0x20	; 32
    4384:	2b 83       	std	Y+3, r18	; 0x03
    4386:	1c 82       	std	Y+4, r1	; 0x04
    4388:	1d 82       	std	Y+5, r1	; 0x05
    438a:	1e 82       	std	Y+6, r1	; 0x06
    438c:	1f 82       	std	Y+7, r1	; 0x07
    438e:	18 86       	std	Y+8, r1	; 0x08

	while (timeout > 0) {
    4390:	29 81       	ldd	r18, Y+1	; 0x01
    4392:	ba 81       	ldd	r27, Y+2	; 0x02
    4394:	ab 81       	ldd	r26, Y+3	; 0x03
    4396:	fc 81       	ldd	r31, Y+4	; 0x04
    4398:	ed 81       	ldd	r30, Y+5	; 0x05
    439a:	5e 81       	ldd	r21, Y+6	; 0x06
    439c:	4f 81       	ldd	r20, Y+7	; 0x07
    439e:	38 85       	ldd	r19, Y+8	; 0x08
    43a0:	2b 2b       	or	r18, r27
    43a2:	2a 2b       	or	r18, r26
    43a4:	2f 2b       	or	r18, r31
    43a6:	2e 2b       	or	r18, r30
    43a8:	25 2b       	or	r18, r21
    43aa:	24 2b       	or	r18, r20
    43ac:	23 2b       	or	r18, r19
    43ae:	09 f4       	brne	.+2      	; 0x43b2 <nand_gpio_wait_ready.clone.1+0x4c>
    43b0:	82 c0       	rjmp	.+260    	; 0x44b6 <nand_gpio_wait_ready.clone.1+0x150>
		if (gpio_get_pin_value(nfd->gpio_cont_pin, nfd->gpio_rb)) return 0;
    43b2:	db 01       	movw	r26, r22
    43b4:	ed 91       	ld	r30, X+
    43b6:	fc 91       	ld	r31, X
    43b8:	dc 01       	movw	r26, r24
    43ba:	1c 91       	ld	r17, X
	*gpio_io_port |= pin;
}

static inline uint8_t gpio_get_pin_value(volatile uint8_t *gpio_io_pin, const uint8_t pin)
{
	return *gpio_io_pin & pin;
    43bc:	80 81       	ld	r24, Z
    43be:	81 23       	and	r24, r17
{
	/* Should be done within 3 milliseconds for all commands. */
	volatile uint64_t timeout = 0x200000; //approx. 3secs

	while (timeout > 0) {
		if (gpio_get_pin_value(nfd->gpio_cont_pin, nfd->gpio_rb)) return 0;
    43c0:	29 f0       	breq	.+10     	; 0x43cc <nand_gpio_wait_ready.clone.1+0x66>
    43c2:	8a c0       	rjmp	.+276    	; 0x44d8 <nand_gpio_wait_ready.clone.1+0x172>
	*gpio_io_port |= pin;
}

static inline uint8_t gpio_get_pin_value(volatile uint8_t *gpio_io_pin, const uint8_t pin)
{
	return *gpio_io_pin & pin;
    43c4:	80 81       	ld	r24, Z
    43c6:	81 23       	and	r24, r17
{
	/* Should be done within 3 milliseconds for all commands. */
	volatile uint64_t timeout = 0x200000; //approx. 3secs

	while (timeout > 0) {
		if (gpio_get_pin_value(nfd->gpio_cont_pin, nfd->gpio_rb)) return 0;
    43c8:	09 f0       	breq	.+2      	; 0x43cc <nand_gpio_wait_ready.clone.1+0x66>
    43ca:	86 c0       	rjmp	.+268    	; 0x44d8 <nand_gpio_wait_ready.clone.1+0x172>
		--timeout;
    43cc:	89 81       	ldd	r24, Y+1	; 0x01
    43ce:	2a 81       	ldd	r18, Y+2	; 0x02
    43d0:	7b 81       	ldd	r23, Y+3	; 0x03
    43d2:	6c 81       	ldd	r22, Y+4	; 0x04
    43d4:	5d 81       	ldd	r21, Y+5	; 0x05
    43d6:	3e 81       	ldd	r19, Y+6	; 0x06
    43d8:	4f 81       	ldd	r20, Y+7	; 0x07
    43da:	08 85       	ldd	r16, Y+8	; 0x08
    43dc:	b8 2f       	mov	r27, r24
    43de:	b1 50       	subi	r27, 0x01	; 1
    43e0:	a1 e0       	ldi	r26, 0x01	; 1
    43e2:	b8 17       	cp	r27, r24
    43e4:	08 f0       	brcs	.+2      	; 0x43e8 <nand_gpio_wait_ready.clone.1+0x82>
    43e6:	a0 e0       	ldi	r26, 0x00	; 0
    43e8:	92 2f       	mov	r25, r18
    43ea:	91 50       	subi	r25, 0x01	; 1
    43ec:	81 e0       	ldi	r24, 0x01	; 1
    43ee:	92 17       	cp	r25, r18
    43f0:	08 f0       	brcs	.+2      	; 0x43f4 <nand_gpio_wait_ready.clone.1+0x8e>
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	a9 0f       	add	r26, r25
    43f6:	21 e0       	ldi	r18, 0x01	; 1
    43f8:	a9 17       	cp	r26, r25
    43fa:	08 f0       	brcs	.+2      	; 0x43fe <nand_gpio_wait_ready.clone.1+0x98>
    43fc:	20 e0       	ldi	r18, 0x00	; 0
    43fe:	82 2b       	or	r24, r18
    4400:	27 2f       	mov	r18, r23
    4402:	21 50       	subi	r18, 0x01	; 1
    4404:	91 e0       	ldi	r25, 0x01	; 1
    4406:	27 17       	cp	r18, r23
    4408:	08 f0       	brcs	.+2      	; 0x440c <nand_gpio_wait_ready.clone.1+0xa6>
    440a:	90 e0       	ldi	r25, 0x00	; 0
    440c:	78 2f       	mov	r23, r24
    440e:	72 0f       	add	r23, r18
    4410:	81 e0       	ldi	r24, 0x01	; 1
    4412:	72 17       	cp	r23, r18
    4414:	08 f0       	brcs	.+2      	; 0x4418 <nand_gpio_wait_ready.clone.1+0xb2>
    4416:	80 e0       	ldi	r24, 0x00	; 0
    4418:	98 2b       	or	r25, r24
    441a:	26 2f       	mov	r18, r22
    441c:	21 50       	subi	r18, 0x01	; 1
    441e:	81 e0       	ldi	r24, 0x01	; 1
    4420:	26 17       	cp	r18, r22
    4422:	08 f0       	brcs	.+2      	; 0x4426 <nand_gpio_wait_ready.clone.1+0xc0>
    4424:	80 e0       	ldi	r24, 0x00	; 0
    4426:	69 2f       	mov	r22, r25
    4428:	62 0f       	add	r22, r18
    442a:	91 e0       	ldi	r25, 0x01	; 1
    442c:	62 17       	cp	r22, r18
    442e:	08 f0       	brcs	.+2      	; 0x4432 <nand_gpio_wait_ready.clone.1+0xcc>
    4430:	90 e0       	ldi	r25, 0x00	; 0
    4432:	89 2b       	or	r24, r25
    4434:	25 2f       	mov	r18, r21
    4436:	21 50       	subi	r18, 0x01	; 1
    4438:	91 e0       	ldi	r25, 0x01	; 1
    443a:	25 17       	cp	r18, r21
    443c:	08 f0       	brcs	.+2      	; 0x4440 <nand_gpio_wait_ready.clone.1+0xda>
    443e:	90 e0       	ldi	r25, 0x00	; 0
    4440:	58 2f       	mov	r21, r24
    4442:	52 0f       	add	r21, r18
    4444:	81 e0       	ldi	r24, 0x01	; 1
    4446:	52 17       	cp	r21, r18
    4448:	08 f0       	brcs	.+2      	; 0x444c <nand_gpio_wait_ready.clone.1+0xe6>
    444a:	80 e0       	ldi	r24, 0x00	; 0
    444c:	98 2b       	or	r25, r24
    444e:	23 2f       	mov	r18, r19
    4450:	21 50       	subi	r18, 0x01	; 1
    4452:	81 e0       	ldi	r24, 0x01	; 1
    4454:	23 17       	cp	r18, r19
    4456:	08 f0       	brcs	.+2      	; 0x445a <nand_gpio_wait_ready.clone.1+0xf4>
    4458:	80 e0       	ldi	r24, 0x00	; 0
    445a:	92 0f       	add	r25, r18
    445c:	31 e0       	ldi	r19, 0x01	; 1
    445e:	92 17       	cp	r25, r18
    4460:	08 f0       	brcs	.+2      	; 0x4464 <nand_gpio_wait_ready.clone.1+0xfe>
    4462:	30 e0       	ldi	r19, 0x00	; 0
    4464:	83 2b       	or	r24, r19
    4466:	34 2f       	mov	r19, r20
    4468:	31 50       	subi	r19, 0x01	; 1
    446a:	21 e0       	ldi	r18, 0x01	; 1
    446c:	34 17       	cp	r19, r20
    446e:	08 f0       	brcs	.+2      	; 0x4472 <nand_gpio_wait_ready.clone.1+0x10c>
    4470:	20 e0       	ldi	r18, 0x00	; 0
    4472:	48 2f       	mov	r20, r24
    4474:	43 0f       	add	r20, r19
    4476:	81 e0       	ldi	r24, 0x01	; 1
    4478:	43 17       	cp	r20, r19
    447a:	08 f0       	brcs	.+2      	; 0x447e <nand_gpio_wait_ready.clone.1+0x118>
    447c:	80 e0       	ldi	r24, 0x00	; 0
    447e:	28 2b       	or	r18, r24
    4480:	01 50       	subi	r16, 0x01	; 1
    4482:	20 0f       	add	r18, r16
    4484:	b9 83       	std	Y+1, r27	; 0x01
    4486:	aa 83       	std	Y+2, r26	; 0x02
    4488:	7b 83       	std	Y+3, r23	; 0x03
    448a:	6c 83       	std	Y+4, r22	; 0x04
    448c:	5d 83       	std	Y+5, r21	; 0x05
    448e:	9e 83       	std	Y+6, r25	; 0x06
    4490:	4f 83       	std	Y+7, r20	; 0x07
    4492:	28 87       	std	Y+8, r18	; 0x08
static int32_t nand_gpio_wait_ready(struct nand_driver_data *nfd)
{
	/* Should be done within 3 milliseconds for all commands. */
	volatile uint64_t timeout = 0x200000; //approx. 3secs

	while (timeout > 0) {
    4494:	89 81       	ldd	r24, Y+1	; 0x01
    4496:	7a 81       	ldd	r23, Y+2	; 0x02
    4498:	6b 81       	ldd	r22, Y+3	; 0x03
    449a:	5c 81       	ldd	r21, Y+4	; 0x04
    449c:	4d 81       	ldd	r20, Y+5	; 0x05
    449e:	3e 81       	ldd	r19, Y+6	; 0x06
    44a0:	2f 81       	ldd	r18, Y+7	; 0x07
    44a2:	98 85       	ldd	r25, Y+8	; 0x08
    44a4:	87 2b       	or	r24, r23
    44a6:	86 2b       	or	r24, r22
    44a8:	85 2b       	or	r24, r21
    44aa:	84 2b       	or	r24, r20
    44ac:	83 2b       	or	r24, r19
    44ae:	82 2b       	or	r24, r18
    44b0:	89 2b       	or	r24, r25
    44b2:	09 f0       	breq	.+2      	; 0x44b6 <nand_gpio_wait_ready.clone.1+0x150>
    44b4:	87 cf       	rjmp	.-242    	; 0x43c4 <nand_gpio_wait_ready.clone.1+0x5e>
		if (gpio_get_pin_value(nfd->gpio_cont_pin, nfd->gpio_rb)) return 0;
		--timeout;
	}

	return -ETIMEDOUT;
    44b6:	2c ef       	ldi	r18, 0xFC	; 252
    44b8:	3f ef       	ldi	r19, 0xFF	; 255
    44ba:	4f ef       	ldi	r20, 0xFF	; 255
    44bc:	5f ef       	ldi	r21, 0xFF	; 255
}
    44be:	b9 01       	movw	r22, r18
    44c0:	ca 01       	movw	r24, r20
    44c2:	28 96       	adiw	r28, 0x08	; 8
    44c4:	0f b6       	in	r0, 0x3f	; 63
    44c6:	f8 94       	cli
    44c8:	de bf       	out	0x3e, r29	; 62
    44ca:	0f be       	out	0x3f, r0	; 63
    44cc:	cd bf       	out	0x3d, r28	; 61
    44ce:	cf 91       	pop	r28
    44d0:	df 91       	pop	r29
    44d2:	1f 91       	pop	r17
    44d4:	0f 91       	pop	r16
    44d6:	08 95       	ret
{
	/* Should be done within 3 milliseconds for all commands. */
	volatile uint64_t timeout = 0x200000; //approx. 3secs

	while (timeout > 0) {
		if (gpio_get_pin_value(nfd->gpio_cont_pin, nfd->gpio_rb)) return 0;
    44d8:	20 e0       	ldi	r18, 0x00	; 0
    44da:	30 e0       	ldi	r19, 0x00	; 0
    44dc:	a9 01       	movw	r20, r18
    44de:	ef cf       	rjmp	.-34     	; 0x44be <nand_gpio_wait_ready.clone.1+0x158>

000044e0 <nand_gpio_write_cmd>:
 *  \return 0 on success, an error number elsewise.
 */
static int32_t nand_gpio_write_cmd(struct nand_driver_data *nfd,
		const uint8_t command, const uint64_t addr,
		const uint64_t offset)
{
    44e0:	2f 92       	push	r2
    44e2:	3f 92       	push	r3
    44e4:	4f 92       	push	r4
    44e6:	5f 92       	push	r5
    44e8:	6f 92       	push	r6
    44ea:	7f 92       	push	r7
    44ec:	8f 92       	push	r8
    44ee:	9f 92       	push	r9
    44f0:	af 92       	push	r10
    44f2:	bf 92       	push	r11
    44f4:	cf 92       	push	r12
    44f6:	df 92       	push	r13
    44f8:	ef 92       	push	r14
    44fa:	ff 92       	push	r15
    44fc:	0f 93       	push	r16
    44fe:	1f 93       	push	r17
    4500:	df 93       	push	r29
    4502:	cf 93       	push	r28
    4504:	cd b7       	in	r28, 0x3d	; 61
    4506:	de b7       	in	r29, 0x3e	; 62
    4508:	27 97       	sbiw	r28, 0x07	; 7
    450a:	0f b6       	in	r0, 0x3f	; 63
    450c:	f8 94       	cli
    450e:	de bf       	out	0x3e, r29	; 62
    4510:	0f be       	out	0x3f, r0	; 63
    4512:	cd bf       	out	0x3d, r28	; 61
    4514:	6c 01       	movw	r12, r24
    4516:	b6 2e       	mov	r11, r22
    4518:	a0 2e       	mov	r10, r16
    451a:	92 2e       	mov	r9, r18
    451c:	83 2e       	mov	r8, r19
    451e:	74 2e       	mov	r7, r20
    4520:	65 2e       	mov	r6, r21
    4522:	4c 8c       	ldd	r4, Y+28	; 0x1c
    4524:	0d 8d       	ldd	r16, Y+29	; 0x1d
    4526:	5e 8c       	ldd	r5, Y+30	; 0x1e
    4528:	3f 8c       	ldd	r3, Y+31	; 0x1f
    452a:	28 a0       	ldd	r2, Y+32	; 0x20
    452c:	79 a1       	ldd	r23, Y+33	; 0x21
    452e:	2a a1       	ldd	r18, Y+34	; 0x22
    4530:	29 83       	std	Y+1, r18	; 0x01
    4532:	3b a1       	ldd	r19, Y+35	; 0x23
    4534:	3a 83       	std	Y+2, r19	; 0x02
	int32_t retval = 0;

	switch (command) {
    4536:	65 30       	cpi	r22, 0x05	; 5
    4538:	09 f4       	brne	.+2      	; 0x453c <nand_gpio_write_cmd+0x5c>
    453a:	05 c1       	rjmp	.+522    	; 0x4746 <nand_gpio_write_cmd+0x266>
    453c:	66 30       	cpi	r22, 0x06	; 6
    453e:	08 f4       	brcc	.+2      	; 0x4542 <nand_gpio_write_cmd+0x62>
    4540:	41 c0       	rjmp	.+130    	; 0x45c4 <nand_gpio_write_cmd+0xe4>
    4542:	9b 2d       	mov	r25, r11
    4544:	97 30       	cpi	r25, 0x07	; 7
    4546:	09 f4       	brne	.+2      	; 0x454a <nand_gpio_write_cmd+0x6a>
    4548:	f5 c0       	rjmp	.+490    	; 0x4734 <nand_gpio_write_cmd+0x254>
    454a:	97 30       	cpi	r25, 0x07	; 7
    454c:	08 f0       	brcs	.+2      	; 0x4550 <nand_gpio_write_cmd+0x70>
    454e:	49 c0       	rjmp	.+146    	; 0x45e2 <nand_gpio_write_cmd+0x102>
		break;
	case NAND_CMD_PROGRAM:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_PAGEPROG1);
		break;
	case NAND_CMD_RANDOM_PROGRAM:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_RANDOM_PAGEPROG);
    4550:	c6 01       	movw	r24, r12
    4552:	65 e8       	ldi	r22, 0x85	; 133
    4554:	7f 83       	std	Y+7, r23	; 0x07
    4556:	a5 de       	rcall	.-694    	; 0x42a2 <_nand_gpio_write_cmd>
		break;
    4558:	7f 81       	ldd	r23, Y+7	; 0x07
	}

	/* From here the command is either
	 * NAND_CMD_READ, NAND_CMD_RANDOM_READ or NAND_CMD_PROGRAM.
	 */
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    455a:	21 e5       	ldi	r18, 0x51	; 81
    455c:	e2 2e       	mov	r14, r18
    455e:	f1 2c       	mov	r15, r1
    4560:	ec 0c       	add	r14, r12
    4562:	fd 1c       	adc	r15, r13
    4564:	d7 01       	movw	r26, r14
    4566:	ed 91       	ld	r30, X+
    4568:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    456a:	80 81       	ld	r24, Z
	}

	/* From here the command is either
	 * NAND_CMD_READ, NAND_CMD_RANDOM_READ or NAND_CMD_PROGRAM.
	 */
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    456c:	99 e4       	ldi	r25, 0x49	; 73
    456e:	89 2e       	mov	r8, r25
    4570:	91 2c       	mov	r9, r1
    4572:	8c 0c       	add	r8, r12
    4574:	9d 1c       	adc	r9, r13
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4576:	d4 01       	movw	r26, r8
    4578:	9c 91       	ld	r25, X
    457a:	89 2b       	or	r24, r25
    457c:	80 83       	st	Z, r24

	/* From here the command is either
	 * NAND_CMD_READ, NAND_CMD_RANDOM_READ or NAND_CMD_PROGRAM.
	 */
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
	nand_gpio_write_addr(nfd, (offset)      & 0xff);
    457e:	c6 01       	movw	r24, r12
    4580:	64 2d       	mov	r22, r4
    4582:	7f 83       	std	Y+7, r23	; 0x07
    4584:	c8 de       	rcall	.-624    	; 0x4316 <nand_gpio_write_addr>
	nand_gpio_write_addr(nfd, (offset >> 8) & 0xff);
    4586:	24 2d       	mov	r18, r4
    4588:	30 2f       	mov	r19, r16
    458a:	45 2d       	mov	r20, r5
    458c:	53 2d       	mov	r21, r3
    458e:	62 2d       	mov	r22, r2
    4590:	7f 81       	ldd	r23, Y+7	; 0x07
    4592:	89 81       	ldd	r24, Y+1	; 0x01
    4594:	9a 81       	ldd	r25, Y+2	; 0x02
    4596:	08 e0       	ldi	r16, 0x08	; 8
    4598:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    459c:	c6 01       	movw	r24, r12
    459e:	62 2f       	mov	r22, r18
    45a0:	ba de       	rcall	.-652    	; 0x4316 <nand_gpio_write_addr>
	if (command == NAND_CMD_READ || command == NAND_CMD_PROGRAM) {
		nand_gpio_write_addr(nfd, (addr)       & 0xff);
		nand_gpio_write_addr(nfd, (addr >> 8)  & 0xff);
		nand_gpio_write_addr(nfd, (addr >> 16) & 0xff);
	}
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    45a2:	d7 01       	movw	r26, r14
    45a4:	ed 91       	ld	r30, X+
    45a6:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    45a8:	90 81       	ld	r25, Z
    45aa:	d4 01       	movw	r26, r8
    45ac:	8c 91       	ld	r24, X
    45ae:	80 95       	com	r24
    45b0:	89 23       	and	r24, r25
    45b2:	80 83       	st	Z, r24
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);

	if (command == NAND_CMD_READ) {
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_READ2);
	}
	else if (command == NAND_CMD_RANDOM_READ) {
    45b4:	2b 2d       	mov	r18, r11
    45b6:	22 30       	cpi	r18, 0x02	; 2
    45b8:	09 f4       	brne	.+2      	; 0x45bc <nand_gpio_write_cmd+0xdc>
    45ba:	0d c1       	rjmp	.+538    	; 0x47d6 <nand_gpio_write_cmd+0x2f6>
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_RANDOM_READ2);
	} else {
		return retval;
    45bc:	20 e0       	ldi	r18, 0x00	; 0
    45be:	30 e0       	ldi	r19, 0x00	; 0
    45c0:	a9 01       	movw	r20, r18
    45c2:	19 c0       	rjmp	.+50     	; 0x45f6 <nand_gpio_write_cmd+0x116>
		const uint8_t command, const uint64_t addr,
		const uint64_t offset)
{
	int32_t retval = 0;

	switch (command) {
    45c4:	62 30       	cpi	r22, 0x02	; 2
    45c6:	09 f4       	brne	.+2      	; 0x45ca <nand_gpio_write_cmd+0xea>
    45c8:	b9 c0       	rjmp	.+370    	; 0x473c <nand_gpio_write_cmd+0x25c>
    45ca:	63 30       	cpi	r22, 0x03	; 3
    45cc:	78 f1       	brcs	.+94     	; 0x462c <nand_gpio_write_cmd+0x14c>
    45ce:	8b 2d       	mov	r24, r11
    45d0:	83 30       	cpi	r24, 0x03	; 3
    45d2:	09 f4       	brne	.+2      	; 0x45d6 <nand_gpio_write_cmd+0xf6>
    45d4:	8c c0       	rjmp	.+280    	; 0x46ee <nand_gpio_write_cmd+0x20e>
    45d6:	84 30       	cpi	r24, 0x04	; 4
    45d8:	51 f4       	brne	.+20     	; 0x45ee <nand_gpio_write_cmd+0x10e>
	case NAND_CMD_RESET:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_RESET);
    45da:	c6 01       	movw	r24, r12
    45dc:	6f ef       	ldi	r22, 0xFF	; 255
    45de:	61 de       	rcall	.-830    	; 0x42a2 <_nand_gpio_write_cmd>
    45e0:	7c c0       	rjmp	.+248    	; 0x46da <nand_gpio_write_cmd+0x1fa>
		const uint8_t command, const uint64_t addr,
		const uint64_t offset)
{
	int32_t retval = 0;

	switch (command) {
    45e2:	98 30       	cpi	r25, 0x08	; 8
    45e4:	09 f4       	brne	.+2      	; 0x45e8 <nand_gpio_write_cmd+0x108>
    45e6:	b8 c0       	rjmp	.+368    	; 0x4758 <nand_gpio_write_cmd+0x278>
    45e8:	99 30       	cpi	r25, 0x09	; 9
    45ea:	09 f4       	brne	.+2      	; 0x45ee <nand_gpio_write_cmd+0x10e>
    45ec:	ae c0       	rjmp	.+348    	; 0x474a <nand_gpio_write_cmd+0x26a>
		gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_ERASE2);
		retval = nand_gpio_wait_ready(nfd);
		return retval;
	default:
		return -EINVAL;
    45ee:	2d ef       	ldi	r18, 0xFD	; 253
    45f0:	3f ef       	ldi	r19, 0xFF	; 255
    45f2:	4f ef       	ldi	r20, 0xFF	; 255
    45f4:	5f ef       	ldi	r21, 0xFF	; 255
	} else {
		return retval;
	}

	return nand_gpio_wait_ready(nfd);
}
    45f6:	b9 01       	movw	r22, r18
    45f8:	ca 01       	movw	r24, r20
    45fa:	27 96       	adiw	r28, 0x07	; 7
    45fc:	0f b6       	in	r0, 0x3f	; 63
    45fe:	f8 94       	cli
    4600:	de bf       	out	0x3e, r29	; 62
    4602:	0f be       	out	0x3f, r0	; 63
    4604:	cd bf       	out	0x3d, r28	; 61
    4606:	cf 91       	pop	r28
    4608:	df 91       	pop	r29
    460a:	1f 91       	pop	r17
    460c:	0f 91       	pop	r16
    460e:	ff 90       	pop	r15
    4610:	ef 90       	pop	r14
    4612:	df 90       	pop	r13
    4614:	cf 90       	pop	r12
    4616:	bf 90       	pop	r11
    4618:	af 90       	pop	r10
    461a:	9f 90       	pop	r9
    461c:	8f 90       	pop	r8
    461e:	7f 90       	pop	r7
    4620:	6f 90       	pop	r6
    4622:	5f 90       	pop	r5
    4624:	4f 90       	pop	r4
    4626:	3f 90       	pop	r3
    4628:	2f 90       	pop	r2
    462a:	08 95       	ret
		const uint8_t command, const uint64_t addr,
		const uint64_t offset)
{
	int32_t retval = 0;

	switch (command) {
    462c:	61 30       	cpi	r22, 0x01	; 1
    462e:	f9 f6       	brne	.-66     	; 0x45ee <nand_gpio_write_cmd+0x10e>
		return retval;
	case NAND_CMD_STATUS:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_STATUS);
		return retval;
	case NAND_CMD_READ:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_READ1);
    4630:	60 e0       	ldi	r22, 0x00	; 0
		break;
	case NAND_CMD_RANDOM_READ:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_RANDOM_READ1);
		break;
	case NAND_CMD_PROGRAM:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_PAGEPROG1);
    4632:	7f 83       	std	Y+7, r23	; 0x07
    4634:	36 de       	rcall	.-916    	; 0x42a2 <_nand_gpio_write_cmd>
	}

	/* From here the command is either
	 * NAND_CMD_READ, NAND_CMD_RANDOM_READ or NAND_CMD_PROGRAM.
	 */
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    4636:	96 01       	movw	r18, r12
    4638:	2f 5a       	subi	r18, 0xAF	; 175
    463a:	3f 4f       	sbci	r19, 0xFF	; 255
    463c:	3e 83       	std	Y+6, r19	; 0x06
    463e:	2d 83       	std	Y+5, r18	; 0x05
    4640:	d9 01       	movw	r26, r18
    4642:	ed 91       	ld	r30, X+
    4644:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4646:	80 81       	ld	r24, Z
	}

	/* From here the command is either
	 * NAND_CMD_READ, NAND_CMD_RANDOM_READ or NAND_CMD_PROGRAM.
	 */
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    4648:	96 01       	movw	r18, r12
    464a:	27 5b       	subi	r18, 0xB7	; 183
    464c:	3f 4f       	sbci	r19, 0xFF	; 255
    464e:	3c 83       	std	Y+4, r19	; 0x04
    4650:	2b 83       	std	Y+3, r18	; 0x03
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4652:	d9 01       	movw	r26, r18
    4654:	9c 91       	ld	r25, X
    4656:	89 2b       	or	r24, r25
    4658:	80 83       	st	Z, r24

	/* From here the command is either
	 * NAND_CMD_READ, NAND_CMD_RANDOM_READ or NAND_CMD_PROGRAM.
	 */
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
	nand_gpio_write_addr(nfd, (offset)      & 0xff);
    465a:	c6 01       	movw	r24, r12
    465c:	64 2d       	mov	r22, r4
    465e:	5b de       	rcall	.-842    	; 0x4316 <nand_gpio_write_addr>
	nand_gpio_write_addr(nfd, (offset >> 8) & 0xff);
    4660:	24 2d       	mov	r18, r4
    4662:	30 2f       	mov	r19, r16
    4664:	45 2d       	mov	r20, r5
    4666:	53 2d       	mov	r21, r3
    4668:	62 2d       	mov	r22, r2
    466a:	7f 81       	ldd	r23, Y+7	; 0x07
    466c:	89 81       	ldd	r24, Y+1	; 0x01
    466e:	9a 81       	ldd	r25, Y+2	; 0x02
    4670:	08 e0       	ldi	r16, 0x08	; 8
    4672:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    4676:	c6 01       	movw	r24, r12
    4678:	62 2f       	mov	r22, r18
    467a:	4d de       	rcall	.-870    	; 0x4316 <nand_gpio_write_addr>
	if (command == NAND_CMD_READ || command == NAND_CMD_PROGRAM) {
		nand_gpio_write_addr(nfd, (addr)       & 0xff);
    467c:	c6 01       	movw	r24, r12
    467e:	6e 2d       	mov	r22, r14
    4680:	4a de       	rcall	.-876    	; 0x4316 <nand_gpio_write_addr>
		nand_gpio_write_addr(nfd, (addr >> 8)  & 0xff);
    4682:	97 01       	movw	r18, r14
    4684:	4a 2d       	mov	r20, r10
    4686:	51 2f       	mov	r21, r17
    4688:	69 2d       	mov	r22, r9
    468a:	78 2d       	mov	r23, r8
    468c:	87 2d       	mov	r24, r7
    468e:	96 2d       	mov	r25, r6
    4690:	08 e0       	ldi	r16, 0x08	; 8
    4692:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    4696:	c6 01       	movw	r24, r12
    4698:	62 2f       	mov	r22, r18
    469a:	3d de       	rcall	.-902    	; 0x4316 <nand_gpio_write_addr>
		nand_gpio_write_addr(nfd, (addr >> 16) & 0xff);
    469c:	97 01       	movw	r18, r14
    469e:	4a 2d       	mov	r20, r10
    46a0:	51 2f       	mov	r21, r17
    46a2:	69 2d       	mov	r22, r9
    46a4:	78 2d       	mov	r23, r8
    46a6:	87 2d       	mov	r24, r7
    46a8:	96 2d       	mov	r25, r6
    46aa:	00 e1       	ldi	r16, 0x10	; 16
    46ac:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    46b0:	c6 01       	movw	r24, r12
    46b2:	62 2f       	mov	r22, r18
    46b4:	30 de       	rcall	.-928    	; 0x4316 <nand_gpio_write_addr>
	}
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    46b6:	ad 81       	ldd	r26, Y+5	; 0x05
    46b8:	be 81       	ldd	r27, Y+6	; 0x06
    46ba:	ed 91       	ld	r30, X+
    46bc:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    46be:	90 81       	ld	r25, Z
    46c0:	ab 81       	ldd	r26, Y+3	; 0x03
    46c2:	bc 81       	ldd	r27, Y+4	; 0x04
    46c4:	8c 91       	ld	r24, X
    46c6:	80 95       	com	r24
    46c8:	89 23       	and	r24, r25
    46ca:	80 83       	st	Z, r24
		nand_gpio_write_addr(nfd, (addr >> 8)  & 0xff);
		nand_gpio_write_addr(nfd, (addr >> 16) & 0xff);
	}
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);

	if (command == NAND_CMD_READ) {
    46cc:	bb 2d       	mov	r27, r11
    46ce:	b1 30       	cpi	r27, 0x01	; 1
    46d0:	09 f0       	breq	.+2      	; 0x46d4 <nand_gpio_write_cmd+0x1f4>
    46d2:	70 cf       	rjmp	.-288    	; 0x45b4 <nand_gpio_write_cmd+0xd4>
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_READ2);
    46d4:	c6 01       	movw	r24, r12
    46d6:	60 e3       	ldi	r22, 0x30	; 48
    46d8:	e4 dd       	rcall	.-1080   	; 0x42a2 <_nand_gpio_write_cmd>
	else if ((cmd_status & 0x40) && (cmd_status & 0x01)) {
		return -EIO;
	}

	return 0;
}
    46da:	b6 01       	movw	r22, r12
    46dc:	6d 5a       	subi	r22, 0xAD	; 173
    46de:	7f 4f       	sbci	r23, 0xFF	; 255
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_RANDOM_READ2);
	} else {
		return retval;
	}

	return nand_gpio_wait_ready(nfd);
    46e0:	c6 01       	movw	r24, r12
    46e2:	8b 5b       	subi	r24, 0xBB	; 187
    46e4:	9f 4f       	sbci	r25, 0xFF	; 255
    46e6:	3f de       	rcall	.-898    	; 0x4366 <nand_gpio_wait_ready.clone.1>
    46e8:	9b 01       	movw	r18, r22
    46ea:	ac 01       	movw	r20, r24
    46ec:	84 cf       	rjmp	.-248    	; 0x45f6 <nand_gpio_write_cmd+0x116>
	case NAND_CMD_RESET:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_RESET);
		retval = nand_gpio_wait_ready(nfd);
		return retval;
	case NAND_CMD_ID:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_READID);
    46ee:	c6 01       	movw	r24, r12
    46f0:	60 e9       	ldi	r22, 0x90	; 144
    46f2:	d7 dd       	rcall	.-1106   	; 0x42a2 <_nand_gpio_write_cmd>
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    46f4:	86 01       	movw	r16, r12
    46f6:	0f 5a       	subi	r16, 0xAF	; 175
    46f8:	1f 4f       	sbci	r17, 0xFF	; 255
    46fa:	d8 01       	movw	r26, r16
    46fc:	ed 91       	ld	r30, X+
    46fe:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4700:	80 81       	ld	r24, Z
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_RESET);
		retval = nand_gpio_wait_ready(nfd);
		return retval;
	case NAND_CMD_ID:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_READID);
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    4702:	59 e4       	ldi	r21, 0x49	; 73
    4704:	e5 2e       	mov	r14, r21
    4706:	f1 2c       	mov	r15, r1
    4708:	ec 0c       	add	r14, r12
    470a:	fd 1c       	adc	r15, r13
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    470c:	d7 01       	movw	r26, r14
    470e:	9c 91       	ld	r25, X
    4710:	89 2b       	or	r24, r25
    4712:	80 83       	st	Z, r24
		retval = nand_gpio_wait_ready(nfd);
		return retval;
	case NAND_CMD_ID:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_READID);
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
		nand_gpio_write_addr(nfd, 0);
    4714:	c6 01       	movw	r24, r12
    4716:	60 e0       	ldi	r22, 0x00	; 0
    4718:	fe dd       	rcall	.-1028   	; 0x4316 <nand_gpio_write_addr>
		gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    471a:	d8 01       	movw	r26, r16
    471c:	ed 91       	ld	r30, X+
    471e:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4720:	90 81       	ld	r25, Z
    4722:	d7 01       	movw	r26, r14
    4724:	8c 91       	ld	r24, X
    4726:	80 95       	com	r24
    4728:	89 23       	and	r24, r25
    472a:	80 83       	st	Z, r24
	case NAND_CMD_ID:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_READID);
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
		nand_gpio_write_addr(nfd, 0);
		gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
		return retval;
    472c:	20 e0       	ldi	r18, 0x00	; 0
    472e:	30 e0       	ldi	r19, 0x00	; 0
    4730:	a9 01       	movw	r20, r18
    4732:	61 cf       	rjmp	.-318    	; 0x45f6 <nand_gpio_write_cmd+0x116>
		break;
	case NAND_CMD_RANDOM_PROGRAM:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_RANDOM_PAGEPROG);
		break;
	case NAND_CMD_PROGRAM_COMPLETE:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_PAGEPROG2);
    4734:	c6 01       	movw	r24, r12
    4736:	60 e1       	ldi	r22, 0x10	; 16
    4738:	b4 dd       	rcall	.-1176   	; 0x42a2 <_nand_gpio_write_cmd>
    473a:	cf cf       	rjmp	.-98     	; 0x46da <nand_gpio_write_cmd+0x1fa>
		return retval;
	case NAND_CMD_READ:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_READ1);
		break;
	case NAND_CMD_RANDOM_READ:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_RANDOM_READ1);
    473c:	65 e0       	ldi	r22, 0x05	; 5
    473e:	7f 83       	std	Y+7, r23	; 0x07
    4740:	b0 dd       	rcall	.-1184   	; 0x42a2 <_nand_gpio_write_cmd>
		break;
    4742:	7f 81       	ldd	r23, Y+7	; 0x07
    4744:	0a cf       	rjmp	.-492    	; 0x455a <nand_gpio_write_cmd+0x7a>
	case NAND_CMD_PROGRAM:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_PAGEPROG1);
    4746:	60 e8       	ldi	r22, 0x80	; 128
    4748:	74 cf       	rjmp	.-280    	; 0x4632 <nand_gpio_write_cmd+0x152>
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
		nand_gpio_write_addr(nfd, 0);
		gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
		return retval;
	case NAND_CMD_STATUS:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_STATUS);
    474a:	c6 01       	movw	r24, r12
    474c:	60 e7       	ldi	r22, 0x70	; 112
    474e:	a9 dd       	rcall	.-1198   	; 0x42a2 <_nand_gpio_write_cmd>
		return retval;
    4750:	20 e0       	ldi	r18, 0x00	; 0
    4752:	30 e0       	ldi	r19, 0x00	; 0
    4754:	a9 01       	movw	r20, r18
    4756:	4f cf       	rjmp	.-354    	; 0x45f6 <nand_gpio_write_cmd+0x116>
	case NAND_CMD_PROGRAM_COMPLETE:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_PAGEPROG2);
		retval = nand_gpio_wait_ready(nfd);
		return retval;
	case NAND_CMD_ERASE:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_ERASE1);
    4758:	c6 01       	movw	r24, r12
    475a:	60 e6       	ldi	r22, 0x60	; 96
    475c:	a2 dd       	rcall	.-1212   	; 0x42a2 <_nand_gpio_write_cmd>
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    475e:	41 e5       	ldi	r20, 0x51	; 81
    4760:	44 2e       	mov	r4, r20
    4762:	51 2c       	mov	r5, r1
    4764:	4c 0c       	add	r4, r12
    4766:	5d 1c       	adc	r5, r13
    4768:	d2 01       	movw	r26, r4
    476a:	ed 91       	ld	r30, X+
    476c:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    476e:	80 81       	ld	r24, Z
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_PAGEPROG2);
		retval = nand_gpio_wait_ready(nfd);
		return retval;
	case NAND_CMD_ERASE:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_ERASE1);
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    4770:	39 e4       	ldi	r19, 0x49	; 73
    4772:	23 2e       	mov	r2, r19
    4774:	31 2c       	mov	r3, r1
    4776:	2c 0c       	add	r2, r12
    4778:	3d 1c       	adc	r3, r13
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    477a:	d1 01       	movw	r26, r2
    477c:	9c 91       	ld	r25, X
    477e:	89 2b       	or	r24, r25
    4780:	80 83       	st	Z, r24
		retval = nand_gpio_wait_ready(nfd);
		return retval;
	case NAND_CMD_ERASE:
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_ERASE1);
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
		nand_gpio_write_addr(nfd, (addr)       & 0xff);
    4782:	c6 01       	movw	r24, r12
    4784:	6e 2d       	mov	r22, r14
    4786:	c7 dd       	rcall	.-1138   	; 0x4316 <nand_gpio_write_addr>
		nand_gpio_write_addr(nfd, (addr >> 8)  & 0xff);
    4788:	97 01       	movw	r18, r14
    478a:	4a 2d       	mov	r20, r10
    478c:	51 2f       	mov	r21, r17
    478e:	69 2d       	mov	r22, r9
    4790:	78 2d       	mov	r23, r8
    4792:	87 2d       	mov	r24, r7
    4794:	96 2d       	mov	r25, r6
    4796:	08 e0       	ldi	r16, 0x08	; 8
    4798:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    479c:	c6 01       	movw	r24, r12
    479e:	62 2f       	mov	r22, r18
    47a0:	ba dd       	rcall	.-1164   	; 0x4316 <nand_gpio_write_addr>
		nand_gpio_write_addr(nfd, (addr >> 16) & 0xff);
    47a2:	97 01       	movw	r18, r14
    47a4:	4a 2d       	mov	r20, r10
    47a6:	51 2f       	mov	r21, r17
    47a8:	69 2d       	mov	r22, r9
    47aa:	78 2d       	mov	r23, r8
    47ac:	87 2d       	mov	r24, r7
    47ae:	96 2d       	mov	r25, r6
    47b0:	00 e1       	ldi	r16, 0x10	; 16
    47b2:	0e 94 9d 01 	call	0x33a	; 0x33a <__lshrdi3>
    47b6:	c6 01       	movw	r24, r12
    47b8:	62 2f       	mov	r22, r18
    47ba:	ad dd       	rcall	.-1190   	; 0x4316 <nand_gpio_write_addr>
		gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    47bc:	d2 01       	movw	r26, r4
    47be:	ed 91       	ld	r30, X+
    47c0:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    47c2:	90 81       	ld	r25, Z
    47c4:	d1 01       	movw	r26, r2
    47c6:	8c 91       	ld	r24, X
    47c8:	80 95       	com	r24
    47ca:	89 23       	and	r24, r25
    47cc:	80 83       	st	Z, r24
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
		nand_gpio_write_addr(nfd, (addr)       & 0xff);
		nand_gpio_write_addr(nfd, (addr >> 8)  & 0xff);
		nand_gpio_write_addr(nfd, (addr >> 16) & 0xff);
		gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_ERASE2);
    47ce:	c6 01       	movw	r24, r12
    47d0:	60 ed       	ldi	r22, 0xD0	; 208
    47d2:	67 dd       	rcall	.-1330   	; 0x42a2 <_nand_gpio_write_cmd>
    47d4:	82 cf       	rjmp	.-252    	; 0x46da <nand_gpio_write_cmd+0x1fa>

	if (command == NAND_CMD_READ) {
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_READ2);
	}
	else if (command == NAND_CMD_RANDOM_READ) {
		_nand_gpio_write_cmd(nfd, NAND_COMMAND_RANDOM_READ2);
    47d6:	c6 01       	movw	r24, r12
    47d8:	60 ee       	ldi	r22, 0xE0	; 224
    47da:	63 dd       	rcall	.-1338   	; 0x42a2 <_nand_gpio_write_cmd>
    47dc:	7e cf       	rjmp	.-260    	; 0x46da <nand_gpio_write_cmd+0x1fa>

000047de <nand_gpio_init>:
 *             holds all vital data about the NAND GPIO driver.
 *
 *  \return 0 on success, an error number elsewise.
 */
int32_t nand_gpio_init(struct nand_driver_data *nfd)
{
    47de:	2f 92       	push	r2
    47e0:	3f 92       	push	r3
    47e2:	4f 92       	push	r4
    47e4:	5f 92       	push	r5
    47e6:	6f 92       	push	r6
    47e8:	7f 92       	push	r7
    47ea:	8f 92       	push	r8
    47ec:	9f 92       	push	r9
    47ee:	af 92       	push	r10
    47f0:	bf 92       	push	r11
    47f2:	cf 92       	push	r12
    47f4:	df 92       	push	r13
    47f6:	ef 92       	push	r14
    47f8:	ff 92       	push	r15
    47fa:	0f 93       	push	r16
    47fc:	1f 93       	push	r17
    47fe:	df 93       	push	r29
    4800:	cf 93       	push	r28
    4802:	cd b7       	in	r28, 0x3d	; 61
    4804:	de b7       	in	r29, 0x3e	; 62
    4806:	2c 97       	sbiw	r28, 0x0c	; 12
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	f8 94       	cli
    480c:	de bf       	out	0x3e, r29	; 62
    480e:	0f be       	out	0x3f, r0	; 63
    4810:	cd bf       	out	0x3d, r28	; 61
    4812:	9a 83       	std	Y+2, r25	; 0x02
    4814:	89 83       	std	Y+1, r24	; 0x01
	//int32_t i;
	int32_t retval;

	/* Configure GPIO for NAND device */
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ce);
    4816:	fc 01       	movw	r30, r24
    4818:	eb 5a       	subi	r30, 0xAB	; 171
    481a:	ff 4f       	sbci	r31, 0xFF	; 255
    481c:	40 81       	ld	r20, Z
    481e:	51 81       	ldd	r21, Z+1	; 0x01
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    4820:	da 01       	movw	r26, r20
    4822:	2c 91       	ld	r18, X
{
	//int32_t i;
	int32_t retval;

	/* Configure GPIO for NAND device */
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ce);
    4824:	8c 5b       	subi	r24, 0xBC	; 188
    4826:	9f 4f       	sbci	r25, 0xFF	; 255
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    4828:	dc 01       	movw	r26, r24
    482a:	3c 91       	ld	r19, X
    482c:	23 2b       	or	r18, r19
    482e:	da 01       	movw	r26, r20
    4830:	2c 93       	st	X, r18
	//int32_t i;
	int32_t retval;

	/* Configure GPIO for NAND device */
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ce);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
    4832:	a9 80       	ldd	r10, Y+1	; 0x01
    4834:	ba 80       	ldd	r11, Y+2	; 0x02
    4836:	71 e5       	ldi	r23, 0x51	; 81
    4838:	e7 2e       	mov	r14, r23
    483a:	f1 2c       	mov	r15, r1
    483c:	ae 0c       	add	r10, r14
    483e:	bf 1c       	adc	r11, r15
    4840:	d5 01       	movw	r26, r10
    4842:	4d 91       	ld	r20, X+
    4844:	5c 91       	ld	r21, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4846:	da 01       	movw	r26, r20
    4848:	2c 91       	ld	r18, X
    484a:	dc 01       	movw	r26, r24
    484c:	8c 91       	ld	r24, X
    484e:	80 95       	com	r24
    4850:	82 23       	and	r24, r18
    4852:	da 01       	movw	r26, r20
    4854:	8c 93       	st	X, r24

	/* Configure GPIO for NAND device */
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ce);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
	
	gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_rb);
    4856:	40 81       	ld	r20, Z
    4858:	51 81       	ldd	r21, Z+1	; 0x01
	*gpio_io_ddr |= pin;
}

static inline void gpio_enable_pin_input(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr &= ~pin;
    485a:	da 01       	movw	r26, r20
    485c:	3c 91       	ld	r19, X

	/* Configure GPIO for NAND device */
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ce);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
	
	gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_rb);
    485e:	89 81       	ldd	r24, Y+1	; 0x01
    4860:	9a 81       	ldd	r25, Y+2	; 0x02
    4862:	8b 5b       	subi	r24, 0xBB	; 187
    4864:	9f 4f       	sbci	r25, 0xFF	; 255
	*gpio_io_ddr |= pin;
}

static inline void gpio_enable_pin_input(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr &= ~pin;
    4866:	dc 01       	movw	r26, r24
    4868:	2c 91       	ld	r18, X
    486a:	20 95       	com	r18
    486c:	23 23       	and	r18, r19
    486e:	da 01       	movw	r26, r20
    4870:	2c 93       	st	X, r18
	/* Configure GPIO for NAND device */
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ce);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
	
	gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_rb);
	gpio_enable_pin_pull_up(nfd->gpio_cont_port, nfd->gpio_rb);
    4872:	d5 01       	movw	r26, r10
    4874:	4d 91       	ld	r20, X+
    4876:	5c 91       	ld	r21, X
	*gpio_io_ddr &= ~pin;
}

static inline void gpio_enable_pin_pull_up(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4878:	da 01       	movw	r26, r20
    487a:	2c 91       	ld	r18, X
    487c:	dc 01       	movw	r26, r24
    487e:	8c 91       	ld	r24, X
    4880:	28 2b       	or	r18, r24
    4882:	da 01       	movw	r26, r20
    4884:	2c 93       	st	X, r18
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ce);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
	
	gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_rb);
	gpio_enable_pin_pull_up(nfd->gpio_cont_port, nfd->gpio_rb);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_re);
    4886:	40 81       	ld	r20, Z
    4888:	51 81       	ldd	r21, Z+1	; 0x01
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    488a:	da 01       	movw	r26, r20
    488c:	8c 91       	ld	r24, X
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ce);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
	
	gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_rb);
	gpio_enable_pin_pull_up(nfd->gpio_cont_port, nfd->gpio_rb);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_re);
    488e:	29 80       	ldd	r2, Y+1	; 0x01
    4890:	3a 80       	ldd	r3, Y+2	; 0x02
    4892:	66 e4       	ldi	r22, 0x46	; 70
    4894:	e6 2e       	mov	r14, r22
    4896:	f1 2c       	mov	r15, r1
    4898:	2e 0c       	add	r2, r14
    489a:	3f 1c       	adc	r3, r15
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    489c:	d1 01       	movw	r26, r2
    489e:	9c 91       	ld	r25, X
    48a0:	89 2b       	or	r24, r25
    48a2:	da 01       	movw	r26, r20
    48a4:	8c 93       	st	X, r24
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
	
	gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_rb);
	gpio_enable_pin_pull_up(nfd->gpio_cont_port, nfd->gpio_rb);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_re);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    48a6:	d5 01       	movw	r26, r10
    48a8:	2d 91       	ld	r18, X+
    48aa:	3c 91       	ld	r19, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    48ac:	d9 01       	movw	r26, r18
    48ae:	8c 91       	ld	r24, X
    48b0:	d1 01       	movw	r26, r2
    48b2:	9c 91       	ld	r25, X
    48b4:	89 2b       	or	r24, r25
    48b6:	d9 01       	movw	r26, r18
    48b8:	8c 93       	st	X, r24
	
	gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_rb);
	gpio_enable_pin_pull_up(nfd->gpio_cont_port, nfd->gpio_rb);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_re);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_we);
    48ba:	40 81       	ld	r20, Z
    48bc:	51 81       	ldd	r21, Z+1	; 0x01
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    48be:	da 01       	movw	r26, r20
    48c0:	2c 91       	ld	r18, X
	
	gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_rb);
	gpio_enable_pin_pull_up(nfd->gpio_cont_port, nfd->gpio_rb);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_re);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_we);
    48c2:	89 81       	ldd	r24, Y+1	; 0x01
    48c4:	9a 81       	ldd	r25, Y+2	; 0x02
    48c6:	89 5b       	subi	r24, 0xB9	; 185
    48c8:	9f 4f       	sbci	r25, 0xFF	; 255
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    48ca:	dc 01       	movw	r26, r24
    48cc:	3c 91       	ld	r19, X
    48ce:	23 2b       	or	r18, r19
    48d0:	da 01       	movw	r26, r20
    48d2:	2c 93       	st	X, r18
	gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_rb);
	gpio_enable_pin_pull_up(nfd->gpio_cont_port, nfd->gpio_rb);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_re);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_we);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);
    48d4:	d5 01       	movw	r26, r10
    48d6:	4d 91       	ld	r20, X+
    48d8:	5c 91       	ld	r21, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    48da:	da 01       	movw	r26, r20
    48dc:	2c 91       	ld	r18, X
    48de:	dc 01       	movw	r26, r24
    48e0:	8c 91       	ld	r24, X
    48e2:	28 2b       	or	r18, r24
    48e4:	da 01       	movw	r26, r20
    48e6:	2c 93       	st	X, r18
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_we);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);

	if (nfd->gpio_wp >= 0) {
		gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_wp);
    48e8:	40 81       	ld	r20, Z
    48ea:	51 81       	ldd	r21, Z+1	; 0x01
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    48ec:	da 01       	movw	r26, r20
    48ee:	2c 91       	ld	r18, X
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_we);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);

	if (nfd->gpio_wp >= 0) {
		gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_wp);
    48f0:	89 81       	ldd	r24, Y+1	; 0x01
    48f2:	9a 81       	ldd	r25, Y+2	; 0x02
    48f4:	88 5b       	subi	r24, 0xB8	; 184
    48f6:	9f 4f       	sbci	r25, 0xFF	; 255
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    48f8:	dc 01       	movw	r26, r24
    48fa:	3c 91       	ld	r19, X
    48fc:	23 2b       	or	r18, r19
    48fe:	da 01       	movw	r26, r20
    4900:	2c 93       	st	X, r18
	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_we);
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_we);

	if (nfd->gpio_wp >= 0) {
		gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_wp);
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_wp);
    4902:	d5 01       	movw	r26, r10
    4904:	4d 91       	ld	r20, X+
    4906:	5c 91       	ld	r21, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4908:	da 01       	movw	r26, r20
    490a:	2c 91       	ld	r18, X
    490c:	dc 01       	movw	r26, r24
    490e:	8c 91       	ld	r24, X
    4910:	28 2b       	or	r18, r24
    4912:	da 01       	movw	r26, r20
    4914:	2c 93       	st	X, r18
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_wp);
		//gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_wp);
		//gpio_disable_pin_pull_up(nfd->gpio_cont_port, nfd->gpio_wp);
	}

	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ale);
    4916:	40 81       	ld	r20, Z
    4918:	51 81       	ldd	r21, Z+1	; 0x01
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    491a:	da 01       	movw	r26, r20
    491c:	2c 91       	ld	r18, X
		gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_wp);
		//gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_wp);
		//gpio_disable_pin_pull_up(nfd->gpio_cont_port, nfd->gpio_wp);
	}

	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ale);
    491e:	89 81       	ldd	r24, Y+1	; 0x01
    4920:	9a 81       	ldd	r25, Y+2	; 0x02
    4922:	87 5b       	subi	r24, 0xB7	; 183
    4924:	9f 4f       	sbci	r25, 0xFF	; 255
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    4926:	dc 01       	movw	r26, r24
    4928:	3c 91       	ld	r19, X
    492a:	23 2b       	or	r18, r19
    492c:	da 01       	movw	r26, r20
    492e:	2c 93       	st	X, r18
		//gpio_enable_pin_input(nfd->gpio_cont_ddr, nfd->gpio_wp);
		//gpio_disable_pin_pull_up(nfd->gpio_cont_port, nfd->gpio_wp);
	}

	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ale);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);
    4930:	d5 01       	movw	r26, r10
    4932:	4d 91       	ld	r20, X+
    4934:	5c 91       	ld	r21, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4936:	da 01       	movw	r26, r20
    4938:	2c 91       	ld	r18, X
    493a:	dc 01       	movw	r26, r24
    493c:	8c 91       	ld	r24, X
    493e:	80 95       	com	r24
    4940:	82 23       	and	r24, r18
    4942:	da 01       	movw	r26, r20
    4944:	8c 93       	st	X, r24
	}

	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ale);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);

	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_cle);
    4946:	20 81       	ld	r18, Z
    4948:	31 81       	ldd	r19, Z+1	; 0x01
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    494a:	f9 01       	movw	r30, r18
    494c:	80 81       	ld	r24, Z
	}

	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ale);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);

	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_cle);
    494e:	a9 81       	ldd	r26, Y+1	; 0x01
    4950:	ba 81       	ldd	r27, Y+2	; 0x02
    4952:	a6 5b       	subi	r26, 0xB6	; 182
    4954:	bf 4f       	sbci	r27, 0xFF	; 255
	*(nfd->gpio_io_port) = data;
}

static inline void gpio_enable_pin_output(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr |= pin;
    4956:	9c 91       	ld	r25, X
    4958:	89 2b       	or	r24, r25
    495a:	80 83       	st	Z, r24

	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_ale);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ale);

	gpio_enable_pin_output(nfd->gpio_cont_ddr, nfd->gpio_cle);
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_cle);
    495c:	f5 01       	movw	r30, r10
    495e:	20 81       	ld	r18, Z
    4960:	31 81       	ldd	r19, Z+1	; 0x01
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4962:	f9 01       	movw	r30, r18
    4964:	90 81       	ld	r25, Z
    4966:	8c 91       	ld	r24, X
    4968:	80 95       	com	r24
    496a:	89 23       	and	r24, r25
    496c:	80 83       	st	Z, r24
{
#ifndef NAND_CE_ALWAYS_ACTIVE
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
#endif

	if (nand_gpio_write_cmd(nfd, NAND_CMD_RESET, 0, 0)) {
    496e:	0d b7       	in	r16, 0x3d	; 61
    4970:	1e b7       	in	r17, 0x3e	; 62
    4972:	08 50       	subi	r16, 0x08	; 8
    4974:	10 40       	sbci	r17, 0x00	; 0
    4976:	0f b6       	in	r0, 0x3f	; 63
    4978:	f8 94       	cli
    497a:	1e bf       	out	0x3e, r17	; 62
    497c:	0f be       	out	0x3f, r0	; 63
    497e:	0d bf       	out	0x3d, r16	; 61
    4980:	ed b7       	in	r30, 0x3d	; 61
    4982:	fe b7       	in	r31, 0x3e	; 62
    4984:	31 96       	adiw	r30, 0x01	; 1
    4986:	ad b7       	in	r26, 0x3d	; 61
    4988:	be b7       	in	r27, 0x3e	; 62
    498a:	11 96       	adiw	r26, 0x01	; 1
    498c:	1c 92       	st	X, r1
    498e:	11 82       	std	Z+1, r1	; 0x01
    4990:	12 82       	std	Z+2, r1	; 0x02
    4992:	13 82       	std	Z+3, r1	; 0x03
    4994:	14 82       	std	Z+4, r1	; 0x04
    4996:	15 82       	std	Z+5, r1	; 0x05
    4998:	16 82       	std	Z+6, r1	; 0x06
    499a:	17 82       	std	Z+7, r1	; 0x07
    499c:	89 81       	ldd	r24, Y+1	; 0x01
    499e:	9a 81       	ldd	r25, Y+2	; 0x02
    49a0:	64 e0       	ldi	r22, 0x04	; 4
    49a2:	ee 24       	eor	r14, r14
    49a4:	ff 24       	eor	r15, r15
    49a6:	00 e0       	ldi	r16, 0x00	; 0
    49a8:	10 e0       	ldi	r17, 0x00	; 0
    49aa:	20 e0       	ldi	r18, 0x00	; 0
    49ac:	30 e0       	ldi	r19, 0x00	; 0
    49ae:	40 e0       	ldi	r20, 0x00	; 0
    49b0:	50 e0       	ldi	r21, 0x00	; 0
    49b2:	96 dd       	rcall	.-1236   	; 0x44e0 <nand_gpio_write_cmd>
    49b4:	ed b7       	in	r30, 0x3d	; 61
    49b6:	fe b7       	in	r31, 0x3e	; 62
    49b8:	38 96       	adiw	r30, 0x08	; 8
    49ba:	0f b6       	in	r0, 0x3f	; 63
    49bc:	f8 94       	cli
    49be:	fe bf       	out	0x3e, r31	; 62
    49c0:	0f be       	out	0x3f, r0	; 63
    49c2:	ed bf       	out	0x3d, r30	; 61
    49c4:	61 15       	cp	r22, r1
    49c6:	71 05       	cpc	r23, r1
    49c8:	81 05       	cpc	r24, r1
    49ca:	91 05       	cpc	r25, r1
    49cc:	09 f0       	breq	.+2      	; 0x49d0 <nand_gpio_init+0x1f2>
    49ce:	6d c1       	rjmp	.+730    	; 0x4caa <nand_gpio_init+0x4cc>

#ifndef NAND_CE_ALWAYS_ACTIVE
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
#endif

	nand_gpio_write_cmd(nfd, NAND_CMD_ID, 0, 0);
    49d0:	ed b7       	in	r30, 0x3d	; 61
    49d2:	fe b7       	in	r31, 0x3e	; 62
    49d4:	38 97       	sbiw	r30, 0x08	; 8
    49d6:	0f b6       	in	r0, 0x3f	; 63
    49d8:	f8 94       	cli
    49da:	fe bf       	out	0x3e, r31	; 62
    49dc:	0f be       	out	0x3f, r0	; 63
    49de:	ed bf       	out	0x3d, r30	; 61
    49e0:	31 96       	adiw	r30, 0x01	; 1
    49e2:	ad b7       	in	r26, 0x3d	; 61
    49e4:	be b7       	in	r27, 0x3e	; 62
    49e6:	11 96       	adiw	r26, 0x01	; 1
    49e8:	1c 92       	st	X, r1
    49ea:	11 82       	std	Z+1, r1	; 0x01
    49ec:	12 82       	std	Z+2, r1	; 0x02
    49ee:	13 82       	std	Z+3, r1	; 0x03
    49f0:	14 82       	std	Z+4, r1	; 0x04
    49f2:	15 82       	std	Z+5, r1	; 0x05
    49f4:	16 82       	std	Z+6, r1	; 0x06
    49f6:	17 82       	std	Z+7, r1	; 0x07
    49f8:	89 81       	ldd	r24, Y+1	; 0x01
    49fa:	9a 81       	ldd	r25, Y+2	; 0x02
    49fc:	63 e0       	ldi	r22, 0x03	; 3
    49fe:	ee 24       	eor	r14, r14
    4a00:	ff 24       	eor	r15, r15
    4a02:	00 e0       	ldi	r16, 0x00	; 0
    4a04:	10 e0       	ldi	r17, 0x00	; 0
    4a06:	20 e0       	ldi	r18, 0x00	; 0
    4a08:	30 e0       	ldi	r19, 0x00	; 0
    4a0a:	40 e0       	ldi	r20, 0x00	; 0
    4a0c:	50 e0       	ldi	r21, 0x00	; 0
    4a0e:	68 dd       	rcall	.-1328   	; 0x44e0 <nand_gpio_write_cmd>
	/* Set GPIO I/O port in input mode. */
	//gpio_enable_pin_input(nfd->gpio_io_ddr, 0xFF);
	//gpio_disable_pin_pull_up(nfd->gpio_io_port, 0xFF);

	/* Set GPIO I/O port in input mode. */
	gpio_enable_pin_input(nfd->gpio_io_ddr, 0xFF);
    4a10:	e9 81       	ldd	r30, Y+1	; 0x01
    4a12:	fa 81       	ldd	r31, Y+2	; 0x02
    4a14:	e1 5b       	subi	r30, 0xB1	; 177
    4a16:	ff 4f       	sbci	r31, 0xFF	; 255
    4a18:	01 90       	ld	r0, Z+
    4a1a:	f0 81       	ld	r31, Z
    4a1c:	e0 2d       	mov	r30, r0
	*gpio_io_ddr |= pin;
}

static inline void gpio_enable_pin_input(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr &= ~pin;
    4a1e:	80 81       	ld	r24, Z
    4a20:	10 82       	st	Z, r1
	//gpio_enable_pin_input(nfd->gpio_io_ddr, 0xFF);
	//gpio_disable_pin_pull_up(nfd->gpio_io_port, 0xFF);

	/* Set GPIO I/O port in input mode. */
	gpio_enable_pin_input(nfd->gpio_io_ddr, 0xFF);
	gpio_enable_pin_pull_up(nfd->gpio_io_port, 0xFF);
    4a22:	e9 81       	ldd	r30, Y+1	; 0x01
    4a24:	fa 81       	ldd	r31, Y+2	; 0x02
    4a26:	e5 5b       	subi	r30, 0xB5	; 181
    4a28:	ff 4f       	sbci	r31, 0xFF	; 255
    4a2a:	01 90       	ld	r0, Z+
    4a2c:	f0 81       	ld	r31, Z
    4a2e:	e0 2d       	mov	r30, r0
	*gpio_io_ddr &= ~pin;
}

static inline void gpio_enable_pin_pull_up(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4a30:	80 81       	ld	r24, Z
    4a32:	8f ef       	ldi	r24, 0xFF	; 255
    4a34:	80 83       	st	Z, r24
 */
static inline uint8_t
nand_gpio_read_io(const struct nand_driver_data *nfd)
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    4a36:	d5 01       	movw	r26, r10
    4a38:	ed 91       	ld	r30, X+
    4a3a:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4a3c:	90 81       	ld	r25, Z
    4a3e:	d1 01       	movw	r26, r2
    4a40:	8c 91       	ld	r24, X
    4a42:	80 95       	com	r24
    4a44:	89 23       	and	r24, r25
    4a46:	80 83       	st	Z, r24
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    4a48:	00 00       	nop
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	_delay_ns(t_rc);
	
	byte = *(nfd->gpio_io_pin);
    4a4a:	e9 81       	ldd	r30, Y+1	; 0x01
    4a4c:	fa 81       	ldd	r31, Y+2	; 0x02
    4a4e:	e3 5b       	subi	r30, 0xB3	; 179
    4a50:	ff 4f       	sbci	r31, 0xFF	; 255
    4a52:	a0 81       	ld	r26, Z
    4a54:	b1 81       	ldd	r27, Z+1	; 0x01
    4a56:	8c 91       	ld	r24, X

	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    4a58:	d5 01       	movw	r26, r10
    4a5a:	4d 91       	ld	r20, X+
    4a5c:	5c 91       	ld	r21, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4a5e:	da 01       	movw	r26, r20
    4a60:	9c 91       	ld	r25, X
    4a62:	d1 01       	movw	r26, r2
    4a64:	2c 91       	ld	r18, X
    4a66:	92 2b       	or	r25, r18
    4a68:	da 01       	movw	r26, r20
    4a6a:	9c 93       	st	X, r25
 */
static inline uint8_t
nand_gpio_read_io(const struct nand_driver_data *nfd)
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    4a6c:	d5 01       	movw	r26, r10
    4a6e:	4d 91       	ld	r20, X+
    4a70:	5c 91       	ld	r21, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4a72:	da 01       	movw	r26, r20
    4a74:	2c 91       	ld	r18, X
    4a76:	d1 01       	movw	r26, r2
    4a78:	9c 91       	ld	r25, X
    4a7a:	90 95       	com	r25
    4a7c:	92 23       	and	r25, r18
    4a7e:	da 01       	movw	r26, r20
    4a80:	9c 93       	st	X, r25
    4a82:	00 00       	nop
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	_delay_ns(t_rc);
	
	byte = *(nfd->gpio_io_pin);
    4a84:	a0 81       	ld	r26, Z
    4a86:	b1 81       	ldd	r27, Z+1	; 0x01
    4a88:	9c 91       	ld	r25, X

	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    4a8a:	d5 01       	movw	r26, r10
    4a8c:	4d 91       	ld	r20, X+
    4a8e:	5c 91       	ld	r21, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4a90:	da 01       	movw	r26, r20
    4a92:	2c 91       	ld	r18, X
    4a94:	d1 01       	movw	r26, r2
    4a96:	3c 91       	ld	r19, X
    4a98:	23 2b       	or	r18, r19
    4a9a:	da 01       	movw	r26, r20
    4a9c:	2c 93       	st	X, r18
 */
static inline uint8_t
nand_gpio_read_io(const struct nand_driver_data *nfd)
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    4a9e:	d5 01       	movw	r26, r10
    4aa0:	4d 91       	ld	r20, X+
    4aa2:	5c 91       	ld	r21, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4aa4:	da 01       	movw	r26, r20
    4aa6:	3c 91       	ld	r19, X
    4aa8:	d1 01       	movw	r26, r2
    4aaa:	2c 91       	ld	r18, X
    4aac:	20 95       	com	r18
    4aae:	23 23       	and	r18, r19
    4ab0:	da 01       	movw	r26, r20
    4ab2:	2c 93       	st	X, r18
    4ab4:	00 00       	nop
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	_delay_ns(t_rc);
	
	byte = *(nfd->gpio_io_pin);
    4ab6:	a0 81       	ld	r26, Z
    4ab8:	b1 81       	ldd	r27, Z+1	; 0x01
    4aba:	2c 91       	ld	r18, X

	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    4abc:	d5 01       	movw	r26, r10
    4abe:	4d 91       	ld	r20, X+
    4ac0:	5c 91       	ld	r21, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4ac2:	da 01       	movw	r26, r20
    4ac4:	2c 91       	ld	r18, X
    4ac6:	d1 01       	movw	r26, r2
    4ac8:	3c 91       	ld	r19, X
    4aca:	23 2b       	or	r18, r19
    4acc:	da 01       	movw	r26, r20
    4ace:	2c 93       	st	X, r18
 */
static inline uint8_t
nand_gpio_read_io(const struct nand_driver_data *nfd)
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    4ad0:	d5 01       	movw	r26, r10
    4ad2:	4d 91       	ld	r20, X+
    4ad4:	5c 91       	ld	r21, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4ad6:	da 01       	movw	r26, r20
    4ad8:	3c 91       	ld	r19, X
    4ada:	d1 01       	movw	r26, r2
    4adc:	2c 91       	ld	r18, X
    4ade:	20 95       	com	r18
    4ae0:	23 23       	and	r18, r19
    4ae2:	da 01       	movw	r26, r20
    4ae4:	2c 93       	st	X, r18
    4ae6:	00 00       	nop
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	_delay_ns(t_rc);
	
	byte = *(nfd->gpio_io_pin);
    4ae8:	a0 81       	ld	r26, Z
    4aea:	b1 81       	ldd	r27, Z+1	; 0x01
    4aec:	4c 91       	ld	r20, X

	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    4aee:	d5 01       	movw	r26, r10
    4af0:	6d 91       	ld	r22, X+
    4af2:	7c 91       	ld	r23, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4af4:	db 01       	movw	r26, r22
    4af6:	2c 91       	ld	r18, X
    4af8:	d1 01       	movw	r26, r2
    4afa:	3c 91       	ld	r19, X
    4afc:	23 2b       	or	r18, r19
    4afe:	db 01       	movw	r26, r22
    4b00:	2c 93       	st	X, r18
 */
static inline uint8_t
nand_gpio_read_io(const struct nand_driver_data *nfd)
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    4b02:	d5 01       	movw	r26, r10
    4b04:	6d 91       	ld	r22, X+
    4b06:	7c 91       	ld	r23, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    4b08:	db 01       	movw	r26, r22
    4b0a:	3c 91       	ld	r19, X
    4b0c:	d1 01       	movw	r26, r2
    4b0e:	2c 91       	ld	r18, X
    4b10:	20 95       	com	r18
    4b12:	23 23       	and	r18, r19
    4b14:	db 01       	movw	r26, r22
    4b16:	2c 93       	st	X, r18
    4b18:	00 00       	nop
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	_delay_ns(t_rc);
	
	byte = *(nfd->gpio_io_pin);
    4b1a:	01 90       	ld	r0, Z+
    4b1c:	f0 81       	ld	r31, Z
    4b1e:	e0 2d       	mov	r30, r0
    4b20:	20 81       	ld	r18, Z
    4b22:	20 93 e2 02 	sts	0x02E2, r18

	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    4b26:	d5 01       	movw	r26, r10
    4b28:	ed 91       	ld	r30, X+
    4b2a:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    4b2c:	30 81       	ld	r19, Z
    4b2e:	d1 01       	movw	r26, r2
    4b30:	5c 91       	ld	r21, X
    4b32:	35 2b       	or	r19, r21
    4b34:	30 83       	st	Z, r19
#ifndef NAND_CE_ALWAYS_ACTIVE
	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
#endif

	/* Fill the NAND structure parameters */
	nfd->info.maker_code = maker_code;
    4b36:	e9 81       	ldd	r30, Y+1	; 0x01
    4b38:	fa 81       	ldd	r31, Y+2	; 0x02
    4b3a:	82 83       	std	Z+2, r24	; 0x02
	nfd->info.device_code = device_code;
    4b3c:	93 83       	std	Z+3, r25	; 0x03
	nfd->info.page_size  = 0x400 << (size_data & 0x03);
    4b3e:	e4 2e       	mov	r14, r20
    4b40:	ff 24       	eor	r15, r15
    4b42:	fc 86       	std	Y+12, r15	; 0x0c
    4b44:	eb 86       	std	Y+11, r14	; 0x0b
    4b46:	a7 01       	movw	r20, r14
    4b48:	43 70       	andi	r20, 0x03	; 3
    4b4a:	50 70       	andi	r21, 0x00	; 0
    4b4c:	80 e0       	ldi	r24, 0x00	; 0
    4b4e:	94 e0       	ldi	r25, 0x04	; 4
    4b50:	02 c0       	rjmp	.+4      	; 0x4b56 <nand_gpio_init+0x378>
    4b52:	88 0f       	add	r24, r24
    4b54:	99 1f       	adc	r25, r25
    4b56:	4a 95       	dec	r20
    4b58:	e2 f7       	brpl	.-8      	; 0x4b52 <nand_gpio_init+0x374>
    4b5a:	ac 01       	movw	r20, r24
    4b5c:	66 27       	eor	r22, r22
    4b5e:	57 fd       	sbrc	r21, 7
    4b60:	60 95       	com	r22
    4b62:	76 2f       	mov	r23, r22
    4b64:	4b 83       	std	Y+3, r20	; 0x03
    4b66:	5c 83       	std	Y+4, r21	; 0x04
    4b68:	6d 83       	std	Y+5, r22	; 0x05
    4b6a:	7e 83       	std	Y+6, r23	; 0x06
    4b6c:	a9 81       	ldd	r26, Y+1	; 0x01
    4b6e:	ba 81       	ldd	r27, Y+2	; 0x02
    4b70:	14 96       	adiw	r26, 0x04	; 4
    4b72:	4d 93       	st	X+, r20
    4b74:	5d 93       	st	X+, r21
    4b76:	6d 93       	st	X+, r22
    4b78:	7c 93       	st	X, r23
    4b7a:	17 97       	sbiw	r26, 0x07	; 7

__attribute__ ((always_inline)) static uint8_t ctz32(uint32_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x0000ffff)) {
    4b7c:	db 01       	movw	r26, r22
    4b7e:	ca 01       	movw	r24, r20
    4b80:	a0 70       	andi	r26, 0x00	; 0
    4b82:	b0 70       	andi	r27, 0x00	; 0
    4b84:	ed b7       	in	r30, 0x3d	; 61
    4b86:	fe b7       	in	r31, 0x3e	; 62
    4b88:	38 96       	adiw	r30, 0x08	; 8
    4b8a:	0f b6       	in	r0, 0x3f	; 63
    4b8c:	f8 94       	cli
    4b8e:	fe bf       	out	0x3e, r31	; 62
    4b90:	0f be       	out	0x3f, r0	; 63
    4b92:	ed bf       	out	0x3d, r30	; 61
    4b94:	00 97       	sbiw	r24, 0x00	; 0
    4b96:	a1 05       	cpc	r26, r1
    4b98:	b1 05       	cpc	r27, r1
    4b9a:	09 f4       	brne	.+2      	; 0x4b9e <nand_gpio_init+0x3c0>
    4b9c:	a5 c0       	rjmp	.+330    	; 0x4ce8 <nand_gpio_init+0x50a>
    4b9e:	db 01       	movw	r26, r22
    4ba0:	ca 01       	movw	r24, r20
    4ba2:	30 e0       	ldi	r19, 0x00	; 0
    return bit + ctz8(x);
}

__attribute__ ((always_inline)) static uint8_t ctz32(uint32_t x)
{
    uint8_t bit = 0;
    4ba4:	50 e0       	ldi	r21, 0x00	; 0
    if (!(x & 0x0000ffff)) {
        bit += 16;
        x >>= 16;
    }

    return bit + ctz16(x);
    4ba6:	48 2f       	mov	r20, r24

__attribute__ ((always_inline)) static uint8_t ctz16(uint16_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x00ff)) {
    4ba8:	44 23       	and	r20, r20
    4baa:	19 f4       	brne	.+6      	; 0x4bb2 <nand_gpio_init+0x3d4>
        bit += 8;
        x >>= 8;
    4bac:	49 2f       	mov	r20, r25
    4bae:	35 2f       	mov	r19, r21
    4bb0:	38 5f       	subi	r19, 0xF8	; 248
    }

    return bit + ctz8(x);
    4bb2:	94 2f       	mov	r25, r20

__attribute__ ((always_inline)) static uint8_t ctz8(uint8_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x0f)) {
    4bb4:	50 e0       	ldi	r21, 0x00	; 0
    4bb6:	ba 01       	movw	r22, r20
    4bb8:	6f 70       	andi	r22, 0x0F	; 15
    4bba:	70 70       	andi	r23, 0x00	; 0
    4bbc:	61 15       	cp	r22, r1
    4bbe:	71 05       	cpc	r23, r1
    4bc0:	09 f4       	brne	.+2      	; 0x4bc4 <nand_gpio_init+0x3e6>
    4bc2:	9a c0       	rjmp	.+308    	; 0x4cf8 <nand_gpio_init+0x51a>
    4bc4:	e2 e0       	ldi	r30, 0x02	; 2

#define ctz(x)    compiler_demux_size(sizeof(x), ctz, (x))

__attribute__ ((always_inline)) static uint8_t ctz8(uint8_t x)
{
    uint8_t bit = 0;
    4bc6:	80 e0       	ldi	r24, 0x00	; 0

    if (!(x & 0x0f)) {
        bit += 4;
        x >>= 4;
    }
    if (!(x & 0x03)) {
    4bc8:	ba 01       	movw	r22, r20
    4bca:	63 70       	andi	r22, 0x03	; 3
    4bcc:	70 70       	andi	r23, 0x00	; 0
    4bce:	61 15       	cp	r22, r1
    4bd0:	71 05       	cpc	r23, r1
    4bd2:	21 f4       	brne	.+8      	; 0x4bdc <nand_gpio_init+0x3fe>
        bit += 2;
        x >>= 2;
    4bd4:	96 95       	lsr	r25
    4bd6:	96 95       	lsr	r25

    if (!(x & 0x0f)) {
        bit += 4;
        x >>= 4;
    }
    if (!(x & 0x03)) {
    4bd8:	49 2f       	mov	r20, r25
        bit += 2;
    4bda:	8e 2f       	mov	r24, r30
        x >>= 2;
    }
    if (!(x & 0x01))
    4bdc:	40 ff       	sbrs	r20, 0
        bit++;
    4bde:	8f 5f       	subi	r24, 0xFF	; 255
    if (!(x & 0x0000ffff)) {
        bit += 16;
        x >>= 16;
    }

    return bit + ctz16(x);
    4be0:	83 0f       	add	r24, r19
	nfd->info.page_shift = ctz(nfd->info.page_size);
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	a0 e0       	ldi	r26, 0x00	; 0
    4be6:	b0 e0       	ldi	r27, 0x00	; 0
    4be8:	e9 81       	ldd	r30, Y+1	; 0x01
    4bea:	fa 81       	ldd	r31, Y+2	; 0x02
    4bec:	80 87       	std	Z+8, r24	; 0x08
    4bee:	91 87       	std	Z+9, r25	; 0x09
    4bf0:	a2 87       	std	Z+10, r26	; 0x0a
    4bf2:	b3 87       	std	Z+11, r27	; 0x0b
	nfd->info.block_size = (64UL * 1024UL) << ((size_data & 0x30) >> 4);
    4bf4:	8b 85       	ldd	r24, Y+11	; 0x0b
    4bf6:	9c 85       	ldd	r25, Y+12	; 0x0c
    4bf8:	80 73       	andi	r24, 0x30	; 48
    4bfa:	90 70       	andi	r25, 0x00	; 0
    4bfc:	95 95       	asr	r25
    4bfe:	87 95       	ror	r24
    4c00:	95 95       	asr	r25
    4c02:	87 95       	ror	r24
    4c04:	95 95       	asr	r25
    4c06:	87 95       	ror	r24
    4c08:	95 95       	asr	r25
    4c0a:	87 95       	ror	r24
    4c0c:	e1 2c       	mov	r14, r1
    4c0e:	f1 2c       	mov	r15, r1
    4c10:	91 e0       	ldi	r25, 0x01	; 1
    4c12:	09 2f       	mov	r16, r25
    4c14:	11 2d       	mov	r17, r1
    4c16:	04 c0       	rjmp	.+8      	; 0x4c20 <nand_gpio_init+0x442>
    4c18:	ee 0c       	add	r14, r14
    4c1a:	ff 1c       	adc	r15, r15
    4c1c:	00 1f       	adc	r16, r16
    4c1e:	11 1f       	adc	r17, r17
    4c20:	8a 95       	dec	r24
    4c22:	d2 f7       	brpl	.-12     	; 0x4c18 <nand_gpio_init+0x43a>
    4c24:	ef 82       	std	Y+7, r14	; 0x07
    4c26:	f8 86       	std	Y+8, r15	; 0x08
    4c28:	09 87       	std	Y+9, r16	; 0x09
    4c2a:	1a 87       	std	Y+10, r17	; 0x0a
    4c2c:	e0 8a       	std	Z+16, r14	; 0x10
    4c2e:	f1 8a       	std	Z+17, r15	; 0x11
    4c30:	02 8b       	std	Z+18, r16	; 0x12
    4c32:	13 8b       	std	Z+19, r17	; 0x13

	nfd->info.num_planes = (1 << ((plane_data >> 2) & 0x03));
    4c34:	32 2f       	mov	r19, r18
    4c36:	36 95       	lsr	r19
    4c38:	36 95       	lsr	r19
    4c3a:	33 70       	andi	r19, 0x03	; 3
    4c3c:	81 e0       	ldi	r24, 0x01	; 1
    4c3e:	90 e0       	ldi	r25, 0x00	; 0
    4c40:	02 c0       	rjmp	.+4      	; 0x4c46 <nand_gpio_init+0x468>
    4c42:	88 0f       	add	r24, r24
    4c44:	99 1f       	adc	r25, r25
    4c46:	3a 95       	dec	r19
    4c48:	e2 f7       	brpl	.-8      	; 0x4c42 <nand_gpio_init+0x464>
    4c4a:	a8 2e       	mov	r10, r24
    4c4c:	80 a3       	std	Z+32, r24	; 0x20

	plane_size = (plane_data >> 4) & 0x07;
    4c4e:	22 95       	swap	r18
    4c50:	27 70       	andi	r18, 0x07	; 7

	/* Store the plane size in bytes. */
	switch (plane_size) {
    4c52:	24 30       	cpi	r18, 0x04	; 4
    4c54:	09 f4       	brne	.+2      	; 0x4c58 <nand_gpio_init+0x47a>
    4c56:	ca c1       	rjmp	.+916    	; 0x4fec <nand_gpio_init+0x80e>
    4c58:	25 30       	cpi	r18, 0x05	; 5
    4c5a:	08 f0       	brcs	.+2      	; 0x4c5e <nand_gpio_init+0x480>
    4c5c:	54 c0       	rjmp	.+168    	; 0x4d06 <nand_gpio_init+0x528>
    4c5e:	22 30       	cpi	r18, 0x02	; 2
    4c60:	09 f4       	brne	.+2      	; 0x4c64 <nand_gpio_init+0x486>
    4c62:	b7 c1       	rjmp	.+878    	; 0x4fd2 <nand_gpio_init+0x7f4>
    4c64:	23 30       	cpi	r18, 0x03	; 3
    4c66:	08 f0       	brcs	.+2      	; 0x4c6a <nand_gpio_init+0x48c>
    4c68:	41 c1       	rjmp	.+642    	; 0x4eec <nand_gpio_init+0x70e>
    4c6a:	21 30       	cpi	r18, 0x01	; 1
    4c6c:	09 f0       	breq	.+2      	; 0x4c70 <nand_gpio_init+0x492>
    4c6e:	54 c0       	rjmp	.+168    	; 0x4d18 <nand_gpio_init+0x53a>
		case 0x0:
			nfd->info.plane_size = 1UL << 23;
			break;
		case 0x1:
			nfd->info.plane_size = 1UL << 24;
    4c70:	a9 81       	ldd	r26, Y+1	; 0x01
    4c72:	ba 81       	ldd	r27, Y+2	; 0x02
    4c74:	91 96       	adiw	r26, 0x21	; 33
    4c76:	1c 92       	st	X, r1
    4c78:	91 97       	sbiw	r26, 0x21	; 33
    4c7a:	92 96       	adiw	r26, 0x22	; 34
    4c7c:	1c 92       	st	X, r1
    4c7e:	92 97       	sbiw	r26, 0x22	; 34
    4c80:	93 96       	adiw	r26, 0x23	; 35
    4c82:	1c 92       	st	X, r1
    4c84:	93 97       	sbiw	r26, 0x23	; 35
    4c86:	94 96       	adiw	r26, 0x24	; 36
    4c88:	2c 93       	st	X, r18
    4c8a:	94 97       	sbiw	r26, 0x24	; 36
    4c8c:	95 96       	adiw	r26, 0x25	; 37
    4c8e:	1c 92       	st	X, r1
    4c90:	95 97       	sbiw	r26, 0x25	; 37
    4c92:	96 96       	adiw	r26, 0x26	; 38
    4c94:	1c 92       	st	X, r1
    4c96:	96 97       	sbiw	r26, 0x26	; 38
    4c98:	97 96       	adiw	r26, 0x27	; 39
    4c9a:	1c 92       	st	X, r1
    4c9c:	97 97       	sbiw	r26, 0x27	; 39
    4c9e:	98 96       	adiw	r26, 0x28	; 40
    4ca0:	1c 92       	st	X, r1
    4ca2:	98 97       	sbiw	r26, 0x28	; 40
    4ca4:	40 e0       	ldi	r20, 0x00	; 0
    4ca6:	51 e0       	ldi	r21, 0x01	; 1
    4ca8:	44 c0       	rjmp	.+136    	; 0x4d32 <nand_gpio_init+0x554>
#ifndef NAND_CE_ALWAYS_ACTIVE
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
#endif

	if (nand_gpio_write_cmd(nfd, NAND_CMD_RESET, 0, 0)) {
		return -EBUSY;
    4caa:	2e ef       	ldi	r18, 0xFE	; 254
    4cac:	3f ef       	ldi	r19, 0xFF	; 255
    4cae:	4f ef       	ldi	r20, 0xFF	; 255
    4cb0:	5f ef       	ldi	r21, 0xFF	; 255
	if (retval) {
		return retval;
	}

	return 0;
}
    4cb2:	b9 01       	movw	r22, r18
    4cb4:	ca 01       	movw	r24, r20
    4cb6:	2c 96       	adiw	r28, 0x0c	; 12
    4cb8:	0f b6       	in	r0, 0x3f	; 63
    4cba:	f8 94       	cli
    4cbc:	de bf       	out	0x3e, r29	; 62
    4cbe:	0f be       	out	0x3f, r0	; 63
    4cc0:	cd bf       	out	0x3d, r28	; 61
    4cc2:	cf 91       	pop	r28
    4cc4:	df 91       	pop	r29
    4cc6:	1f 91       	pop	r17
    4cc8:	0f 91       	pop	r16
    4cca:	ff 90       	pop	r15
    4ccc:	ef 90       	pop	r14
    4cce:	df 90       	pop	r13
    4cd0:	cf 90       	pop	r12
    4cd2:	bf 90       	pop	r11
    4cd4:	af 90       	pop	r10
    4cd6:	9f 90       	pop	r9
    4cd8:	8f 90       	pop	r8
    4cda:	7f 90       	pop	r7
    4cdc:	6f 90       	pop	r6
    4cde:	5f 90       	pop	r5
    4ce0:	4f 90       	pop	r4
    4ce2:	3f 90       	pop	r3
    4ce4:	2f 90       	pop	r2
    4ce6:	08 95       	ret
    4ce8:	7a 01       	movw	r14, r20
    4cea:	8b 01       	movw	r16, r22
{
    uint8_t bit = 0;

    if (!(x & 0x0000ffff)) {
        bit += 16;
        x >>= 16;
    4cec:	c8 01       	movw	r24, r16
    4cee:	aa 27       	eor	r26, r26
    4cf0:	bb 27       	eor	r27, r27
    4cf2:	30 e1       	ldi	r19, 0x10	; 16
__attribute__ ((always_inline)) static uint8_t ctz32(uint32_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x0000ffff)) {
        bit += 16;
    4cf4:	50 e1       	ldi	r21, 0x10	; 16
    4cf6:	57 cf       	rjmp	.-338    	; 0x4ba6 <nand_gpio_init+0x3c8>
{
    uint8_t bit = 0;

    if (!(x & 0x0f)) {
        bit += 4;
        x >>= 4;
    4cf8:	92 95       	swap	r25
    4cfa:	9f 70       	andi	r25, 0x0F	; 15
    4cfc:	49 2f       	mov	r20, r25
    4cfe:	50 e0       	ldi	r21, 0x00	; 0
    4d00:	e6 e0       	ldi	r30, 0x06	; 6
__attribute__ ((always_inline)) static uint8_t ctz8(uint8_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x0f)) {
        bit += 4;
    4d02:	84 e0       	ldi	r24, 0x04	; 4
    4d04:	61 cf       	rjmp	.-318    	; 0x4bc8 <nand_gpio_init+0x3ea>
	nfd->info.num_planes = (1 << ((plane_data >> 2) & 0x03));

	plane_size = (plane_data >> 4) & 0x07;

	/* Store the plane size in bytes. */
	switch (plane_size) {
    4d06:	26 30       	cpi	r18, 0x06	; 6
    4d08:	09 f4       	brne	.+2      	; 0x4d0c <nand_gpio_init+0x52e>
    4d0a:	55 c1       	rjmp	.+682    	; 0x4fb6 <nand_gpio_init+0x7d8>
    4d0c:	26 30       	cpi	r18, 0x06	; 6
    4d0e:	08 f4       	brcc	.+2      	; 0x4d12 <nand_gpio_init+0x534>
    4d10:	cf c0       	rjmp	.+414    	; 0x4eb0 <nand_gpio_init+0x6d2>
    4d12:	27 30       	cpi	r18, 0x07	; 7
    4d14:	09 f4       	brne	.+2      	; 0x4d18 <nand_gpio_init+0x53a>
    4d16:	31 c1       	rjmp	.+610    	; 0x4f7a <nand_gpio_init+0x79c>
		case 0x0:
			nfd->info.plane_size = 1UL << 23;
    4d18:	e9 81       	ldd	r30, Y+1	; 0x01
    4d1a:	fa 81       	ldd	r31, Y+2	; 0x02
    4d1c:	11 a2       	std	Z+33, r1	; 0x21
    4d1e:	12 a2       	std	Z+34, r1	; 0x22
    4d20:	80 e8       	ldi	r24, 0x80	; 128
    4d22:	83 a3       	std	Z+35, r24	; 0x23
    4d24:	14 a2       	std	Z+36, r1	; 0x24
    4d26:	15 a2       	std	Z+37, r1	; 0x25
    4d28:	16 a2       	std	Z+38, r1	; 0x26
    4d2a:	17 a2       	std	Z+39, r1	; 0x27
    4d2c:	10 a6       	std	Z+40, r1	; 0x28
    4d2e:	40 e8       	ldi	r20, 0x80	; 128
    4d30:	50 e0       	ldi	r21, 0x00	; 0
			break;
		default:
			return -EINVAL;
	}

	if ((size_data & 0x40) == 0) {
    4d32:	bb 85       	ldd	r27, Y+11	; 0x0b
    4d34:	b6 fd       	sbrc	r27, 6
    4d36:	fe c0       	rjmp	.+508    	; 0x4f34 <nand_gpio_init+0x756>
		nfd->info.bus_width = 8;
    4d38:	88 e0       	ldi	r24, 0x08	; 8
    4d3a:	90 e0       	ldi	r25, 0x00	; 0
    4d3c:	a0 e0       	ldi	r26, 0x00	; 0
    4d3e:	b0 e0       	ldi	r27, 0x00	; 0
    4d40:	e9 81       	ldd	r30, Y+1	; 0x01
    4d42:	fa 81       	ldd	r31, Y+2	; 0x02
    4d44:	84 8f       	std	Z+28, r24	; 0x1c
    4d46:	95 8f       	std	Z+29, r25	; 0x1d
    4d48:	a6 8f       	std	Z+30, r26	; 0x1e
    4d4a:	b7 8f       	std	Z+31, r27	; 0x1f
	} else {
		nfd->info.bus_width = 16;
	}

	nfd->info.num_blocks = nfd->info.num_planes * nfd->info.plane_size /
    4d4c:	20 e0       	ldi	r18, 0x00	; 0
    4d4e:	30 e0       	ldi	r19, 0x00	; 0
    4d50:	60 e0       	ldi	r22, 0x00	; 0
    4d52:	70 e0       	ldi	r23, 0x00	; 0
    4d54:	80 e0       	ldi	r24, 0x00	; 0
    4d56:	90 e0       	ldi	r25, 0x00	; 0
    4d58:	bb 24       	eor	r11, r11
    4d5a:	cc 24       	eor	r12, r12
    4d5c:	dd 24       	eor	r13, r13
    4d5e:	ee 24       	eor	r14, r14
    4d60:	ff 24       	eor	r15, r15
    4d62:	00 e0       	ldi	r16, 0x00	; 0
    4d64:	10 e0       	ldi	r17, 0x00	; 0
    4d66:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <__muldi3>
    4d6a:	ef 80       	ldd	r14, Y+7	; 0x07
    4d6c:	f8 84       	ldd	r15, Y+8	; 0x08
    4d6e:	09 85       	ldd	r16, Y+9	; 0x09
    4d70:	1a 85       	ldd	r17, Y+10	; 0x0a
    4d72:	17 01       	movw	r2, r14
    4d74:	28 01       	movw	r4, r16
    4d76:	57 01       	movw	r10, r14
    4d78:	62 01       	movw	r12, r4
    4d7a:	ee 24       	eor	r14, r14
    4d7c:	ff 24       	eor	r15, r15
    4d7e:	00 e0       	ldi	r16, 0x00	; 0
    4d80:	10 e0       	ldi	r17, 0x00	; 0
    4d82:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__udivdi3>
    4d86:	a9 81       	ldd	r26, Y+1	; 0x01
    4d88:	ba 81       	ldd	r27, Y+2	; 0x02
    4d8a:	58 96       	adiw	r26, 0x18	; 24
    4d8c:	2c 93       	st	X, r18
    4d8e:	58 97       	sbiw	r26, 0x18	; 24
    4d90:	59 96       	adiw	r26, 0x19	; 25
    4d92:	3c 93       	st	X, r19
    4d94:	59 97       	sbiw	r26, 0x19	; 25
    4d96:	5a 96       	adiw	r26, 0x1a	; 26
    4d98:	4c 93       	st	X, r20
    4d9a:	5a 97       	sbiw	r26, 0x1a	; 26
    4d9c:	5b 96       	adiw	r26, 0x1b	; 27
    4d9e:	5c 93       	st	X, r21
		nfd->info.block_size;
	nfd->info.pages_per_block = nfd->info.block_size / nfd->info.page_size;
    4da0:	6f 81       	ldd	r22, Y+7	; 0x07
    4da2:	78 85       	ldd	r23, Y+8	; 0x08
    4da4:	89 85       	ldd	r24, Y+9	; 0x09
    4da6:	9a 85       	ldd	r25, Y+10	; 0x0a
    4da8:	2b 81       	ldd	r18, Y+3	; 0x03
    4daa:	3c 81       	ldd	r19, Y+4	; 0x04
    4dac:	4d 81       	ldd	r20, Y+5	; 0x05
    4dae:	5e 81       	ldd	r21, Y+6	; 0x06
    4db0:	0e 94 c9 3a 	call	0x7592	; 0x7592 <__udivmodsi4>
    4db4:	e9 81       	ldd	r30, Y+1	; 0x01
    4db6:	fa 81       	ldd	r31, Y+2	; 0x02
    4db8:	24 87       	std	Z+12, r18	; 0x0c
    4dba:	35 87       	std	Z+13, r19	; 0x0d
    4dbc:	46 87       	std	Z+14, r20	; 0x0e
    4dbe:	57 87       	std	Z+15, r21	; 0x0f

__attribute__ ((always_inline)) static uint8_t ctz32(uint32_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x0000ffff)) {
    4dc0:	da 01       	movw	r26, r20
    4dc2:	c9 01       	movw	r24, r18
    4dc4:	a0 70       	andi	r26, 0x00	; 0
    4dc6:	b0 70       	andi	r27, 0x00	; 0
    4dc8:	00 97       	sbiw	r24, 0x00	; 0
    4dca:	a1 05       	cpc	r26, r1
    4dcc:	b1 05       	cpc	r27, r1
    4dce:	09 f0       	breq	.+2      	; 0x4dd2 <nand_gpio_init+0x5f4>
    4dd0:	ae c0       	rjmp	.+348    	; 0x4f2e <nand_gpio_init+0x750>
        bit += 16;
        x >>= 16;
    4dd2:	9a 01       	movw	r18, r20
    4dd4:	44 27       	eor	r20, r20
    4dd6:	55 27       	eor	r21, r21
    4dd8:	60 e1       	ldi	r22, 0x10	; 16
__attribute__ ((always_inline)) static uint8_t ctz32(uint32_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x0000ffff)) {
        bit += 16;
    4dda:	70 e1       	ldi	r23, 0x10	; 16
        x >>= 16;
    }

    return bit + ctz16(x);
    4ddc:	92 2f       	mov	r25, r18

__attribute__ ((always_inline)) static uint8_t ctz16(uint16_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x00ff)) {
    4dde:	22 23       	and	r18, r18
    4de0:	19 f4       	brne	.+6      	; 0x4de8 <nand_gpio_init+0x60a>
        bit += 8;
        x >>= 8;
    4de2:	93 2f       	mov	r25, r19
    4de4:	67 2f       	mov	r22, r23
    4de6:	68 5f       	subi	r22, 0xF8	; 248

__attribute__ ((always_inline)) static uint8_t ctz8(uint8_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x0f)) {
    4de8:	29 2f       	mov	r18, r25
    4dea:	30 e0       	ldi	r19, 0x00	; 0
    4dec:	a9 01       	movw	r20, r18
    4dee:	4f 70       	andi	r20, 0x0F	; 15
    4df0:	50 70       	andi	r21, 0x00	; 0
    4df2:	41 15       	cp	r20, r1
    4df4:	51 05       	cpc	r21, r1
    4df6:	09 f0       	breq	.+2      	; 0x4dfa <nand_gpio_init+0x61c>
    4df8:	97 c0       	rjmp	.+302    	; 0x4f28 <nand_gpio_init+0x74a>
        bit += 4;
        x >>= 4;
    4dfa:	92 95       	swap	r25
    4dfc:	9f 70       	andi	r25, 0x0F	; 15
    4dfe:	29 2f       	mov	r18, r25
    4e00:	30 e0       	ldi	r19, 0x00	; 0
    4e02:	76 e0       	ldi	r23, 0x06	; 6
__attribute__ ((always_inline)) static uint8_t ctz8(uint8_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x0f)) {
        bit += 4;
    4e04:	84 e0       	ldi	r24, 0x04	; 4
        x >>= 4;
    }
    if (!(x & 0x03)) {
    4e06:	a9 01       	movw	r20, r18
    4e08:	43 70       	andi	r20, 0x03	; 3
    4e0a:	50 70       	andi	r21, 0x00	; 0
    4e0c:	41 15       	cp	r20, r1
    4e0e:	51 05       	cpc	r21, r1
    4e10:	21 f4       	brne	.+8      	; 0x4e1a <nand_gpio_init+0x63c>
        bit += 2;
        x >>= 2;
    4e12:	96 95       	lsr	r25
    4e14:	96 95       	lsr	r25

    if (!(x & 0x0f)) {
        bit += 4;
        x >>= 4;
    }
    if (!(x & 0x03)) {
    4e16:	29 2f       	mov	r18, r25
        bit += 2;
    4e18:	87 2f       	mov	r24, r23
        x >>= 2;
    }
    if (!(x & 0x01))
    4e1a:	20 ff       	sbrs	r18, 0
        bit++;
    4e1c:	8f 5f       	subi	r24, 0xFF	; 255
    if (!(x & 0x0000ffff)) {
        bit += 16;
        x >>= 16;
    }

    return bit + ctz16(x);
    4e1e:	86 0f       	add	r24, r22
	nfd->info.block_shift = ctz(nfd->info.pages_per_block);
    4e20:	90 e0       	ldi	r25, 0x00	; 0
    4e22:	a0 e0       	ldi	r26, 0x00	; 0
    4e24:	b0 e0       	ldi	r27, 0x00	; 0
    4e26:	e9 81       	ldd	r30, Y+1	; 0x01
    4e28:	fa 81       	ldd	r31, Y+2	; 0x02
    4e2a:	84 8b       	std	Z+20, r24	; 0x14
    4e2c:	95 8b       	std	Z+21, r25	; 0x15
    4e2e:	a6 8b       	std	Z+22, r26	; 0x16
    4e30:	b7 8b       	std	Z+23, r27	; 0x17

	if (nfd->info.page_size >= 512) {
    4e32:	0b 81       	ldd	r16, Y+3	; 0x03
    4e34:	1c 81       	ldd	r17, Y+4	; 0x04
    4e36:	2d 81       	ldd	r18, Y+5	; 0x05
    4e38:	3e 81       	ldd	r19, Y+6	; 0x06
    4e3a:	00 30       	cpi	r16, 0x00	; 0
    4e3c:	42 e0       	ldi	r20, 0x02	; 2
    4e3e:	14 07       	cpc	r17, r20
    4e40:	40 e0       	ldi	r20, 0x00	; 0
    4e42:	24 07       	cpc	r18, r20
    4e44:	40 e0       	ldi	r20, 0x00	; 0
    4e46:	34 07       	cpc	r19, r20
    4e48:	08 f4       	brcc	.+2      	; 0x4e4c <nand_gpio_init+0x66e>
    4e4a:	7f c0       	rjmp	.+254    	; 0x4f4a <nand_gpio_init+0x76c>
		nfd->info.badblock_offset = NAND_LARGE_BAD_BLOCK_POSITION;
    4e4c:	11 a6       	std	Z+41, r1	; 0x29
	} else {
		nfd->info.badblock_offset = NAND_SMALL_BAD_BLOCK_POSITION;
	}

	spare_size = (8 << ((size_data & 0x04) >> 2)) *
			(nfd->info.page_size / 512);
    4e4e:	6b 81       	ldd	r22, Y+3	; 0x03
    4e50:	7c 81       	ldd	r23, Y+4	; 0x04
    4e52:	8d 81       	ldd	r24, Y+5	; 0x05
    4e54:	9e 81       	ldd	r25, Y+6	; 0x06
    4e56:	b9 e0       	ldi	r27, 0x09	; 9
    4e58:	96 95       	lsr	r25
    4e5a:	87 95       	ror	r24
    4e5c:	77 95       	ror	r23
    4e5e:	67 95       	ror	r22
    4e60:	ba 95       	dec	r27
    4e62:	d1 f7       	brne	.-12     	; 0x4e58 <nand_gpio_init+0x67a>
		nfd->info.badblock_offset = NAND_LARGE_BAD_BLOCK_POSITION;
	} else {
		nfd->info.badblock_offset = NAND_SMALL_BAD_BLOCK_POSITION;
	}

	spare_size = (8 << ((size_data & 0x04) >> 2)) *
    4e64:	eb 85       	ldd	r30, Y+11	; 0x0b
    4e66:	fc 85       	ldd	r31, Y+12	; 0x0c
    4e68:	e4 70       	andi	r30, 0x04	; 4
    4e6a:	f0 70       	andi	r31, 0x00	; 0
    4e6c:	f5 95       	asr	r31
    4e6e:	e7 95       	ror	r30
    4e70:	f5 95       	asr	r31
    4e72:	e7 95       	ror	r30
    4e74:	28 e0       	ldi	r18, 0x08	; 8
    4e76:	30 e0       	ldi	r19, 0x00	; 0
    4e78:	02 c0       	rjmp	.+4      	; 0x4e7e <nand_gpio_init+0x6a0>
    4e7a:	22 0f       	add	r18, r18
    4e7c:	33 1f       	adc	r19, r19
    4e7e:	ea 95       	dec	r30
    4e80:	e2 f7       	brpl	.-8      	; 0x4e7a <nand_gpio_init+0x69c>
    4e82:	44 27       	eor	r20, r20
    4e84:	37 fd       	sbrc	r19, 7
    4e86:	40 95       	com	r20
    4e88:	54 2f       	mov	r21, r20
    4e8a:	0e 94 aa 3a 	call	0x7554	; 0x7554 <__mulsi3>
			(nfd->info.page_size / 512);

	switch (spare_size) {
    4e8e:	60 31       	cpi	r22, 0x10	; 16
    4e90:	71 05       	cpc	r23, r1
    4e92:	81 05       	cpc	r24, r1
    4e94:	91 05       	cpc	r25, r1
    4e96:	09 f4       	brne	.+2      	; 0x4e9a <nand_gpio_init+0x6bc>
    4e98:	5b c0       	rjmp	.+182    	; 0x4f50 <nand_gpio_init+0x772>
    4e9a:	60 34       	cpi	r22, 0x40	; 64
    4e9c:	71 05       	cpc	r23, r1
    4e9e:	81 05       	cpc	r24, r1
    4ea0:	91 05       	cpc	r25, r1
    4ea2:	09 f4       	brne	.+2      	; 0x4ea6 <nand_gpio_init+0x6c8>
    4ea4:	5f c0       	rjmp	.+190    	; 0x4f64 <nand_gpio_init+0x786>
		break;
	case 64:
		nfd->info.oob = &nand_oob_64;
		break;
	default:
		return -EINVAL;
    4ea6:	2d ef       	ldi	r18, 0xFD	; 253
    4ea8:	3f ef       	ldi	r19, 0xFF	; 255
    4eaa:	4f ef       	ldi	r20, 0xFF	; 255
    4eac:	5f ef       	ldi	r21, 0xFF	; 255
    4eae:	01 cf       	rjmp	.-510    	; 0x4cb2 <nand_gpio_init+0x4d4>
			break;
		case 0x4:
			nfd->info.plane_size = 1UL << 27;
			break;
		case 0x5:
			nfd->info.plane_size = 1UL << 28;
    4eb0:	a9 81       	ldd	r26, Y+1	; 0x01
    4eb2:	ba 81       	ldd	r27, Y+2	; 0x02
    4eb4:	91 96       	adiw	r26, 0x21	; 33
    4eb6:	1c 92       	st	X, r1
    4eb8:	91 97       	sbiw	r26, 0x21	; 33
    4eba:	92 96       	adiw	r26, 0x22	; 34
    4ebc:	1c 92       	st	X, r1
    4ebe:	92 97       	sbiw	r26, 0x22	; 34
    4ec0:	93 96       	adiw	r26, 0x23	; 35
    4ec2:	1c 92       	st	X, r1
    4ec4:	93 97       	sbiw	r26, 0x23	; 35
    4ec6:	80 e1       	ldi	r24, 0x10	; 16
    4ec8:	94 96       	adiw	r26, 0x24	; 36
    4eca:	8c 93       	st	X, r24
    4ecc:	94 97       	sbiw	r26, 0x24	; 36
    4ece:	95 96       	adiw	r26, 0x25	; 37
    4ed0:	1c 92       	st	X, r1
    4ed2:	95 97       	sbiw	r26, 0x25	; 37
    4ed4:	96 96       	adiw	r26, 0x26	; 38
    4ed6:	1c 92       	st	X, r1
    4ed8:	96 97       	sbiw	r26, 0x26	; 38
    4eda:	97 96       	adiw	r26, 0x27	; 39
    4edc:	1c 92       	st	X, r1
    4ede:	97 97       	sbiw	r26, 0x27	; 39
    4ee0:	98 96       	adiw	r26, 0x28	; 40
    4ee2:	1c 92       	st	X, r1
    4ee4:	98 97       	sbiw	r26, 0x28	; 40
    4ee6:	40 e0       	ldi	r20, 0x00	; 0
    4ee8:	50 e1       	ldi	r21, 0x10	; 16
    4eea:	23 cf       	rjmp	.-442    	; 0x4d32 <nand_gpio_init+0x554>
			break;
		case 0x2:
			nfd->info.plane_size = 1UL << 25;
			break;
		case 0x3:
			nfd->info.plane_size = 1UL << 26;
    4eec:	a9 81       	ldd	r26, Y+1	; 0x01
    4eee:	ba 81       	ldd	r27, Y+2	; 0x02
    4ef0:	91 96       	adiw	r26, 0x21	; 33
    4ef2:	1c 92       	st	X, r1
    4ef4:	91 97       	sbiw	r26, 0x21	; 33
    4ef6:	92 96       	adiw	r26, 0x22	; 34
    4ef8:	1c 92       	st	X, r1
    4efa:	92 97       	sbiw	r26, 0x22	; 34
    4efc:	93 96       	adiw	r26, 0x23	; 35
    4efe:	1c 92       	st	X, r1
    4f00:	93 97       	sbiw	r26, 0x23	; 35
    4f02:	84 e0       	ldi	r24, 0x04	; 4
    4f04:	94 96       	adiw	r26, 0x24	; 36
    4f06:	8c 93       	st	X, r24
    4f08:	94 97       	sbiw	r26, 0x24	; 36
    4f0a:	95 96       	adiw	r26, 0x25	; 37
    4f0c:	1c 92       	st	X, r1
    4f0e:	95 97       	sbiw	r26, 0x25	; 37
    4f10:	96 96       	adiw	r26, 0x26	; 38
    4f12:	1c 92       	st	X, r1
    4f14:	96 97       	sbiw	r26, 0x26	; 38
    4f16:	97 96       	adiw	r26, 0x27	; 39
    4f18:	1c 92       	st	X, r1
    4f1a:	97 97       	sbiw	r26, 0x27	; 39
    4f1c:	98 96       	adiw	r26, 0x28	; 40
    4f1e:	1c 92       	st	X, r1
    4f20:	98 97       	sbiw	r26, 0x28	; 40
    4f22:	40 e0       	ldi	r20, 0x00	; 0
    4f24:	54 e0       	ldi	r21, 0x04	; 4
    4f26:	05 cf       	rjmp	.-502    	; 0x4d32 <nand_gpio_init+0x554>

__attribute__ ((always_inline)) static uint8_t ctz8(uint8_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x0f)) {
    4f28:	72 e0       	ldi	r23, 0x02	; 2

#define ctz(x)    compiler_demux_size(sizeof(x), ctz, (x))

__attribute__ ((always_inline)) static uint8_t ctz8(uint8_t x)
{
    uint8_t bit = 0;
    4f2a:	80 e0       	ldi	r24, 0x00	; 0
    4f2c:	6c cf       	rjmp	.-296    	; 0x4e06 <nand_gpio_init+0x628>

__attribute__ ((always_inline)) static uint8_t ctz32(uint32_t x)
{
    uint8_t bit = 0;

    if (!(x & 0x0000ffff)) {
    4f2e:	60 e0       	ldi	r22, 0x00	; 0
    return bit + ctz8(x);
}

__attribute__ ((always_inline)) static uint8_t ctz32(uint32_t x)
{
    uint8_t bit = 0;
    4f30:	70 e0       	ldi	r23, 0x00	; 0
    4f32:	54 cf       	rjmp	.-344    	; 0x4ddc <nand_gpio_init+0x5fe>
	}

	if ((size_data & 0x40) == 0) {
		nfd->info.bus_width = 8;
	} else {
		nfd->info.bus_width = 16;
    4f34:	80 e1       	ldi	r24, 0x10	; 16
    4f36:	90 e0       	ldi	r25, 0x00	; 0
    4f38:	a0 e0       	ldi	r26, 0x00	; 0
    4f3a:	b0 e0       	ldi	r27, 0x00	; 0
    4f3c:	e9 81       	ldd	r30, Y+1	; 0x01
    4f3e:	fa 81       	ldd	r31, Y+2	; 0x02
    4f40:	84 8f       	std	Z+28, r24	; 0x1c
    4f42:	95 8f       	std	Z+29, r25	; 0x1d
    4f44:	a6 8f       	std	Z+30, r26	; 0x1e
    4f46:	b7 8f       	std	Z+31, r27	; 0x1f
    4f48:	01 cf       	rjmp	.-510    	; 0x4d4c <nand_gpio_init+0x56e>
	nfd->info.block_shift = ctz(nfd->info.pages_per_block);

	if (nfd->info.page_size >= 512) {
		nfd->info.badblock_offset = NAND_LARGE_BAD_BLOCK_POSITION;
	} else {
		nfd->info.badblock_offset = NAND_SMALL_BAD_BLOCK_POSITION;
    4f4a:	85 e0       	ldi	r24, 0x05	; 5
    4f4c:	81 a7       	std	Z+41, r24	; 0x29
    4f4e:	7f cf       	rjmp	.-258    	; 0x4e4e <nand_gpio_init+0x670>
	spare_size = (8 << ((size_data & 0x04) >> 2)) *
			(nfd->info.page_size / 512);

	switch (spare_size) {
	case 16:
		nfd->info.oob = &nand_oob_16;
    4f50:	8e ea       	ldi	r24, 0xAE	; 174
    4f52:	91 e0       	ldi	r25, 0x01	; 1
    4f54:	e9 81       	ldd	r30, Y+1	; 0x01
    4f56:	fa 81       	ldd	r31, Y+2	; 0x02
    4f58:	91 83       	std	Z+1, r25	; 0x01
    4f5a:	80 83       	st	Z, r24
	retval = nand_gpio_read_id(nfd);
	if (retval) {
		return retval;
	}

	return 0;
    4f5c:	20 e0       	ldi	r18, 0x00	; 0
    4f5e:	30 e0       	ldi	r19, 0x00	; 0
    4f60:	a9 01       	movw	r20, r18
    4f62:	a7 ce       	rjmp	.-690    	; 0x4cb2 <nand_gpio_init+0x4d4>
	switch (spare_size) {
	case 16:
		nfd->info.oob = &nand_oob_16;
		break;
	case 64:
		nfd->info.oob = &nand_oob_64;
    4f64:	88 ec       	ldi	r24, 0xC8	; 200
    4f66:	91 e0       	ldi	r25, 0x01	; 1
    4f68:	a9 81       	ldd	r26, Y+1	; 0x01
    4f6a:	ba 81       	ldd	r27, Y+2	; 0x02
    4f6c:	11 96       	adiw	r26, 0x01	; 1
    4f6e:	9c 93       	st	X, r25
    4f70:	8e 93       	st	-X, r24
	retval = nand_gpio_read_id(nfd);
	if (retval) {
		return retval;
	}

	return 0;
    4f72:	20 e0       	ldi	r18, 0x00	; 0
    4f74:	30 e0       	ldi	r19, 0x00	; 0
    4f76:	a9 01       	movw	r20, r18
    4f78:	9c ce       	rjmp	.-712    	; 0x4cb2 <nand_gpio_init+0x4d4>
			break;
		case 0x6:
			nfd->info.plane_size = 1UL << 29;
			break;
		case 0x7:
			nfd->info.plane_size = 1UL << 30;
    4f7a:	a9 81       	ldd	r26, Y+1	; 0x01
    4f7c:	ba 81       	ldd	r27, Y+2	; 0x02
    4f7e:	91 96       	adiw	r26, 0x21	; 33
    4f80:	1c 92       	st	X, r1
    4f82:	91 97       	sbiw	r26, 0x21	; 33
    4f84:	92 96       	adiw	r26, 0x22	; 34
    4f86:	1c 92       	st	X, r1
    4f88:	92 97       	sbiw	r26, 0x22	; 34
    4f8a:	93 96       	adiw	r26, 0x23	; 35
    4f8c:	1c 92       	st	X, r1
    4f8e:	93 97       	sbiw	r26, 0x23	; 35
    4f90:	80 e4       	ldi	r24, 0x40	; 64
    4f92:	94 96       	adiw	r26, 0x24	; 36
    4f94:	8c 93       	st	X, r24
    4f96:	94 97       	sbiw	r26, 0x24	; 36
    4f98:	95 96       	adiw	r26, 0x25	; 37
    4f9a:	1c 92       	st	X, r1
    4f9c:	95 97       	sbiw	r26, 0x25	; 37
    4f9e:	96 96       	adiw	r26, 0x26	; 38
    4fa0:	1c 92       	st	X, r1
    4fa2:	96 97       	sbiw	r26, 0x26	; 38
    4fa4:	97 96       	adiw	r26, 0x27	; 39
    4fa6:	1c 92       	st	X, r1
    4fa8:	97 97       	sbiw	r26, 0x27	; 39
    4faa:	98 96       	adiw	r26, 0x28	; 40
    4fac:	1c 92       	st	X, r1
    4fae:	98 97       	sbiw	r26, 0x28	; 40
    4fb0:	40 e0       	ldi	r20, 0x00	; 0
    4fb2:	50 e4       	ldi	r21, 0x40	; 64
    4fb4:	be ce       	rjmp	.-644    	; 0x4d32 <nand_gpio_init+0x554>
			break;
		case 0x5:
			nfd->info.plane_size = 1UL << 28;
			break;
		case 0x6:
			nfd->info.plane_size = 1UL << 29;
    4fb6:	e9 81       	ldd	r30, Y+1	; 0x01
    4fb8:	fa 81       	ldd	r31, Y+2	; 0x02
    4fba:	11 a2       	std	Z+33, r1	; 0x21
    4fbc:	12 a2       	std	Z+34, r1	; 0x22
    4fbe:	13 a2       	std	Z+35, r1	; 0x23
    4fc0:	80 e2       	ldi	r24, 0x20	; 32
    4fc2:	84 a3       	std	Z+36, r24	; 0x24
    4fc4:	15 a2       	std	Z+37, r1	; 0x25
    4fc6:	16 a2       	std	Z+38, r1	; 0x26
    4fc8:	17 a2       	std	Z+39, r1	; 0x27
    4fca:	10 a6       	std	Z+40, r1	; 0x28
    4fcc:	40 e0       	ldi	r20, 0x00	; 0
    4fce:	50 e2       	ldi	r21, 0x20	; 32
    4fd0:	b0 ce       	rjmp	.-672    	; 0x4d32 <nand_gpio_init+0x554>
			break;
		case 0x1:
			nfd->info.plane_size = 1UL << 24;
			break;
		case 0x2:
			nfd->info.plane_size = 1UL << 25;
    4fd2:	e9 81       	ldd	r30, Y+1	; 0x01
    4fd4:	fa 81       	ldd	r31, Y+2	; 0x02
    4fd6:	11 a2       	std	Z+33, r1	; 0x21
    4fd8:	12 a2       	std	Z+34, r1	; 0x22
    4fda:	13 a2       	std	Z+35, r1	; 0x23
    4fdc:	24 a3       	std	Z+36, r18	; 0x24
    4fde:	15 a2       	std	Z+37, r1	; 0x25
    4fe0:	16 a2       	std	Z+38, r1	; 0x26
    4fe2:	17 a2       	std	Z+39, r1	; 0x27
    4fe4:	10 a6       	std	Z+40, r1	; 0x28
    4fe6:	40 e0       	ldi	r20, 0x00	; 0
    4fe8:	52 e0       	ldi	r21, 0x02	; 2
    4fea:	a3 ce       	rjmp	.-698    	; 0x4d32 <nand_gpio_init+0x554>
			break;
		case 0x3:
			nfd->info.plane_size = 1UL << 26;
			break;
		case 0x4:
			nfd->info.plane_size = 1UL << 27;
    4fec:	e9 81       	ldd	r30, Y+1	; 0x01
    4fee:	fa 81       	ldd	r31, Y+2	; 0x02
    4ff0:	11 a2       	std	Z+33, r1	; 0x21
    4ff2:	12 a2       	std	Z+34, r1	; 0x22
    4ff4:	13 a2       	std	Z+35, r1	; 0x23
    4ff6:	88 e0       	ldi	r24, 0x08	; 8
    4ff8:	84 a3       	std	Z+36, r24	; 0x24
    4ffa:	15 a2       	std	Z+37, r1	; 0x25
    4ffc:	16 a2       	std	Z+38, r1	; 0x26
    4ffe:	17 a2       	std	Z+39, r1	; 0x27
    5000:	10 a6       	std	Z+40, r1	; 0x28
    5002:	40 e0       	ldi	r20, 0x00	; 0
    5004:	58 e0       	ldi	r21, 0x08	; 8
    5006:	95 ce       	rjmp	.-726    	; 0x4d32 <nand_gpio_init+0x554>

00005008 <nand_gpio_read_block>:
	return count;
}

int32_t nand_gpio_read_block(struct nand_driver_data *nfd,
		const uint64_t block)
{
    5008:	2f 92       	push	r2
    500a:	3f 92       	push	r3
    500c:	4f 92       	push	r4
    500e:	5f 92       	push	r5
    5010:	6f 92       	push	r6
    5012:	7f 92       	push	r7
    5014:	8f 92       	push	r8
    5016:	9f 92       	push	r9
    5018:	af 92       	push	r10
    501a:	bf 92       	push	r11
    501c:	cf 92       	push	r12
    501e:	df 92       	push	r13
    5020:	ef 92       	push	r14
    5022:	ff 92       	push	r15
    5024:	0f 93       	push	r16
    5026:	1f 93       	push	r17
    5028:	df 93       	push	r29
    502a:	cf 93       	push	r28
    502c:	cd b7       	in	r28, 0x3d	; 61
    502e:	de b7       	in	r29, 0x3e	; 62
    5030:	69 97       	sbiw	r28, 0x19	; 25
    5032:	0f b6       	in	r0, 0x3f	; 63
    5034:	f8 94       	cli
    5036:	de bf       	out	0x3e, r29	; 62
    5038:	0f be       	out	0x3f, r0	; 63
    503a:	cd bf       	out	0x3d, r28	; 61
    503c:	9a 83       	std	Y+2, r25	; 0x02
    503e:	89 83       	std	Y+1, r24	; 0x01
    5040:	0b 87       	std	Y+11, r16	; 0x0b
    5042:	c1 2e       	mov	r12, r17
    5044:	2c 87       	std	Y+12, r18	; 0x0c
    5046:	3d 87       	std	Y+13, r19	; 0x0d
    5048:	4e 87       	std	Y+14, r20	; 0x0e
    504a:	5f 87       	std	Y+15, r21	; 0x0f
    504c:	68 8b       	std	Y+16, r22	; 0x10
    504e:	79 8b       	std	Y+17, r23	; 0x11
		//return -EINVAL;
	//}

	uint8_t tx;
	uint16_t i;
	uint16_t page_size = nfd->info.page_size + nfd->info.oob->size;
    5050:	dc 01       	movw	r26, r24
    5052:	ed 91       	ld	r30, X+
    5054:	fc 91       	ld	r31, X
    5056:	11 97       	sbiw	r26, 0x01	; 1
    5058:	80 81       	ld	r24, Z
    505a:	14 96       	adiw	r26, 0x04	; 4
    505c:	2d 90       	ld	r2, X+
    505e:	3c 90       	ld	r3, X
    5060:	15 97       	sbiw	r26, 0x05	; 5
    5062:	28 0e       	add	r2, r24
    5064:	31 1c       	adc	r3, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5066:	81 e0       	ldi	r24, 0x01	; 1
    5068:	80 93 e9 00 	sts	0x00E9, r24

	/* Save global interrupt flag and disable interrupts */
	//sreg = SREG;
	//cli();

	for (uint16_t page = 0; page < nfd->info.pages_per_block; ++page) {
    506c:	e9 81       	ldd	r30, Y+1	; 0x01
    506e:	fa 81       	ldd	r31, Y+2	; 0x02
    5070:	84 85       	ldd	r24, Z+12	; 0x0c
    5072:	95 85       	ldd	r25, Z+13	; 0x0d
    5074:	a6 85       	ldd	r26, Z+14	; 0x0e
    5076:	b7 85       	ldd	r27, Z+15	; 0x0f
    5078:	00 97       	sbiw	r24, 0x00	; 0
    507a:	a1 05       	cpc	r26, r1
    507c:	b1 05       	cpc	r27, r1
    507e:	09 f4       	brne	.+2      	; 0x5082 <nand_gpio_read_block+0x7a>
    5080:	d8 c0       	rjmp	.+432    	; 0x5232 <nand_gpio_read_block+0x22a>
    5082:	1b 82       	std	Y+3, r1	; 0x03
    5084:	1c 82       	std	Y+4, r1	; 0x04
    5086:	1d 82       	std	Y+5, r1	; 0x05
    5088:	1e 82       	std	Y+6, r1	; 0x06
    508a:	18 86       	std	Y+8, r1	; 0x08
    508c:	1f 82       	std	Y+7, r1	; 0x07
    508e:	e1 5b       	subi	r30, 0xB1	; 177
    5090:	ff 4f       	sbci	r31, 0xFF	; 255
    5092:	fd 8b       	std	Y+21, r31	; 0x15
    5094:	ec 8b       	std	Y+20, r30	; 0x14
    5096:	29 81       	ldd	r18, Y+1	; 0x01
    5098:	3a 81       	ldd	r19, Y+2	; 0x02
    509a:	25 5b       	subi	r18, 0xB5	; 181
    509c:	3f 4f       	sbci	r19, 0xFF	; 255
    509e:	3b 8b       	std	Y+19, r19	; 0x13
    50a0:	2a 8b       	std	Y+18, r18	; 0x12

		row_addr = (block << nfd->info.block_shift) + page;
		
		//_delay_us(10000); //4000
		error = 0;
		if (nand_gpio_write_cmd(nfd, NAND_CMD_READ, row_addr, 0) == -ETIMEDOUT) error = 1;
    50a2:	dd 24       	eor	r13, r13
    50a4:	d3 94       	inc	r13
    50a6:	29 81       	ldd	r18, Y+1	; 0x01
    50a8:	3a 81       	ldd	r19, Y+2	; 0x02
    50aa:	2f 5a       	subi	r18, 0xAF	; 175
    50ac:	3f 4f       	sbci	r19, 0xFF	; 255
    50ae:	a9 80       	ldd	r10, Y+1	; 0x01
    50b0:	ba 80       	ldd	r11, Y+2	; 0x02
    50b2:	46 e4       	ldi	r20, 0x46	; 70
    50b4:	50 e0       	ldi	r21, 0x00	; 0
    50b6:	a4 0e       	add	r10, r20
    50b8:	b5 1e       	adc	r11, r21
    50ba:	89 80       	ldd	r8, Y+1	; 0x01
    50bc:	9a 80       	ldd	r9, Y+2	; 0x02
    50be:	8d e4       	ldi	r24, 0x4D	; 77
    50c0:	90 e0       	ldi	r25, 0x00	; 0
    50c2:	88 0e       	add	r8, r24
    50c4:	99 1e       	adc	r9, r25
    50c6:	3a 86       	std	Y+10, r3	; 0x0a
    50c8:	29 86       	std	Y+9, r2	; 0x09
    50ca:	39 8f       	std	Y+25, r19	; 0x19
    50cc:	28 8f       	std	Y+24, r18	; 0x18
    50ce:	15 01       	movw	r2, r10
    50d0:	9f 8a       	std	Y+23, r9	; 0x17
    50d2:	8e 8a       	std	Y+22, r8	; 0x16
    50d4:	e9 81       	ldd	r30, Y+1	; 0x01
    50d6:	fa 81       	ldd	r31, Y+2	; 0x02
    50d8:	ad b7       	in	r26, 0x3d	; 61
    50da:	be b7       	in	r27, 0x3e	; 62
    50dc:	18 97       	sbiw	r26, 0x08	; 8
    50de:	0f b6       	in	r0, 0x3f	; 63
    50e0:	f8 94       	cli
    50e2:	be bf       	out	0x3e, r27	; 62
    50e4:	0f be       	out	0x3f, r0	; 63
    50e6:	ad bf       	out	0x3d, r26	; 61
    50e8:	ed b6       	in	r14, 0x3d	; 61
    50ea:	fe b6       	in	r15, 0x3e	; 62
    50ec:	08 94       	sec
    50ee:	e1 1c       	adc	r14, r1
    50f0:	f1 1c       	adc	r15, r1
	for (uint16_t page = 0; page < nfd->info.pages_per_block; ++page) {
#ifndef NAND_CE_ALWAYS_ACTIVE
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_ce);
#endif

		row_addr = (block << nfd->info.block_shift) + page;
    50f2:	2b 85       	ldd	r18, Y+11	; 0x0b
    50f4:	3c 2d       	mov	r19, r12
    50f6:	4c 85       	ldd	r20, Y+12	; 0x0c
    50f8:	5d 85       	ldd	r21, Y+13	; 0x0d
    50fa:	6e 85       	ldd	r22, Y+14	; 0x0e
    50fc:	7f 85       	ldd	r23, Y+15	; 0x0f
    50fe:	88 89       	ldd	r24, Y+16	; 0x10
    5100:	99 89       	ldd	r25, Y+17	; 0x11
    5102:	04 89       	ldd	r16, Z+20	; 0x14
    5104:	0e 94 0e 02 	call	0x41c	; 0x41c <__ashldi3>
    5108:	29 01       	movw	r4, r18
    510a:	3a 01       	movw	r6, r20
    510c:	2b 81       	ldd	r18, Y+3	; 0x03
    510e:	3c 81       	ldd	r19, Y+4	; 0x04
    5110:	4d 81       	ldd	r20, Y+5	; 0x05
    5112:	5e 81       	ldd	r21, Y+6	; 0x06
    5114:	42 0e       	add	r4, r18
    5116:	53 1e       	adc	r5, r19
    5118:	64 1e       	adc	r6, r20
    511a:	75 1e       	adc	r7, r21
		
		//_delay_us(10000); //4000
		error = 0;
		if (nand_gpio_write_cmd(nfd, NAND_CMD_READ, row_addr, 0) == -ETIMEDOUT) error = 1;
    511c:	d7 01       	movw	r26, r14
    511e:	1c 92       	st	X, r1
    5120:	11 96       	adiw	r26, 0x01	; 1
    5122:	1c 92       	st	X, r1
    5124:	11 97       	sbiw	r26, 0x01	; 1
    5126:	12 96       	adiw	r26, 0x02	; 2
    5128:	1c 92       	st	X, r1
    512a:	12 97       	sbiw	r26, 0x02	; 2
    512c:	13 96       	adiw	r26, 0x03	; 3
    512e:	1c 92       	st	X, r1
    5130:	13 97       	sbiw	r26, 0x03	; 3
    5132:	14 96       	adiw	r26, 0x04	; 4
    5134:	1c 92       	st	X, r1
    5136:	14 97       	sbiw	r26, 0x04	; 4
    5138:	15 96       	adiw	r26, 0x05	; 5
    513a:	1c 92       	st	X, r1
    513c:	15 97       	sbiw	r26, 0x05	; 5
    513e:	16 96       	adiw	r26, 0x06	; 6
    5140:	1c 92       	st	X, r1
    5142:	16 97       	sbiw	r26, 0x06	; 6
    5144:	17 96       	adiw	r26, 0x07	; 7
    5146:	1c 92       	st	X, r1
    5148:	89 81       	ldd	r24, Y+1	; 0x01
    514a:	9a 81       	ldd	r25, Y+2	; 0x02
    514c:	61 e0       	ldi	r22, 0x01	; 1
    514e:	72 01       	movw	r14, r4
    5150:	83 01       	movw	r16, r6
    5152:	20 e0       	ldi	r18, 0x00	; 0
    5154:	30 e0       	ldi	r19, 0x00	; 0
    5156:	40 e0       	ldi	r20, 0x00	; 0
    5158:	50 e0       	ldi	r21, 0x00	; 0
    515a:	c2 d9       	rcall	.-3196   	; 0x44e0 <nand_gpio_write_cmd>
    515c:	4b 01       	movw	r8, r22
    515e:	5c 01       	movw	r10, r24

		/* Set GPIO I/O port in input mode. */
		gpio_enable_pin_input(nfd->gpio_io_ddr, 0xFF);
    5160:	ac 89       	ldd	r26, Y+20	; 0x14
    5162:	bd 89       	ldd	r27, Y+21	; 0x15
    5164:	ed 91       	ld	r30, X+
    5166:	fc 91       	ld	r31, X
	*gpio_io_ddr |= pin;
}

static inline void gpio_enable_pin_input(volatile uint8_t *gpio_io_ddr, const uint8_t pin)
{
	*gpio_io_ddr &= ~pin;
    5168:	80 81       	ld	r24, Z
    516a:	10 82       	st	Z, r1
		error = 0;
		if (nand_gpio_write_cmd(nfd, NAND_CMD_READ, row_addr, 0) == -ETIMEDOUT) error = 1;

		/* Set GPIO I/O port in input mode. */
		gpio_enable_pin_input(nfd->gpio_io_ddr, 0xFF);
		gpio_enable_pin_pull_up(nfd->gpio_io_port, 0xFF);
    516c:	aa 89       	ldd	r26, Y+18	; 0x12
    516e:	bb 89       	ldd	r27, Y+19	; 0x13
    5170:	ed 91       	ld	r30, X+
    5172:	fc 91       	ld	r31, X
	*gpio_io_ddr &= ~pin;
}

static inline void gpio_enable_pin_pull_up(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    5174:	80 81       	ld	r24, Z
    5176:	bf ef       	ldi	r27, 0xFF	; 255
    5178:	b0 83       	st	Z, r27
		gpio_enable_pin_pull_up(nfd->gpio_io_port, 0xFF);
		//gpio_enable_pin_input(nfd->gpio_io_ddr, 0xFF);
		//gpio_disable_pin_pull_up(nfd->gpio_io_port, 0xFF);
	
		//_delay_us(30);
		for (i = 0; i < page_size; i += TX_BUFFER_SIZE) {
    517a:	ed b7       	in	r30, 0x3d	; 61
    517c:	fe b7       	in	r31, 0x3e	; 62
    517e:	38 96       	adiw	r30, 0x08	; 8
    5180:	0f b6       	in	r0, 0x3f	; 63
    5182:	f8 94       	cli
    5184:	fe bf       	out	0x3e, r31	; 62
    5186:	0f be       	out	0x3f, r0	; 63
    5188:	ed bf       	out	0x3d, r30	; 61
    518a:	29 85       	ldd	r18, Y+9	; 0x09
    518c:	3a 85       	ldd	r19, Y+10	; 0x0a
    518e:	21 15       	cp	r18, r1
    5190:	31 05       	cpc	r19, r1
    5192:	91 f1       	breq	.+100    	; 0x51f8 <nand_gpio_read_block+0x1f0>
    5194:	29 01       	movw	r4, r18
    5196:	00 e0       	ldi	r16, 0x00	; 0
    5198:	10 e0       	ldi	r17, 0x00	; 0
    519a:	48 8d       	ldd	r20, Y+24	; 0x18
    519c:	59 8d       	ldd	r21, Y+25	; 0x19
    519e:	ee 88       	ldd	r14, Y+22	; 0x16
    51a0:	ff 88       	ldd	r15, Y+23	; 0x17
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    51a2:	80 91 e8 00 	lds	r24, 0x00E8
			/* Check if the current endpoint can be written to and that the next sample should be stored */
			while (!Endpoint_IsINReady()) USB_USBTask();
    51a6:	80 fd       	sbrc	r24, 0
    51a8:	08 c0       	rjmp	.+16     	; 0x51ba <nand_gpio_read_block+0x1b2>
    51aa:	3a 01       	movw	r6, r20
    51ac:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    51b0:	80 91 e8 00 	lds	r24, 0x00E8
    51b4:	80 ff       	sbrs	r24, 0
    51b6:	fa cf       	rjmp	.-12     	; 0x51ac <nand_gpio_read_block+0x1a4>
    51b8:	a3 01       	movw	r20, r6

	/* Save global interrupt flag and disable interrupts */
	//sreg = SREG;
	//cli();

	for (uint16_t page = 0; page < nfd->info.pages_per_block; ++page) {
    51ba:	20 91 e2 02 	lds	r18, 0x02E2
    51be:	3c ef       	ldi	r19, 0xFC	; 252
    51c0:	83 16       	cp	r8, r19
    51c2:	3f ef       	ldi	r19, 0xFF	; 255
    51c4:	93 06       	cpc	r9, r19
    51c6:	3f ef       	ldi	r19, 0xFF	; 255
    51c8:	a3 06       	cpc	r10, r19
    51ca:	3f ef       	ldi	r19, 0xFF	; 255
    51cc:	b3 06       	cpc	r11, r19
    51ce:	09 f0       	breq	.+2      	; 0x51d2 <nand_gpio_read_block+0x1ca>
    51d0:	4c c0       	rjmp	.+152    	; 0x526a <nand_gpio_read_block+0x262>
    51d2:	80 e4       	ldi	r24, 0x40	; 64
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    51d4:	d0 92 f1 00 	sts	0x00F1, r13
    51d8:	81 50       	subi	r24, 0x01	; 1
		//_delay_us(30);
		for (i = 0; i < page_size; i += TX_BUFFER_SIZE) {
			/* Check if the current endpoint can be written to and that the next sample should be stored */
			while (!Endpoint_IsINReady()) USB_USBTask();

			for (tx = 0; tx < TX_BUFFER_SIZE; ++tx) {
    51da:	e1 f7       	brne	.-8      	; 0x51d4 <nand_gpio_read_block+0x1cc>
    51dc:	20 93 e2 02 	sts	0x02E2, r18
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    51e0:	80 91 e8 00 	lds	r24, 0x00E8
    51e4:	8e 77       	andi	r24, 0x7E	; 126
    51e6:	80 93 e8 00 	sts	0x00E8, r24
		gpio_enable_pin_pull_up(nfd->gpio_io_port, 0xFF);
		//gpio_enable_pin_input(nfd->gpio_io_ddr, 0xFF);
		//gpio_disable_pin_pull_up(nfd->gpio_io_port, 0xFF);
	
		//_delay_us(30);
		for (i = 0; i < page_size; i += TX_BUFFER_SIZE) {
    51ea:	00 5c       	subi	r16, 0xC0	; 192
    51ec:	1f 4f       	sbci	r17, 0xFF	; 255
    51ee:	04 15       	cp	r16, r4
    51f0:	15 05       	cpc	r17, r5
    51f2:	b8 f2       	brcs	.-82     	; 0x51a2 <nand_gpio_read_block+0x19a>
    51f4:	59 8f       	std	Y+25, r21	; 0x19
    51f6:	48 8f       	std	Y+24, r20	; 0x18

	/* Save global interrupt flag and disable interrupts */
	//sreg = SREG;
	//cli();

	for (uint16_t page = 0; page < nfd->info.pages_per_block; ++page) {
    51f8:	4f 81       	ldd	r20, Y+7	; 0x07
    51fa:	58 85       	ldd	r21, Y+8	; 0x08
    51fc:	4f 5f       	subi	r20, 0xFF	; 255
    51fe:	5f 4f       	sbci	r21, 0xFF	; 255
    5200:	58 87       	std	Y+8, r21	; 0x08
    5202:	4f 83       	std	Y+7, r20	; 0x07
    5204:	ca 01       	movw	r24, r20
    5206:	a0 e0       	ldi	r26, 0x00	; 0
    5208:	b0 e0       	ldi	r27, 0x00	; 0
    520a:	8b 83       	std	Y+3, r24	; 0x03
    520c:	9c 83       	std	Y+4, r25	; 0x04
    520e:	ad 83       	std	Y+5, r26	; 0x05
    5210:	be 83       	std	Y+6, r27	; 0x06
    5212:	e9 81       	ldd	r30, Y+1	; 0x01
    5214:	fa 81       	ldd	r31, Y+2	; 0x02
    5216:	84 85       	ldd	r24, Z+12	; 0x0c
    5218:	95 85       	ldd	r25, Z+13	; 0x0d
    521a:	a6 85       	ldd	r26, Z+14	; 0x0e
    521c:	b7 85       	ldd	r27, Z+15	; 0x0f
    521e:	2b 81       	ldd	r18, Y+3	; 0x03
    5220:	3c 81       	ldd	r19, Y+4	; 0x04
    5222:	4d 81       	ldd	r20, Y+5	; 0x05
    5224:	5e 81       	ldd	r21, Y+6	; 0x06
    5226:	28 17       	cp	r18, r24
    5228:	39 07       	cpc	r19, r25
    522a:	4a 07       	cpc	r20, r26
    522c:	5b 07       	cpc	r21, r27
    522e:	08 f4       	brcc	.+2      	; 0x5232 <nand_gpio_read_block+0x22a>
    5230:	53 cf       	rjmp	.-346    	; 0x50d8 <nand_gpio_read_block+0xd0>
	}
	
	//SREG = sreg;

	return 0;
}
    5232:	60 e0       	ldi	r22, 0x00	; 0
    5234:	70 e0       	ldi	r23, 0x00	; 0
    5236:	cb 01       	movw	r24, r22
    5238:	69 96       	adiw	r28, 0x19	; 25
    523a:	0f b6       	in	r0, 0x3f	; 63
    523c:	f8 94       	cli
    523e:	de bf       	out	0x3e, r29	; 62
    5240:	0f be       	out	0x3f, r0	; 63
    5242:	cd bf       	out	0x3d, r28	; 61
    5244:	cf 91       	pop	r28
    5246:	df 91       	pop	r29
    5248:	1f 91       	pop	r17
    524a:	0f 91       	pop	r16
    524c:	ff 90       	pop	r15
    524e:	ef 90       	pop	r14
    5250:	df 90       	pop	r13
    5252:	cf 90       	pop	r12
    5254:	bf 90       	pop	r11
    5256:	af 90       	pop	r10
    5258:	9f 90       	pop	r9
    525a:	8f 90       	pop	r8
    525c:	7f 90       	pop	r7
    525e:	6f 90       	pop	r6
    5260:	5f 90       	pop	r5
    5262:	4f 90       	pop	r4
    5264:	3f 90       	pop	r3
    5266:	2f 90       	pop	r2
    5268:	08 95       	ret
		gpio_enable_pin_pull_up(nfd->gpio_io_port, 0xFF);
		//gpio_enable_pin_input(nfd->gpio_io_ddr, 0xFF);
		//gpio_disable_pin_pull_up(nfd->gpio_io_port, 0xFF);
	
		//_delay_us(30);
		for (i = 0; i < page_size; i += TX_BUFFER_SIZE) {
    526a:	80 e4       	ldi	r24, 0x40	; 64
 */
static inline uint8_t
nand_gpio_read_io(const struct nand_driver_data *nfd)
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    526c:	da 01       	movw	r26, r20
    526e:	ed 91       	ld	r30, X+
    5270:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_clr_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port &= ~pin;
    5272:	20 81       	ld	r18, Z
    5274:	d1 01       	movw	r26, r2
    5276:	9c 91       	ld	r25, X
    5278:	90 95       	com	r25
    527a:	92 23       	and	r25, r18
    527c:	90 83       	st	Z, r25
    527e:	00 00       	nop
{
	static uint8_t byte;
	gpio_clr_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
	_delay_ns(t_rc);
	
	byte = *(nfd->gpio_io_pin);
    5280:	f7 01       	movw	r30, r14
    5282:	20 81       	ld	r18, Z
    5284:	31 81       	ldd	r19, Z+1	; 0x01
    5286:	d9 01       	movw	r26, r18
    5288:	2c 91       	ld	r18, X

	gpio_set_gpio_pin(nfd->gpio_cont_port, nfd->gpio_re);
    528a:	da 01       	movw	r26, r20
    528c:	ed 91       	ld	r30, X+
    528e:	fc 91       	ld	r31, X
	*gpio_io_port &= ~pin;
}

static inline void gpio_set_gpio_pin(volatile uint8_t *gpio_io_port, const uint8_t pin)
{
	*gpio_io_port |= pin;
    5290:	90 81       	ld	r25, Z
    5292:	d1 01       	movw	r26, r2
    5294:	3c 91       	ld	r19, X
    5296:	93 2b       	or	r25, r19
    5298:	90 83       	st	Z, r25
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    529a:	20 93 f1 00 	sts	0x00F1, r18
    529e:	81 50       	subi	r24, 0x01	; 1
		//_delay_us(30);
		for (i = 0; i < page_size; i += TX_BUFFER_SIZE) {
			/* Check if the current endpoint can be written to and that the next sample should be stored */
			while (!Endpoint_IsINReady()) USB_USBTask();

			for (tx = 0; tx < TX_BUFFER_SIZE; ++tx) {
    52a0:	29 f7       	brne	.-54     	; 0x526c <nand_gpio_read_block+0x264>
    52a2:	9c cf       	rjmp	.-200    	; 0x51dc <nand_gpio_read_block+0x1d4>

000052a4 <nor_read.clone.0>:
	wait_for_ryby_long();
	nor_reset();
}

void nor_read(const uint32_t block_size, const uint8_t transmit) {
	NOR_DATA1_DDR = NOR_DATA2_DDR = 0x00; // set for input
    52a4:	17 b8       	out	0x07, r1	; 7
    52a6:	97 b1       	in	r25, 0x07	; 7
    52a8:	9a b9       	out	0x0a, r25	; 10
	NOR_DATA1_PORT = NOR_DATA2_PORT = 0x00; //disable pull-ups
    52aa:	18 b8       	out	0x08, r1	; 8
    52ac:	98 b1       	in	r25, 0x08	; 8
    52ae:	9b b9       	out	0x0b, r25	; 11
	
	if (block_size == NOR_BSS_WORD) {
		NOR_CONT_PORT &= ~NOR_CONT_OE; //LOW
    52b0:	71 98       	cbi	0x0e, 1	; 14
    52b2:	00 00       	nop
		_delay_ns(90); //flash needs 90ns access time
		usbio_set_byte(NOR_DATA2_PIN, 0);
    52b4:	26 b1       	in	r18, 0x06	; 6
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    52b6:	90 91 ea 02 	lds	r25, 0x02EA
    52ba:	e9 2f       	mov	r30, r25
    52bc:	f0 e0       	ldi	r31, 0x00	; 0
    52be:	e5 51       	subi	r30, 0x15	; 21
    52c0:	fd 4f       	sbci	r31, 0xFD	; 253
    52c2:	20 83       	st	Z, r18
    52c4:	9f 5f       	subi	r25, 0xFF	; 255
    52c6:	90 93 ea 02 	sts	0x02EA, r25
		usbio_set_byte(NOR_DATA1_PIN, transmit);
    52ca:	29 b1       	in	r18, 0x09	; 9
    52cc:	e9 2f       	mov	r30, r25
    52ce:	f0 e0       	ldi	r31, 0x00	; 0
    52d0:	e5 51       	subi	r30, 0x15	; 21
    52d2:	fd 4f       	sbci	r31, 0xFD	; 253
    52d4:	20 83       	st	Z, r18
    52d6:	9f 5f       	subi	r25, 0xFF	; 255
    52d8:	90 93 ea 02 	sts	0x02EA, r25
	
	if (transmit) {
    52dc:	88 23       	and	r24, r24
    52de:	09 f4       	brne	.+2      	; 0x52e2 <nor_read.clone.0+0x3e>
    52e0:	14 c1       	rjmp	.+552    	; 0x550a <nor_read.clone.0+0x266>
		_tx_buffer_ix = 0;
    52e2:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    52e6:	81 e0       	ldi	r24, 0x01	; 1
    52e8:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    52ec:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    52f0:	80 fd       	sbrc	r24, 0
    52f2:	06 c0       	rjmp	.+12     	; 0x5300 <nor_read.clone.0+0x5c>
		USB_USBTask();
    52f4:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    52f8:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    52fc:	80 ff       	sbrs	r24, 0
    52fe:	fa cf       	rjmp	.-12     	; 0x52f4 <nor_read.clone.0+0x50>
		USB_USBTask();

	Endpoint_Write_8(_tx_buffer[0]);
    5300:	80 91 eb 02 	lds	r24, 0x02EB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    5304:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[1]);
    5308:	80 91 ec 02 	lds	r24, 0x02EC
    530c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[2]);
    5310:	80 91 ed 02 	lds	r24, 0x02ED
    5314:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[3]);
    5318:	80 91 ee 02 	lds	r24, 0x02EE
    531c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[4]);
    5320:	80 91 ef 02 	lds	r24, 0x02EF
    5324:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[5]);
    5328:	80 91 f0 02 	lds	r24, 0x02F0
    532c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[6]);
    5330:	80 91 f1 02 	lds	r24, 0x02F1
    5334:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[7]);
    5338:	80 91 f2 02 	lds	r24, 0x02F2
    533c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[8]);
    5340:	80 91 f3 02 	lds	r24, 0x02F3
    5344:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[9]);
    5348:	80 91 f4 02 	lds	r24, 0x02F4
    534c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[10]);
    5350:	80 91 f5 02 	lds	r24, 0x02F5
    5354:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[11]);
    5358:	80 91 f6 02 	lds	r24, 0x02F6
    535c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[12]);
    5360:	80 91 f7 02 	lds	r24, 0x02F7
    5364:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[13]);
    5368:	80 91 f8 02 	lds	r24, 0x02F8
    536c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[14]);
    5370:	80 91 f9 02 	lds	r24, 0x02F9
    5374:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[15]);
    5378:	80 91 fa 02 	lds	r24, 0x02FA
    537c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[16]);
    5380:	80 91 fb 02 	lds	r24, 0x02FB
    5384:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[17]);
    5388:	80 91 fc 02 	lds	r24, 0x02FC
    538c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[18]);
    5390:	80 91 fd 02 	lds	r24, 0x02FD
    5394:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[19]);
    5398:	80 91 fe 02 	lds	r24, 0x02FE
    539c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[20]);
    53a0:	80 91 ff 02 	lds	r24, 0x02FF
    53a4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[21]);
    53a8:	80 91 00 03 	lds	r24, 0x0300
    53ac:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[22]);
    53b0:	80 91 01 03 	lds	r24, 0x0301
    53b4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[23]);
    53b8:	80 91 02 03 	lds	r24, 0x0302
    53bc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[24]);
    53c0:	80 91 03 03 	lds	r24, 0x0303
    53c4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[25]);
    53c8:	80 91 04 03 	lds	r24, 0x0304
    53cc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[26]);
    53d0:	80 91 05 03 	lds	r24, 0x0305
    53d4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[27]);
    53d8:	80 91 06 03 	lds	r24, 0x0306
    53dc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[28]);
    53e0:	80 91 07 03 	lds	r24, 0x0307
    53e4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[29]);
    53e8:	80 91 08 03 	lds	r24, 0x0308
    53ec:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[30]);
    53f0:	80 91 09 03 	lds	r24, 0x0309
    53f4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[31]);
    53f8:	80 91 0a 03 	lds	r24, 0x030A
    53fc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[32]);
    5400:	80 91 0b 03 	lds	r24, 0x030B
    5404:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[33]);
    5408:	80 91 0c 03 	lds	r24, 0x030C
    540c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[34]);
    5410:	80 91 0d 03 	lds	r24, 0x030D
    5414:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[35]);
    5418:	80 91 0e 03 	lds	r24, 0x030E
    541c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[36]);
    5420:	80 91 0f 03 	lds	r24, 0x030F
    5424:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[37]);
    5428:	80 91 10 03 	lds	r24, 0x0310
    542c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[38]);
    5430:	80 91 11 03 	lds	r24, 0x0311
    5434:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[39]);
    5438:	80 91 12 03 	lds	r24, 0x0312
    543c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[40]);
    5440:	80 91 13 03 	lds	r24, 0x0313
    5444:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[41]);
    5448:	80 91 14 03 	lds	r24, 0x0314
    544c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[42]);
    5450:	80 91 15 03 	lds	r24, 0x0315
    5454:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[43]);
    5458:	80 91 16 03 	lds	r24, 0x0316
    545c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[44]);
    5460:	80 91 17 03 	lds	r24, 0x0317
    5464:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[45]);
    5468:	80 91 18 03 	lds	r24, 0x0318
    546c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[46]);
    5470:	80 91 19 03 	lds	r24, 0x0319
    5474:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[47]);
    5478:	80 91 1a 03 	lds	r24, 0x031A
    547c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[48]);
    5480:	80 91 1b 03 	lds	r24, 0x031B
    5484:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[49]);
    5488:	80 91 1c 03 	lds	r24, 0x031C
    548c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[50]);
    5490:	80 91 1d 03 	lds	r24, 0x031D
    5494:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[51]);
    5498:	80 91 1e 03 	lds	r24, 0x031E
    549c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[52]);
    54a0:	80 91 1f 03 	lds	r24, 0x031F
    54a4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[53]);
    54a8:	80 91 20 03 	lds	r24, 0x0320
    54ac:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[54]);
    54b0:	80 91 21 03 	lds	r24, 0x0321
    54b4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[55]);
    54b8:	80 91 22 03 	lds	r24, 0x0322
    54bc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[56]);
    54c0:	80 91 23 03 	lds	r24, 0x0323
    54c4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[57]);
    54c8:	80 91 24 03 	lds	r24, 0x0324
    54cc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[58]);
    54d0:	80 91 25 03 	lds	r24, 0x0325
    54d4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[59]);
    54d8:	80 91 26 03 	lds	r24, 0x0326
    54dc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[60]);
    54e0:	80 91 27 03 	lds	r24, 0x0327
    54e4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[61]);
    54e8:	80 91 28 03 	lds	r24, 0x0328
    54ec:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[62]);
    54f0:	80 91 29 03 	lds	r24, 0x0329
    54f4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[63]);
    54f8:	80 91 2a 03 	lds	r24, 0x032A
    54fc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5500:	80 91 e8 00 	lds	r24, 0x00E8
    5504:	8e 77       	andi	r24, 0x7E	; 126
    5506:	80 93 e8 00 	sts	0x00E8, r24
		NOR_CONT_PORT |= NOR_CONT_OE; //HIGH
    550a:	71 9a       	sbi	0x0e, 1	; 14
			Endpoint_ClearIN();
			//USB_USBTask();
		}
	}
			
	NOR_DATA1_DDR = NOR_DATA2_DDR = 0xFF;	// set for output
    550c:	8f ef       	ldi	r24, 0xFF	; 255
    550e:	87 b9       	out	0x07, r24	; 7
    5510:	87 b1       	in	r24, 0x07	; 7
    5512:	8a b9       	out	0x0a, r24	; 10
}
    5514:	08 95       	ret

00005516 <nor_initports>:

static uint8_t _increment_address, _offset_2nddie;
static uint8_t _address1, _address2, _address3;

void nor_initports(void) {
	NOR_DATA1_DDR = NOR_DATA2_DDR = 0xFF;	// set for output
    5516:	8f ef       	ldi	r24, 0xFF	; 255
    5518:	87 b9       	out	0x07, r24	; 7
    551a:	97 b1       	in	r25, 0x07	; 7
    551c:	9a b9       	out	0x0a, r25	; 10
	NOR_ADDR1_DDR = NOR_ADDR2_DDR = NOR_ADDR3_DDR = 0xFF; //address ports are always output
    551e:	84 b9       	out	0x04, r24	; 4
    5520:	94 b1       	in	r25, 0x04	; 4
    5522:	91 b9       	out	0x01, r25	; 1
    5524:	91 b1       	in	r25, 0x01	; 1
    5526:	90 bb       	out	0x10, r25	; 16
	NOR_ADDR1_PORT = NOR_ADDR2_PORT = NOR_ADDR3_PORT = 0;
    5528:	15 b8       	out	0x05, r1	; 5
    552a:	95 b1       	in	r25, 0x05	; 5
    552c:	92 b9       	out	0x02, r25	; 2
    552e:	92 b1       	in	r25, 0x02	; 2
    5530:	91 bb       	out	0x11, r25	; 17
	
	NOR_CONT_DDR = 0xFF; //all control ports are always output
    5532:	8d b9       	out	0x0d, r24	; 13

	NOR_CONT_DDR &= ~NOR_CONT_RYBY; //except RY/BY# (input)
    5534:	6e 98       	cbi	0x0d, 6	; 13
	NOR_CONT_PORT |= NOR_CONT_RYBY; //enable pull up
    5536:	76 9a       	sbi	0x0e, 6	; 14
	
	NOR_CONT_PORT &= ~(NOR_CONT_TRI | NOR_CONT_CE); //LOW
    5538:	8e b1       	in	r24, 0x0e	; 14
    553a:	8e 77       	andi	r24, 0x7E	; 126
    553c:	8e b9       	out	0x0e, r24	; 14
	NOR_CONT_PORT |= (NOR_CONT_WE | NOR_CONT_OE | NOR_CONT_RESET); //HIGH
    553e:	8e b1       	in	r24, 0x0e	; 14
    5540:	82 63       	ori	r24, 0x32	; 50
    5542:	8e b9       	out	0x0e, r24	; 14
	
	_offset_2nddie = 0;
    5544:	10 92 e3 02 	sts	0x02E3, r1
	_address1 = _address2 = _address3 = 0;
    5548:	10 92 e4 02 	sts	0x02E4, r1
    554c:	10 92 e5 02 	sts	0x02E5, r1
    5550:	10 92 e6 02 	sts	0x02E6, r1
	*(nand1.gpio_cont0_ddr) &= ~NAND_CONT_TRI;	// tri - input
	*(nand1.gpio_cont_port) = 0;				// all low
	*(nand1.gpio_cont_port) |= NAND_CONT_WE;
	*(nand1.gpio_cont_port) |= NAND_CONT_WP;
*/
}
    5554:	08 95       	ret

00005556 <nor_releaseports>:

void nor_releaseports(void) {
	NOR_ADDR1_DDR = NOR_ADDR2_DDR = NOR_ADDR3_DDR = NOR_DATA1_DDR = NOR_DATA2_DDR = NOR_CONT_DDR = 0; //all ports are always input
    5556:	1d b8       	out	0x0d, r1	; 13
    5558:	8d b1       	in	r24, 0x0d	; 13
    555a:	87 b9       	out	0x07, r24	; 7
    555c:	87 b1       	in	r24, 0x07	; 7
    555e:	8a b9       	out	0x0a, r24	; 10
    5560:	8a b1       	in	r24, 0x0a	; 10
    5562:	84 b9       	out	0x04, r24	; 4
    5564:	84 b1       	in	r24, 0x04	; 4
    5566:	81 b9       	out	0x01, r24	; 1
    5568:	81 b1       	in	r24, 0x01	; 1
    556a:	80 bb       	out	0x10, r24	; 16
	//NOR_ADDR1_PORT = NOR_ADDR2_PORT = NOR_ADDR3_PORT = NOR_DATA1_PORT = NOR_DATA2_PORT = NOR_CONT_PORT = 0; //disable pull ups for all ports
	NOR_ADDR1_PORT = NOR_ADDR2_PORT = NOR_ADDR3_PORT = NOR_DATA1_PORT = NOR_DATA2_PORT = NOR_CONT_PORT = 0xFF; //enable pull ups for all ports
    556c:	8f ef       	ldi	r24, 0xFF	; 255
    556e:	8e b9       	out	0x0e, r24	; 14
    5570:	8e b1       	in	r24, 0x0e	; 14
    5572:	88 b9       	out	0x08, r24	; 8
    5574:	88 b1       	in	r24, 0x08	; 8
    5576:	8b b9       	out	0x0b, r24	; 11
    5578:	8b b1       	in	r24, 0x0b	; 11
    557a:	85 b9       	out	0x05, r24	; 5
    557c:	85 b1       	in	r24, 0x05	; 5
    557e:	82 b9       	out	0x02, r24	; 2
    5580:	82 b1       	in	r24, 0x02	; 2
    5582:	81 bb       	out	0x11, r24	; 17
}
    5584:	08 95       	ret

00005586 <nor_address_set>:

void nor_address_set(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	_address3 = address3;
    5586:	80 93 e4 02 	sts	0x02E4, r24
	_address2 = address2;
    558a:	60 93 e5 02 	sts	0x02E5, r22
	_address1 = address1;
    558e:	40 93 e6 02 	sts	0x02E6, r20
	NOR_ADDR3_PORT = address3;
    5592:	85 b9       	out	0x05, r24	; 5
	NOR_ADDR2_PORT = address2;
    5594:	62 b9       	out	0x02, r22	; 2
	NOR_ADDR1_PORT = address1;
    5596:	41 bb       	out	0x11, r20	; 17
}
    5598:	08 95       	ret

0000559a <nor_address_increment_set>:

void nor_address_increment_set(const uint8_t state) {
	_increment_address = state;
    559a:	80 93 e7 02 	sts	0x02E7, r24
}
    559e:	08 95       	ret

000055a0 <nor_2nd_die_offset>:

void nor_2nd_die_offset(const uint8_t offset) {
	_offset_2nddie = offset;
    55a0:	80 93 e3 02 	sts	0x02E3, r24
}
    55a4:	08 95       	ret

000055a6 <nor_address_increment>:

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
    55a6:	90 91 e6 02 	lds	r25, 0x02E6
    55aa:	9f 5f       	subi	r25, 0xFF	; 255
    55ac:	90 93 e6 02 	sts	0x02E6, r25
	if (_address1 == 0) ++_address2;
    55b0:	99 23       	and	r25, r25
    55b2:	39 f4       	brne	.+14     	; 0x55c2 <nor_address_increment+0x1c>
    55b4:	20 91 e5 02 	lds	r18, 0x02E5
    55b8:	2f 5f       	subi	r18, 0xFF	; 255
    55ba:	20 93 e5 02 	sts	0x02E5, r18
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;
    55be:	22 23       	and	r18, r18
    55c0:	51 f0       	breq	.+20     	; 0x55d6 <nor_address_increment+0x30>

	if (lock_address == 0) return;
    55c2:	88 23       	and	r24, r24
    55c4:	39 f0       	breq	.+14     	; 0x55d4 <nor_address_increment+0x2e>

	NOR_ADDR3_PORT = _address3; NOR_ADDR2_PORT = _address2; NOR_ADDR1_PORT = _address1;
    55c6:	80 91 e4 02 	lds	r24, 0x02E4
    55ca:	85 b9       	out	0x05, r24	; 5
    55cc:	80 91 e5 02 	lds	r24, 0x02E5
    55d0:	82 b9       	out	0x02, r24	; 2
    55d2:	91 bb       	out	0x11, r25	; 17
    55d4:	08 95       	ret

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;
    55d6:	20 91 e4 02 	lds	r18, 0x02E4
    55da:	2f 5f       	subi	r18, 0xFF	; 255
    55dc:	20 93 e4 02 	sts	0x02E4, r18
    55e0:	f0 cf       	rjmp	.-32     	; 0x55c2 <nor_address_increment+0x1c>

000055e2 <nor_reset>:
		if (NOR_CONT_PIN & NOR_CONT_RYBY) break;
	}
}

void nor_reset(void) {
	NOR_CONT_PORT &= ~NOR_CONT_RESET; _delay_us(1);
    55e2:	74 98       	cbi	0x0e, 4	; 14
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    55e4:	c8 95       	lpm
    55e6:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    55e8:	00 c0       	rjmp	.+0      	; 0x55ea <nor_reset+0x8>
	NOR_CONT_PORT |= NOR_CONT_RESET; _delay_us(1);
    55ea:	74 9a       	sbi	0x0e, 4	; 14
static __inline__ void _NOP3 (void) { __asm__ volatile ( "lpm    " "\n\t" ); }
    55ec:	c8 95       	lpm
    55ee:	c8 95       	lpm
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    55f0:	00 c0       	rjmp	.+0      	; 0x55f2 <nor_reset+0x10>
}
    55f2:	08 95       	ret

000055f4 <nor_id>:

void nor_id(void) {
	NOR_CONT_PORT |= NOR_CONT_OE; //HIGH
    55f4:	71 9a       	sbi	0x0e, 1	; 14
	NOR_CONT_PORT &= ~NOR_CONT_CE; //LOW
    55f6:	70 98       	cbi	0x0e, 0	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    55f8:	15 b8       	out	0x05, r1	; 5
	NOR_ADDR2_PORT = address2;
    55fa:	95 e0       	ldi	r25, 0x05	; 5
    55fc:	92 b9       	out	0x02, r25	; 2
	NOR_ADDR1_PORT = address1;
    55fe:	85 e5       	ldi	r24, 0x55	; 85
    5600:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5602:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    5604:	2a ea       	ldi	r18, 0xAA	; 170
    5606:	2b b9       	out	0x0b, r18	; 11
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    5608:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    560a:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    560c:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    560e:	15 b8       	out	0x05, r1	; 5
	NOR_ADDR2_PORT = address2;
    5610:	32 e0       	ldi	r19, 0x02	; 2
    5612:	32 b9       	out	0x02, r19	; 2
	NOR_ADDR1_PORT = address1;
    5614:	21 bb       	out	0x11, r18	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5616:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    5618:	8b b9       	out	0x0b, r24	; 11
    561a:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    561c:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    561e:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    5620:	15 b8       	out	0x05, r1	; 5
	NOR_ADDR2_PORT = address2;
    5622:	92 b9       	out	0x02, r25	; 2
	NOR_ADDR1_PORT = address1;
    5624:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5626:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    5628:	80 e9       	ldi	r24, 0x90	; 144
    562a:	8b b9       	out	0x0b, r24	; 11
    562c:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    562e:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    5630:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    5632:	15 b8       	out	0x05, r1	; 5
	NOR_ADDR2_PORT = address2;
    5634:	12 b8       	out	0x02, r1	; 2
	NOR_ADDR1_PORT = address1;
    5636:	11 ba       	out	0x11, r1	; 17
	set_address(0x00, 0x05, 0x55); set_data(0x00, 0xAA);
	set_address(0x00, 0x02, 0xAA); set_data(0x00, 0x55);
	set_address(0x00, 0x05, 0x55); set_data(0x00, 0x90);
	
	//manufacturer code
	set_address(0x00, 0x00, 0x00); nor_read(NOR_BSS_WORD, 0);
    5638:	80 e0       	ldi	r24, 0x00	; 0
    563a:	34 de       	rcall	.-920    	; 0x52a4 <nor_read.clone.0>
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    563c:	15 b8       	out	0x05, r1	; 5
	NOR_ADDR2_PORT = address2;
    563e:	12 b8       	out	0x02, r1	; 2
	NOR_ADDR1_PORT = address1;
    5640:	81 e0       	ldi	r24, 0x01	; 1
    5642:	81 bb       	out	0x11, r24	; 17
	
	//manufacturer code
	set_address(0x00, 0x00, 0x00); nor_read(NOR_BSS_WORD, 0);
	
	//device code
	set_address(0x00, 0x00, 0x01); nor_read(NOR_BSS_WORD, 0);
    5644:	80 e0       	ldi	r24, 0x00	; 0
    5646:	2e de       	rcall	.-932    	; 0x52a4 <nor_read.clone.0>
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    5648:	15 b8       	out	0x05, r1	; 5
	NOR_ADDR2_PORT = address2;
    564a:	12 b8       	out	0x02, r1	; 2
	NOR_ADDR1_PORT = address1;
    564c:	8e e0       	ldi	r24, 0x0E	; 14
    564e:	81 bb       	out	0x11, r24	; 17
	//manufacturer code
	set_address(0x00, 0x00, 0x00); nor_read(NOR_BSS_WORD, 0);
	
	//device code
	set_address(0x00, 0x00, 0x01); nor_read(NOR_BSS_WORD, 0);
	set_address(0x00, 0x00, 0x0E); nor_read(NOR_BSS_WORD, 0);
    5650:	80 e0       	ldi	r24, 0x00	; 0
    5652:	28 de       	rcall	.-944    	; 0x52a4 <nor_read.clone.0>
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    5654:	15 b8       	out	0x05, r1	; 5
	NOR_ADDR2_PORT = address2;
    5656:	12 b8       	out	0x02, r1	; 2
	NOR_ADDR1_PORT = address1;
    5658:	8f e0       	ldi	r24, 0x0F	; 15
    565a:	81 bb       	out	0x11, r24	; 17
	set_address(0x00, 0x00, 0x00); nor_read(NOR_BSS_WORD, 0);
	
	//device code
	set_address(0x00, 0x00, 0x01); nor_read(NOR_BSS_WORD, 0);
	set_address(0x00, 0x00, 0x0E); nor_read(NOR_BSS_WORD, 0);
	set_address(0x00, 0x00, 0x0F); nor_read(NOR_BSS_WORD, 1);
    565c:	81 e0       	ldi	r24, 0x01	; 1
    565e:	22 de       	rcall	.-956    	; 0x52a4 <nor_read.clone.0>
	
	//reset required to exit autoselect command
	nor_reset();
}
    5660:	c0 cf       	rjmp	.-128    	; 0x55e2 <nor_reset>

00005662 <nor_erase_sector>:

void nor_erase_sector(void) {
	NOR_CONT_PORT |= NOR_CONT_OE; //HIGH
    5662:	71 9a       	sbi	0x0e, 1	; 14
	NOR_CONT_PORT &= ~NOR_CONT_CE; //LOW
    5664:	70 98       	cbi	0x0e, 0	; 14

	set_address(_offset_2nddie, 0x05, 0x55); set_data(0x00, 0xAA);
    5666:	90 91 e3 02 	lds	r25, 0x02E3
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    566a:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    566c:	35 e0       	ldi	r19, 0x05	; 5
    566e:	32 b9       	out	0x02, r19	; 2
	NOR_ADDR1_PORT = address1;
    5670:	85 e5       	ldi	r24, 0x55	; 85
    5672:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5674:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    5676:	2a ea       	ldi	r18, 0xAA	; 170
    5678:	2b b9       	out	0x0b, r18	; 11
    567a:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    567c:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    567e:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    5680:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    5682:	42 e0       	ldi	r20, 0x02	; 2
    5684:	42 b9       	out	0x02, r20	; 2
	NOR_ADDR1_PORT = address1;
    5686:	21 bb       	out	0x11, r18	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5688:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    568a:	8b b9       	out	0x0b, r24	; 11
    568c:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    568e:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    5690:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    5692:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    5694:	32 b9       	out	0x02, r19	; 2
	NOR_ADDR1_PORT = address1;
    5696:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5698:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    569a:	50 e8       	ldi	r21, 0x80	; 128
    569c:	5b b9       	out	0x0b, r21	; 11
    569e:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    56a0:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    56a2:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    56a4:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    56a6:	32 b9       	out	0x02, r19	; 2
	NOR_ADDR1_PORT = address1;
    56a8:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    56aa:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    56ac:	2b b9       	out	0x0b, r18	; 11
    56ae:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    56b0:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    56b2:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    56b4:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    56b6:	42 b9       	out	0x02, r20	; 2
	NOR_ADDR1_PORT = address1;
    56b8:	21 bb       	out	0x11, r18	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    56ba:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    56bc:	8b b9       	out	0x0b, r24	; 11
    56be:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    56c0:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    56c2:	75 9a       	sbi	0x0e, 5	; 14
	
	set_address(_offset_2nddie, 0x05, 0x55); set_data(0x00, 0x80);
	set_address(_offset_2nddie, 0x05, 0x55); set_data(0x00, 0xAA);

	set_address(_offset_2nddie, 0x02, 0xAA); set_data(0x00, 0x55);
	set_address(_address3, _address2, _address1); set_data(0x00, 0x30);
    56c4:	20 91 e4 02 	lds	r18, 0x02E4
    56c8:	90 91 e5 02 	lds	r25, 0x02E5
    56cc:	80 91 e6 02 	lds	r24, 0x02E6
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    56d0:	25 b9       	out	0x05, r18	; 5
	NOR_ADDR2_PORT = address2;
    56d2:	92 b9       	out	0x02, r25	; 2
	NOR_ADDR1_PORT = address1;
    56d4:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    56d6:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    56d8:	80 e3       	ldi	r24, 0x30	; 48
    56da:	8b b9       	out	0x0b, r24	; 11
    56dc:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    56de:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    56e0:	75 9a       	sbi	0x0e, 5	; 14
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    56e2:	00 c0       	rjmp	.+0      	; 0x56e4 <nor_erase_sector+0x82>
static inline void wait_for_ryby_long(void) {
	//wait 200ns for RY/BY to become active
	_delay_ns(200);
			
	while (1) {
		if (NOR_CONT_PIN & NOR_CONT_RYBY) break;
    56e4:	66 9b       	sbis	0x0c, 6	; 12
    56e6:	fe cf       	rjmp	.-4      	; 0x56e4 <nor_erase_sector+0x82>

	set_address(_offset_2nddie, 0x02, 0xAA); set_data(0x00, 0x55);
	set_address(_address3, _address2, _address1); set_data(0x00, 0x30);

	wait_for_ryby_long();
}
    56e8:	08 95       	ret

000056ea <nor_erase_chip>:

void nor_erase_chip(void) {
	NOR_CONT_PORT |= NOR_CONT_OE; //HIGH
    56ea:	71 9a       	sbi	0x0e, 1	; 14
	NOR_CONT_PORT &= ~NOR_CONT_CE; //LOW
    56ec:	70 98       	cbi	0x0e, 0	; 14

	set_address(_offset_2nddie, 0x05, 0x55); set_data(0x00, 0xAA);
    56ee:	90 91 e3 02 	lds	r25, 0x02E3
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    56f2:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    56f4:	25 e0       	ldi	r18, 0x05	; 5
    56f6:	22 b9       	out	0x02, r18	; 2
	NOR_ADDR1_PORT = address1;
    56f8:	85 e5       	ldi	r24, 0x55	; 85
    56fa:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    56fc:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    56fe:	3a ea       	ldi	r19, 0xAA	; 170
    5700:	3b b9       	out	0x0b, r19	; 11
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    5702:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    5704:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    5706:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    5708:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    570a:	42 e0       	ldi	r20, 0x02	; 2
    570c:	42 b9       	out	0x02, r20	; 2
	NOR_ADDR1_PORT = address1;
    570e:	31 bb       	out	0x11, r19	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5710:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    5712:	8b b9       	out	0x0b, r24	; 11
    5714:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    5716:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    5718:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    571a:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    571c:	22 b9       	out	0x02, r18	; 2
	NOR_ADDR1_PORT = address1;
    571e:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5720:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    5722:	50 e8       	ldi	r21, 0x80	; 128
    5724:	5b b9       	out	0x0b, r21	; 11
    5726:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    5728:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    572a:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    572c:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    572e:	22 b9       	out	0x02, r18	; 2
	NOR_ADDR1_PORT = address1;
    5730:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5732:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    5734:	3b b9       	out	0x0b, r19	; 11
    5736:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    5738:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    573a:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    573c:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    573e:	42 b9       	out	0x02, r20	; 2
	NOR_ADDR1_PORT = address1;
    5740:	31 bb       	out	0x11, r19	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5742:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    5744:	8b b9       	out	0x0b, r24	; 11
    5746:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    5748:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    574a:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    574c:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    574e:	22 b9       	out	0x02, r18	; 2
	NOR_ADDR1_PORT = address1;
    5750:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    5752:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    5754:	80 e1       	ldi	r24, 0x10	; 16
    5756:	8b b9       	out	0x0b, r24	; 11
    5758:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    575a:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    575c:	75 9a       	sbi	0x0e, 5	; 14
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    575e:	00 c0       	rjmp	.+0      	; 0x5760 <nor_erase_chip+0x76>
static inline void wait_for_ryby_long(void) {
	//wait 200ns for RY/BY to become active
	_delay_ns(200);
			
	while (1) {
		if (NOR_CONT_PIN & NOR_CONT_RYBY) break;
    5760:	66 9b       	sbis	0x0c, 6	; 12
    5762:	fe cf       	rjmp	.-4      	; 0x5760 <nor_erase_chip+0x76>
	set_address(_offset_2nddie, 0x02, 0xAA); set_data(0x00, 0x55);
	set_address(_offset_2nddie, 0x05, 0x55); set_data(0x00, 0x10);
	
	wait_for_ryby_long();
	nor_reset();
}
    5764:	3e cf       	rjmp	.-388    	; 0x55e2 <nor_reset>

00005766 <nor_read>:

void nor_read(const uint32_t block_size, const uint8_t transmit) {
    5766:	af 92       	push	r10
    5768:	bf 92       	push	r11
    576a:	cf 92       	push	r12
    576c:	df 92       	push	r13
    576e:	ef 92       	push	r14
    5770:	ff 92       	push	r15
    5772:	0f 93       	push	r16
    5774:	1f 93       	push	r17
	NOR_DATA1_DDR = NOR_DATA2_DDR = 0x00; // set for input
    5776:	17 b8       	out	0x07, r1	; 7
    5778:	27 b1       	in	r18, 0x07	; 7
    577a:	2a b9       	out	0x0a, r18	; 10
	NOR_DATA1_PORT = NOR_DATA2_PORT = 0x00; //disable pull-ups
    577c:	18 b8       	out	0x08, r1	; 8
    577e:	28 b1       	in	r18, 0x08	; 8
    5780:	2b b9       	out	0x0b, r18	; 11
	
	if (block_size == NOR_BSS_WORD) {
    5782:	62 30       	cpi	r22, 0x02	; 2
    5784:	71 05       	cpc	r23, r1
    5786:	81 05       	cpc	r24, r1
    5788:	91 05       	cpc	r25, r1
    578a:	09 f4       	brne	.+2      	; 0x578e <nor_read+0x28>
    578c:	62 c0       	rjmp	.+196    	; 0x5852 <nor_read+0xec>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    578e:	21 e0       	ldi	r18, 0x01	; 1
    5790:	20 93 e9 00 	sts	0x00E9, r18
		uint32_t addr = 0;

		/* Select the IN stream endpoint */
		Endpoint_SelectEndpoint(IN_EP);

		while (addr < block_size / 2) {
    5794:	5b 01       	movw	r10, r22
    5796:	6c 01       	movw	r12, r24
    5798:	d6 94       	lsr	r13
    579a:	c7 94       	ror	r12
    579c:	b7 94       	ror	r11
    579e:	a7 94       	ror	r10
    57a0:	a1 14       	cp	r10, r1
    57a2:	b1 04       	cpc	r11, r1
    57a4:	c1 04       	cpc	r12, r1
    57a6:	d1 04       	cpc	r13, r1
    57a8:	09 f4       	brne	.+2      	; 0x57ac <nor_read+0x46>
    57aa:	46 c0       	rjmp	.+140    	; 0x5838 <nor_read+0xd2>
    57ac:	ee 24       	eor	r14, r14
    57ae:	ff 24       	eor	r15, r15
    57b0:	87 01       	movw	r16, r14
    57b2:	02 c0       	rjmp	.+4      	; 0x57b8 <nor_read+0x52>
			/* Check if the current endpoint can be written to and that the next sample should be stored */
			while (!Endpoint_IsINReady()) USB_USBTask();
    57b4:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    57b8:	80 91 e8 00 	lds	r24, 0x00E8
    57bc:	80 ff       	sbrs	r24, 0
    57be:	fa cf       	rjmp	.-12     	; 0x57b4 <nor_read+0x4e>
    57c0:	80 91 e6 02 	lds	r24, 0x02E6
    57c4:	30 91 e4 02 	lds	r19, 0x02E4
    57c8:	90 91 e5 02 	lds	r25, 0x02E5
	
	wait_for_ryby_long();
	nor_reset();
}

void nor_read(const uint32_t block_size, const uint8_t transmit) {
    57cc:	48 2f       	mov	r20, r24
    57ce:	40 5e       	subi	r20, 0xE0	; 224
    57d0:	09 c0       	rjmp	.+18     	; 0x57e4 <nor_read+0x7e>
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
    57d2:	9f 5f       	subi	r25, 0xFF	; 255
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;
    57d4:	91 f4       	brne	.+36     	; 0x57fa <nor_read+0x94>
    57d6:	3f 5f       	subi	r19, 0xFF	; 255
    57d8:	20 e0       	ldi	r18, 0x00	; 0

	if (lock_address == 0) return;

	NOR_ADDR3_PORT = _address3; NOR_ADDR2_PORT = _address2; NOR_ADDR1_PORT = _address1;
    57da:	35 b9       	out	0x05, r19	; 5
    57dc:	22 b9       	out	0x02, r18	; 2
    57de:	81 bb       	out	0x11, r24	; 17

		while (addr < block_size / 2) {
			/* Check if the current endpoint can be written to and that the next sample should be stored */
			while (!Endpoint_IsINReady()) USB_USBTask();

			for (i = 0; i < TX_BUFFER_SIZE / 2; ++i) {
    57e0:	84 17       	cp	r24, r20
    57e2:	89 f0       	breq	.+34     	; 0x5806 <nor_read+0xa0>
				NOR_CONT_PORT &= ~NOR_CONT_OE; //LOW
    57e4:	71 98       	cbi	0x0e, 1	; 14
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    57e6:	00 00       	nop
				_delay_ns(90); //flash needs 90ns access time
				Endpoint_Write_8(NOR_DATA2_PIN);
    57e8:	26 b1       	in	r18, 0x06	; 6
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    57ea:	20 93 f1 00 	sts	0x00F1, r18
				Endpoint_Write_8(NOR_DATA1_PIN);
    57ee:	29 b1       	in	r18, 0x09	; 9
    57f0:	20 93 f1 00 	sts	0x00F1, r18
				NOR_CONT_PORT |= NOR_CONT_OE; //HIGH
    57f4:	71 9a       	sbi	0x0e, 1	; 14
	_offset_2nddie = offset;
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
    57f6:	8f 5f       	subi	r24, 0xFF	; 255
	if (_address1 == 0) ++_address2;
    57f8:	61 f3       	breq	.-40     	; 0x57d2 <nor_read+0x6c>
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;
    57fa:	29 2f       	mov	r18, r25

	if (lock_address == 0) return;

	NOR_ADDR3_PORT = _address3; NOR_ADDR2_PORT = _address2; NOR_ADDR1_PORT = _address1;
    57fc:	35 b9       	out	0x05, r19	; 5
    57fe:	22 b9       	out	0x02, r18	; 2
    5800:	81 bb       	out	0x11, r24	; 17

		while (addr < block_size / 2) {
			/* Check if the current endpoint can be written to and that the next sample should be stored */
			while (!Endpoint_IsINReady()) USB_USBTask();

			for (i = 0; i < TX_BUFFER_SIZE / 2; ++i) {
    5802:	84 17       	cp	r24, r20
    5804:	79 f7       	brne	.-34     	; 0x57e4 <nor_read+0x7e>
    5806:	40 e2       	ldi	r20, 0x20	; 32
    5808:	50 e0       	ldi	r21, 0x00	; 0
    580a:	60 e0       	ldi	r22, 0x00	; 0
    580c:	70 e0       	ldi	r23, 0x00	; 0
    580e:	e4 0e       	add	r14, r20
    5810:	f5 1e       	adc	r15, r21
    5812:	06 1f       	adc	r16, r22
    5814:	17 1f       	adc	r17, r23
    5816:	80 93 e6 02 	sts	0x02E6, r24
    581a:	30 93 e4 02 	sts	0x02E4, r19
    581e:	90 93 e5 02 	sts	0x02E5, r25
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5822:	80 91 e8 00 	lds	r24, 0x00E8
    5826:	8e 77       	andi	r24, 0x7E	; 126
    5828:	80 93 e8 00 	sts	0x00E8, r24
		uint32_t addr = 0;

		/* Select the IN stream endpoint */
		Endpoint_SelectEndpoint(IN_EP);

		while (addr < block_size / 2) {
    582c:	ea 14       	cp	r14, r10
    582e:	fb 04       	cpc	r15, r11
    5830:	0c 05       	cpc	r16, r12
    5832:	1d 05       	cpc	r17, r13
    5834:	08 f4       	brcc	.+2      	; 0x5838 <nor_read+0xd2>
    5836:	c0 cf       	rjmp	.-128    	; 0x57b8 <nor_read+0x52>
			Endpoint_ClearIN();
			//USB_USBTask();
		}
	}
			
	NOR_DATA1_DDR = NOR_DATA2_DDR = 0xFF;	// set for output
    5838:	8f ef       	ldi	r24, 0xFF	; 255
    583a:	87 b9       	out	0x07, r24	; 7
    583c:	87 b1       	in	r24, 0x07	; 7
    583e:	8a b9       	out	0x0a, r24	; 10
}
    5840:	1f 91       	pop	r17
    5842:	0f 91       	pop	r16
    5844:	ff 90       	pop	r15
    5846:	ef 90       	pop	r14
    5848:	df 90       	pop	r13
    584a:	cf 90       	pop	r12
    584c:	bf 90       	pop	r11
    584e:	af 90       	pop	r10
    5850:	08 95       	ret
void nor_read(const uint32_t block_size, const uint8_t transmit) {
	NOR_DATA1_DDR = NOR_DATA2_DDR = 0x00; // set for input
	NOR_DATA1_PORT = NOR_DATA2_PORT = 0x00; //disable pull-ups
	
	if (block_size == NOR_BSS_WORD) {
		NOR_CONT_PORT &= ~NOR_CONT_OE; //LOW
    5852:	71 98       	cbi	0x0e, 1	; 14
    5854:	00 00       	nop
		_delay_ns(90); //flash needs 90ns access time
		usbio_set_byte(NOR_DATA2_PIN, 0);
    5856:	96 b1       	in	r25, 0x06	; 6
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    5858:	80 91 ea 02 	lds	r24, 0x02EA
    585c:	e8 2f       	mov	r30, r24
    585e:	f0 e0       	ldi	r31, 0x00	; 0
    5860:	e5 51       	subi	r30, 0x15	; 21
    5862:	fd 4f       	sbci	r31, 0xFD	; 253
    5864:	90 83       	st	Z, r25
    5866:	8f 5f       	subi	r24, 0xFF	; 255
    5868:	80 93 ea 02 	sts	0x02EA, r24
		usbio_set_byte(NOR_DATA1_PIN, transmit);
    586c:	99 b1       	in	r25, 0x09	; 9
    586e:	e8 2f       	mov	r30, r24
    5870:	f0 e0       	ldi	r31, 0x00	; 0
    5872:	e5 51       	subi	r30, 0x15	; 21
    5874:	fd 4f       	sbci	r31, 0xFD	; 253
    5876:	90 83       	st	Z, r25
    5878:	8f 5f       	subi	r24, 0xFF	; 255
    587a:	80 93 ea 02 	sts	0x02EA, r24
	
	if (transmit) {
    587e:	44 23       	and	r20, r20
    5880:	09 f4       	brne	.+2      	; 0x5884 <nor_read+0x11e>
    5882:	14 c1       	rjmp	.+552    	; 0x5aac <nor_read+0x346>
		_tx_buffer_ix = 0;
    5884:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5888:	81 e0       	ldi	r24, 0x01	; 1
    588a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    588e:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    5892:	80 fd       	sbrc	r24, 0
    5894:	06 c0       	rjmp	.+12     	; 0x58a2 <nor_read+0x13c>
		USB_USBTask();
    5896:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    589a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    589e:	80 ff       	sbrs	r24, 0
    58a0:	fa cf       	rjmp	.-12     	; 0x5896 <nor_read+0x130>
		USB_USBTask();

	Endpoint_Write_8(_tx_buffer[0]);
    58a2:	80 91 eb 02 	lds	r24, 0x02EB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    58a6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[1]);
    58aa:	80 91 ec 02 	lds	r24, 0x02EC
    58ae:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[2]);
    58b2:	80 91 ed 02 	lds	r24, 0x02ED
    58b6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[3]);
    58ba:	80 91 ee 02 	lds	r24, 0x02EE
    58be:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[4]);
    58c2:	80 91 ef 02 	lds	r24, 0x02EF
    58c6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[5]);
    58ca:	80 91 f0 02 	lds	r24, 0x02F0
    58ce:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[6]);
    58d2:	80 91 f1 02 	lds	r24, 0x02F1
    58d6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[7]);
    58da:	80 91 f2 02 	lds	r24, 0x02F2
    58de:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[8]);
    58e2:	80 91 f3 02 	lds	r24, 0x02F3
    58e6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[9]);
    58ea:	80 91 f4 02 	lds	r24, 0x02F4
    58ee:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[10]);
    58f2:	80 91 f5 02 	lds	r24, 0x02F5
    58f6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[11]);
    58fa:	80 91 f6 02 	lds	r24, 0x02F6
    58fe:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[12]);
    5902:	80 91 f7 02 	lds	r24, 0x02F7
    5906:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[13]);
    590a:	80 91 f8 02 	lds	r24, 0x02F8
    590e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[14]);
    5912:	80 91 f9 02 	lds	r24, 0x02F9
    5916:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[15]);
    591a:	80 91 fa 02 	lds	r24, 0x02FA
    591e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[16]);
    5922:	80 91 fb 02 	lds	r24, 0x02FB
    5926:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[17]);
    592a:	80 91 fc 02 	lds	r24, 0x02FC
    592e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[18]);
    5932:	80 91 fd 02 	lds	r24, 0x02FD
    5936:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[19]);
    593a:	80 91 fe 02 	lds	r24, 0x02FE
    593e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[20]);
    5942:	80 91 ff 02 	lds	r24, 0x02FF
    5946:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[21]);
    594a:	80 91 00 03 	lds	r24, 0x0300
    594e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[22]);
    5952:	80 91 01 03 	lds	r24, 0x0301
    5956:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[23]);
    595a:	80 91 02 03 	lds	r24, 0x0302
    595e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[24]);
    5962:	80 91 03 03 	lds	r24, 0x0303
    5966:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[25]);
    596a:	80 91 04 03 	lds	r24, 0x0304
    596e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[26]);
    5972:	80 91 05 03 	lds	r24, 0x0305
    5976:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[27]);
    597a:	80 91 06 03 	lds	r24, 0x0306
    597e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[28]);
    5982:	80 91 07 03 	lds	r24, 0x0307
    5986:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[29]);
    598a:	80 91 08 03 	lds	r24, 0x0308
    598e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[30]);
    5992:	80 91 09 03 	lds	r24, 0x0309
    5996:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[31]);
    599a:	80 91 0a 03 	lds	r24, 0x030A
    599e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[32]);
    59a2:	80 91 0b 03 	lds	r24, 0x030B
    59a6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[33]);
    59aa:	80 91 0c 03 	lds	r24, 0x030C
    59ae:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[34]);
    59b2:	80 91 0d 03 	lds	r24, 0x030D
    59b6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[35]);
    59ba:	80 91 0e 03 	lds	r24, 0x030E
    59be:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[36]);
    59c2:	80 91 0f 03 	lds	r24, 0x030F
    59c6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[37]);
    59ca:	80 91 10 03 	lds	r24, 0x0310
    59ce:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[38]);
    59d2:	80 91 11 03 	lds	r24, 0x0311
    59d6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[39]);
    59da:	80 91 12 03 	lds	r24, 0x0312
    59de:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[40]);
    59e2:	80 91 13 03 	lds	r24, 0x0313
    59e6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[41]);
    59ea:	80 91 14 03 	lds	r24, 0x0314
    59ee:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[42]);
    59f2:	80 91 15 03 	lds	r24, 0x0315
    59f6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[43]);
    59fa:	80 91 16 03 	lds	r24, 0x0316
    59fe:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[44]);
    5a02:	80 91 17 03 	lds	r24, 0x0317
    5a06:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[45]);
    5a0a:	80 91 18 03 	lds	r24, 0x0318
    5a0e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[46]);
    5a12:	80 91 19 03 	lds	r24, 0x0319
    5a16:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[47]);
    5a1a:	80 91 1a 03 	lds	r24, 0x031A
    5a1e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[48]);
    5a22:	80 91 1b 03 	lds	r24, 0x031B
    5a26:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[49]);
    5a2a:	80 91 1c 03 	lds	r24, 0x031C
    5a2e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[50]);
    5a32:	80 91 1d 03 	lds	r24, 0x031D
    5a36:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[51]);
    5a3a:	80 91 1e 03 	lds	r24, 0x031E
    5a3e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[52]);
    5a42:	80 91 1f 03 	lds	r24, 0x031F
    5a46:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[53]);
    5a4a:	80 91 20 03 	lds	r24, 0x0320
    5a4e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[54]);
    5a52:	80 91 21 03 	lds	r24, 0x0321
    5a56:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[55]);
    5a5a:	80 91 22 03 	lds	r24, 0x0322
    5a5e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[56]);
    5a62:	80 91 23 03 	lds	r24, 0x0323
    5a66:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[57]);
    5a6a:	80 91 24 03 	lds	r24, 0x0324
    5a6e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[58]);
    5a72:	80 91 25 03 	lds	r24, 0x0325
    5a76:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[59]);
    5a7a:	80 91 26 03 	lds	r24, 0x0326
    5a7e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[60]);
    5a82:	80 91 27 03 	lds	r24, 0x0327
    5a86:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[61]);
    5a8a:	80 91 28 03 	lds	r24, 0x0328
    5a8e:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[62]);
    5a92:	80 91 29 03 	lds	r24, 0x0329
    5a96:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[63]);
    5a9a:	80 91 2a 03 	lds	r24, 0x032A
    5a9e:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    5aa2:	80 91 e8 00 	lds	r24, 0x00E8
    5aa6:	8e 77       	andi	r24, 0x7E	; 126
    5aa8:	80 93 e8 00 	sts	0x00E8, r24
		NOR_CONT_PORT |= NOR_CONT_OE; //HIGH
    5aac:	71 9a       	sbi	0x0e, 1	; 14
    5aae:	c4 ce       	rjmp	.-632    	; 0x5838 <nor_read+0xd2>

00005ab0 <nor_write_word>:
			
	NOR_DATA1_DDR = NOR_DATA2_DDR = 0xFF;	// set for output
}

void nor_write_word(void) {
	NOR_CONT_PORT |= NOR_CONT_OE; //HIGH
    5ab0:	71 9a       	sbi	0x0e, 1	; 14
	NOR_CONT_PORT &= ~(NOR_CONT_WE | NOR_CONT_CE); //LOW
    5ab2:	8e b1       	in	r24, 0x0e	; 14
    5ab4:	8e 7d       	andi	r24, 0xDE	; 222
    5ab6:	8e b9       	out	0x0e, r24	; 14
}

static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
    5ab8:	80 91 6c 03 	lds	r24, 0x036C
    5abc:	90 91 6d 03 	lds	r25, 0x036D
    5ac0:	9c 01       	movw	r18, r24
    5ac2:	00 97       	sbiw	r24, 0x00	; 0
    5ac4:	09 f0       	breq	.+2      	; 0x5ac8 <nor_write_word+0x18>
    5ac6:	7a c2       	rjmp	.+1268   	; 0x5fbc <nor_write_word+0x50c>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5ac8:	82 e0       	ldi	r24, 0x02	; 2
    5aca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5ace:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    5ad2:	82 fd       	sbrc	r24, 2
    5ad4:	06 c0       	rjmp	.+12     	; 0x5ae2 <nor_write_word+0x32>
		USB_USBTask();
    5ad6:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    5ada:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    5ade:	82 ff       	sbrs	r24, 2
    5ae0:	fa cf       	rjmp	.-12     	; 0x5ad6 <nor_write_word+0x26>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    5ae2:	30 91 f1 00 	lds	r19, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    5ae6:	30 93 2b 03 	sts	0x032B, r19
    5aea:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    5aee:	20 93 2c 03 	sts	0x032C, r18
    5af2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    5af6:	80 93 2d 03 	sts	0x032D, r24
    5afa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    5afe:	80 93 2e 03 	sts	0x032E, r24
    5b02:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    5b06:	80 93 2f 03 	sts	0x032F, r24
    5b0a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    5b0e:	80 93 30 03 	sts	0x0330, r24
    5b12:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    5b16:	80 93 31 03 	sts	0x0331, r24
    5b1a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    5b1e:	80 93 32 03 	sts	0x0332, r24
    5b22:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    5b26:	80 93 33 03 	sts	0x0333, r24
    5b2a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    5b2e:	80 93 34 03 	sts	0x0334, r24
    5b32:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    5b36:	80 93 35 03 	sts	0x0335, r24
    5b3a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    5b3e:	80 93 36 03 	sts	0x0336, r24
    5b42:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    5b46:	80 93 37 03 	sts	0x0337, r24
    5b4a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    5b4e:	80 93 38 03 	sts	0x0338, r24
    5b52:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    5b56:	80 93 39 03 	sts	0x0339, r24
    5b5a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    5b5e:	80 93 3a 03 	sts	0x033A, r24
    5b62:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    5b66:	80 93 3b 03 	sts	0x033B, r24
    5b6a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    5b6e:	80 93 3c 03 	sts	0x033C, r24
    5b72:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    5b76:	80 93 3d 03 	sts	0x033D, r24
    5b7a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    5b7e:	80 93 3e 03 	sts	0x033E, r24
    5b82:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    5b86:	80 93 3f 03 	sts	0x033F, r24
    5b8a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    5b8e:	80 93 40 03 	sts	0x0340, r24
    5b92:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    5b96:	80 93 41 03 	sts	0x0341, r24
    5b9a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    5b9e:	80 93 42 03 	sts	0x0342, r24
    5ba2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    5ba6:	80 93 43 03 	sts	0x0343, r24
    5baa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    5bae:	80 93 44 03 	sts	0x0344, r24
    5bb2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    5bb6:	80 93 45 03 	sts	0x0345, r24
    5bba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    5bbe:	80 93 46 03 	sts	0x0346, r24
    5bc2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    5bc6:	80 93 47 03 	sts	0x0347, r24
    5bca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    5bce:	80 93 48 03 	sts	0x0348, r24
    5bd2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    5bd6:	80 93 49 03 	sts	0x0349, r24
    5bda:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    5bde:	80 93 4a 03 	sts	0x034A, r24
    5be2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    5be6:	80 93 4b 03 	sts	0x034B, r24
    5bea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    5bee:	80 93 4c 03 	sts	0x034C, r24
    5bf2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    5bf6:	80 93 4d 03 	sts	0x034D, r24
    5bfa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    5bfe:	80 93 4e 03 	sts	0x034E, r24
    5c02:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    5c06:	80 93 4f 03 	sts	0x034F, r24
    5c0a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    5c0e:	80 93 50 03 	sts	0x0350, r24
    5c12:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    5c16:	80 93 51 03 	sts	0x0351, r24
    5c1a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    5c1e:	80 93 52 03 	sts	0x0352, r24
    5c22:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    5c26:	80 93 53 03 	sts	0x0353, r24
    5c2a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    5c2e:	80 93 54 03 	sts	0x0354, r24
    5c32:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    5c36:	80 93 55 03 	sts	0x0355, r24
    5c3a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    5c3e:	80 93 56 03 	sts	0x0356, r24
    5c42:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    5c46:	80 93 57 03 	sts	0x0357, r24
    5c4a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    5c4e:	80 93 58 03 	sts	0x0358, r24
    5c52:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    5c56:	80 93 59 03 	sts	0x0359, r24
    5c5a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    5c5e:	80 93 5a 03 	sts	0x035A, r24
    5c62:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    5c66:	80 93 5b 03 	sts	0x035B, r24
    5c6a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    5c6e:	80 93 5c 03 	sts	0x035C, r24
    5c72:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    5c76:	80 93 5d 03 	sts	0x035D, r24
    5c7a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    5c7e:	80 93 5e 03 	sts	0x035E, r24
    5c82:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    5c86:	80 93 5f 03 	sts	0x035F, r24
    5c8a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    5c8e:	80 93 60 03 	sts	0x0360, r24
    5c92:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    5c96:	80 93 61 03 	sts	0x0361, r24
    5c9a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    5c9e:	80 93 62 03 	sts	0x0362, r24
    5ca2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    5ca6:	80 93 63 03 	sts	0x0363, r24
    5caa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    5cae:	80 93 64 03 	sts	0x0364, r24
    5cb2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    5cb6:	80 93 65 03 	sts	0x0365, r24
    5cba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    5cbe:	80 93 66 03 	sts	0x0366, r24
    5cc2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    5cc6:	80 93 67 03 	sts	0x0367, r24
    5cca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    5cce:	80 93 68 03 	sts	0x0368, r24
    5cd2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    5cd6:	80 93 69 03 	sts	0x0369, r24
    5cda:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    5cde:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5ce2:	80 91 e8 00 	lds	r24, 0x00E8
    5ce6:	8b 77       	andi	r24, 0x7B	; 123
    5ce8:	80 93 e8 00 	sts	0x00E8, r24
static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
    5cec:	93 2f       	mov	r25, r19
    5cee:	80 e0       	ldi	r24, 0x00	; 0
    5cf0:	30 e0       	ldi	r19, 0x00	; 0
    5cf2:	28 2b       	or	r18, r24
    5cf4:	39 2b       	or	r19, r25
    5cf6:	30 93 6d 03 	sts	0x036D, r19
    5cfa:	20 93 6c 03 	sts	0x036C, r18
		_rx_buffer_ix = 2;
    5cfe:	82 e0       	ldi	r24, 0x02	; 2
    5d00:	80 93 e8 02 	sts	0x02E8, r24
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    5d04:	21 15       	cp	r18, r1
    5d06:	31 05       	cpc	r19, r1
    5d08:	09 f0       	breq	.+2      	; 0x5d0c <nor_write_word+0x25c>
    5d0a:	7e c1       	rjmp	.+764    	; 0x6008 <nor_write_word+0x558>
    5d0c:	8f ef       	ldi	r24, 0xFF	; 255
	NOR_DATA2_PORT = usbio_get_byte();
    5d0e:	88 b9       	out	0x08, r24	; 8
}

static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
    5d10:	80 91 6c 03 	lds	r24, 0x036C
    5d14:	90 91 6d 03 	lds	r25, 0x036D
    5d18:	9c 01       	movw	r18, r24
    5d1a:	00 97       	sbiw	r24, 0x00	; 0
    5d1c:	09 f0       	breq	.+2      	; 0x5d20 <nor_write_word+0x270>
    5d1e:	39 c1       	rjmp	.+626    	; 0x5f92 <nor_write_word+0x4e2>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    5d20:	82 e0       	ldi	r24, 0x02	; 2
    5d22:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    5d26:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    5d2a:	82 fd       	sbrc	r24, 2
    5d2c:	06 c0       	rjmp	.+12     	; 0x5d3a <nor_write_word+0x28a>
		USB_USBTask();
    5d2e:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    5d32:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    5d36:	82 ff       	sbrs	r24, 2
    5d38:	fa cf       	rjmp	.-12     	; 0x5d2e <nor_write_word+0x27e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    5d3a:	30 91 f1 00 	lds	r19, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    5d3e:	30 93 2b 03 	sts	0x032B, r19
    5d42:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    5d46:	20 93 2c 03 	sts	0x032C, r18
    5d4a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    5d4e:	80 93 2d 03 	sts	0x032D, r24
    5d52:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    5d56:	80 93 2e 03 	sts	0x032E, r24
    5d5a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    5d5e:	80 93 2f 03 	sts	0x032F, r24
    5d62:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    5d66:	80 93 30 03 	sts	0x0330, r24
    5d6a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    5d6e:	80 93 31 03 	sts	0x0331, r24
    5d72:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    5d76:	80 93 32 03 	sts	0x0332, r24
    5d7a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    5d7e:	80 93 33 03 	sts	0x0333, r24
    5d82:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    5d86:	80 93 34 03 	sts	0x0334, r24
    5d8a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    5d8e:	80 93 35 03 	sts	0x0335, r24
    5d92:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    5d96:	80 93 36 03 	sts	0x0336, r24
    5d9a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    5d9e:	80 93 37 03 	sts	0x0337, r24
    5da2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    5da6:	80 93 38 03 	sts	0x0338, r24
    5daa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    5dae:	80 93 39 03 	sts	0x0339, r24
    5db2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    5db6:	80 93 3a 03 	sts	0x033A, r24
    5dba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    5dbe:	80 93 3b 03 	sts	0x033B, r24
    5dc2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    5dc6:	80 93 3c 03 	sts	0x033C, r24
    5dca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    5dce:	80 93 3d 03 	sts	0x033D, r24
    5dd2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    5dd6:	80 93 3e 03 	sts	0x033E, r24
    5dda:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    5dde:	80 93 3f 03 	sts	0x033F, r24
    5de2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    5de6:	80 93 40 03 	sts	0x0340, r24
    5dea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    5dee:	80 93 41 03 	sts	0x0341, r24
    5df2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    5df6:	80 93 42 03 	sts	0x0342, r24
    5dfa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    5dfe:	80 93 43 03 	sts	0x0343, r24
    5e02:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    5e06:	80 93 44 03 	sts	0x0344, r24
    5e0a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    5e0e:	80 93 45 03 	sts	0x0345, r24
    5e12:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    5e16:	80 93 46 03 	sts	0x0346, r24
    5e1a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    5e1e:	80 93 47 03 	sts	0x0347, r24
    5e22:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    5e26:	80 93 48 03 	sts	0x0348, r24
    5e2a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    5e2e:	80 93 49 03 	sts	0x0349, r24
    5e32:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    5e36:	80 93 4a 03 	sts	0x034A, r24
    5e3a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    5e3e:	80 93 4b 03 	sts	0x034B, r24
    5e42:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    5e46:	80 93 4c 03 	sts	0x034C, r24
    5e4a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    5e4e:	80 93 4d 03 	sts	0x034D, r24
    5e52:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    5e56:	80 93 4e 03 	sts	0x034E, r24
    5e5a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    5e5e:	80 93 4f 03 	sts	0x034F, r24
    5e62:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    5e66:	80 93 50 03 	sts	0x0350, r24
    5e6a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    5e6e:	80 93 51 03 	sts	0x0351, r24
    5e72:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    5e76:	80 93 52 03 	sts	0x0352, r24
    5e7a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    5e7e:	80 93 53 03 	sts	0x0353, r24
    5e82:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    5e86:	80 93 54 03 	sts	0x0354, r24
    5e8a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    5e8e:	80 93 55 03 	sts	0x0355, r24
    5e92:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    5e96:	80 93 56 03 	sts	0x0356, r24
    5e9a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    5e9e:	80 93 57 03 	sts	0x0357, r24
    5ea2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    5ea6:	80 93 58 03 	sts	0x0358, r24
    5eaa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    5eae:	80 93 59 03 	sts	0x0359, r24
    5eb2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    5eb6:	80 93 5a 03 	sts	0x035A, r24
    5eba:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    5ebe:	80 93 5b 03 	sts	0x035B, r24
    5ec2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    5ec6:	80 93 5c 03 	sts	0x035C, r24
    5eca:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    5ece:	80 93 5d 03 	sts	0x035D, r24
    5ed2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    5ed6:	80 93 5e 03 	sts	0x035E, r24
    5eda:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    5ede:	80 93 5f 03 	sts	0x035F, r24
    5ee2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    5ee6:	80 93 60 03 	sts	0x0360, r24
    5eea:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    5eee:	80 93 61 03 	sts	0x0361, r24
    5ef2:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    5ef6:	80 93 62 03 	sts	0x0362, r24
    5efa:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    5efe:	80 93 63 03 	sts	0x0363, r24
    5f02:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    5f06:	80 93 64 03 	sts	0x0364, r24
    5f0a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    5f0e:	80 93 65 03 	sts	0x0365, r24
    5f12:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    5f16:	80 93 66 03 	sts	0x0366, r24
    5f1a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    5f1e:	80 93 67 03 	sts	0x0367, r24
    5f22:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    5f26:	80 93 68 03 	sts	0x0368, r24
    5f2a:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    5f2e:	80 93 69 03 	sts	0x0369, r24
    5f32:	80 91 f1 00 	lds	r24, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    5f36:	80 93 6a 03 	sts	0x036A, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    5f3a:	80 91 e8 00 	lds	r24, 0x00E8
    5f3e:	8b 77       	andi	r24, 0x7B	; 123
    5f40:	80 93 e8 00 	sts	0x00E8, r24
static inline int16_t usbio_get_byte(void) __attribute__ ((always_inline));
static inline int16_t usbio_get_byte(void) {
	//first 2 bytes of packet equal buffer size
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
    5f44:	93 2f       	mov	r25, r19
    5f46:	80 e0       	ldi	r24, 0x00	; 0
    5f48:	30 e0       	ldi	r19, 0x00	; 0
    5f4a:	28 2b       	or	r18, r24
    5f4c:	39 2b       	or	r19, r25
    5f4e:	30 93 6d 03 	sts	0x036D, r19
    5f52:	20 93 6c 03 	sts	0x036C, r18
		_rx_buffer_ix = 2;
    5f56:	82 e0       	ldi	r24, 0x02	; 2
    5f58:	80 93 e8 02 	sts	0x02E8, r24
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    5f5c:	21 15       	cp	r18, r1
    5f5e:	31 05       	cpc	r19, r1
    5f60:	09 f0       	breq	.+2      	; 0x5f64 <nor_write_word+0x4b4>
    5f62:	58 c0       	rjmp	.+176    	; 0x6014 <nor_write_word+0x564>
    5f64:	8f ef       	ldi	r24, 0xFF	; 255
	NOR_DATA1_PORT = usbio_get_byte();
    5f66:	8b b9       	out	0x0b, r24	; 11
    5f68:	00 00       	nop
	_delay_ns(90); //flash needs 90ns access time
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    5f6a:	75 9a       	sbi	0x0e, 5	; 14
	if (_increment_address) increment_address(1);
    5f6c:	80 91 e7 02 	lds	r24, 0x02E7
    5f70:	88 23       	and	r24, r24
    5f72:	71 f0       	breq	.+28     	; 0x5f90 <nor_write_word+0x4e0>
	_offset_2nddie = offset;
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
    5f74:	80 91 e6 02 	lds	r24, 0x02E6
    5f78:	8f 5f       	subi	r24, 0xFF	; 255
    5f7a:	80 93 e6 02 	sts	0x02E6, r24
	if (_address1 == 0) ++_address2;
    5f7e:	88 23       	and	r24, r24
    5f80:	99 f1       	breq	.+102    	; 0x5fe8 <nor_write_word+0x538>
    5f82:	20 91 e4 02 	lds	r18, 0x02E4
    5f86:	90 91 e5 02 	lds	r25, 0x02E5
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;

	if (lock_address == 0) return;

	NOR_ADDR3_PORT = _address3; NOR_ADDR2_PORT = _address2; NOR_ADDR1_PORT = _address1;
    5f8a:	25 b9       	out	0x05, r18	; 5
    5f8c:	92 b9       	out	0x02, r25	; 2
    5f8e:	81 bb       	out	0x11, r24	; 17
    5f90:	08 95       	ret
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
    5f92:	e0 91 e8 02 	lds	r30, 0x02E8
    5f96:	e0 34       	cpi	r30, 0x40	; 64
    5f98:	09 f4       	brne	.+2      	; 0x5f9c <nor_write_word+0x4ec>
    5f9a:	42 c0       	rjmp	.+132    	; 0x6020 <nor_write_word+0x570>
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    5f9c:	e0 34       	cpi	r30, 0x40	; 64
    5f9e:	10 f7       	brcc	.-60     	; 0x5f64 <nor_write_word+0x4b4>
		--_rx_buffer_size;
    5fa0:	21 50       	subi	r18, 0x01	; 1
    5fa2:	30 40       	sbci	r19, 0x00	; 0
    5fa4:	30 93 6d 03 	sts	0x036D, r19
    5fa8:	20 93 6c 03 	sts	0x036C, r18
		++_rx_buffer_ix;
    5fac:	ef 5f       	subi	r30, 0xFF	; 255
    5fae:	e0 93 e8 02 	sts	0x02E8, r30
		return _rx_buffer[_rx_buffer_ix - 1];
    5fb2:	f0 e0       	ldi	r31, 0x00	; 0
    5fb4:	e6 5d       	subi	r30, 0xD6	; 214
    5fb6:	fc 4f       	sbci	r31, 0xFC	; 252
    5fb8:	80 81       	ld	r24, Z
    5fba:	d5 cf       	rjmp	.-86     	; 0x5f66 <nor_write_word+0x4b6>
	if (_rx_buffer_size == 0) {
		receive_rx_buffer();
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
    5fbc:	e0 91 e8 02 	lds	r30, 0x02E8
    5fc0:	e0 34       	cpi	r30, 0x40	; 64
    5fc2:	09 f4       	brne	.+2      	; 0x5fc6 <nor_write_word+0x516>
    5fc4:	47 c1       	rjmp	.+654    	; 0x6254 <nor_write_word+0x7a4>
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    5fc6:	e0 34       	cpi	r30, 0x40	; 64
    5fc8:	08 f0       	brcs	.+2      	; 0x5fcc <nor_write_word+0x51c>
    5fca:	a0 ce       	rjmp	.-704    	; 0x5d0c <nor_write_word+0x25c>
		--_rx_buffer_size;
    5fcc:	21 50       	subi	r18, 0x01	; 1
    5fce:	30 40       	sbci	r19, 0x00	; 0
    5fd0:	30 93 6d 03 	sts	0x036D, r19
    5fd4:	20 93 6c 03 	sts	0x036C, r18
		++_rx_buffer_ix;
    5fd8:	ef 5f       	subi	r30, 0xFF	; 255
    5fda:	e0 93 e8 02 	sts	0x02E8, r30
		return _rx_buffer[_rx_buffer_ix - 1];
    5fde:	f0 e0       	ldi	r31, 0x00	; 0
    5fe0:	e6 5d       	subi	r30, 0xD6	; 214
    5fe2:	fc 4f       	sbci	r31, 0xFC	; 252
    5fe4:	80 81       	ld	r24, Z
    5fe6:	93 ce       	rjmp	.-730    	; 0x5d0e <nor_write_word+0x25e>
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
    5fe8:	90 91 e5 02 	lds	r25, 0x02E5
    5fec:	9f 5f       	subi	r25, 0xFF	; 255
    5fee:	90 93 e5 02 	sts	0x02E5, r25
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;
    5ff2:	99 23       	and	r25, r25
    5ff4:	31 f4       	brne	.+12     	; 0x6002 <nor_write_word+0x552>
    5ff6:	20 91 e4 02 	lds	r18, 0x02E4
    5ffa:	2f 5f       	subi	r18, 0xFF	; 255
    5ffc:	20 93 e4 02 	sts	0x02E4, r18
    6000:	c4 cf       	rjmp	.-120    	; 0x5f8a <nor_write_word+0x4da>
    6002:	20 91 e4 02 	lds	r18, 0x02E4
    6006:	c1 cf       	rjmp	.-126    	; 0x5f8a <nor_write_word+0x4da>
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
	}
	
	if ((_rx_buffer_size > 0) && (_rx_buffer_ix < RX_BUFFER_SIZE)) {
    6008:	e0 91 e8 02 	lds	r30, 0x02E8
    600c:	e0 34       	cpi	r30, 0x40	; 64
    600e:	08 f0       	brcs	.+2      	; 0x6012 <nor_write_word+0x562>
    6010:	7d ce       	rjmp	.-774    	; 0x5d0c <nor_write_word+0x25c>
    6012:	dc cf       	rjmp	.-72     	; 0x5fcc <nor_write_word+0x51c>
    6014:	e0 91 e8 02 	lds	r30, 0x02E8
    6018:	e0 34       	cpi	r30, 0x40	; 64
    601a:	08 f0       	brcs	.+2      	; 0x601e <nor_write_word+0x56e>
    601c:	a3 cf       	rjmp	.-186    	; 0x5f64 <nor_write_word+0x4b4>
    601e:	c0 cf       	rjmp	.-128    	; 0x5fa0 <nor_write_word+0x4f0>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6020:	22 e0       	ldi	r18, 0x02	; 2
    6022:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    6026:	20 91 e8 00 	lds	r18, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    602a:	22 fd       	sbrc	r18, 2
    602c:	0a c0       	rjmp	.+20     	; 0x6042 <nor_write_word+0x592>
		USB_USBTask();
    602e:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    6032:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    6036:	82 ff       	sbrs	r24, 2
    6038:	fa cf       	rjmp	.-12     	; 0x602e <nor_write_word+0x57e>
    603a:	80 91 6c 03 	lds	r24, 0x036C
    603e:	90 91 6d 03 	lds	r25, 0x036D
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    6042:	20 91 f1 00 	lds	r18, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    6046:	20 93 2b 03 	sts	0x032B, r18
    604a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    604e:	20 93 2c 03 	sts	0x032C, r18
    6052:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    6056:	20 93 2d 03 	sts	0x032D, r18
    605a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    605e:	20 93 2e 03 	sts	0x032E, r18
    6062:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    6066:	20 93 2f 03 	sts	0x032F, r18
    606a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    606e:	20 93 30 03 	sts	0x0330, r18
    6072:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    6076:	20 93 31 03 	sts	0x0331, r18
    607a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    607e:	20 93 32 03 	sts	0x0332, r18
    6082:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    6086:	20 93 33 03 	sts	0x0333, r18
    608a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    608e:	20 93 34 03 	sts	0x0334, r18
    6092:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    6096:	20 93 35 03 	sts	0x0335, r18
    609a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    609e:	20 93 36 03 	sts	0x0336, r18
    60a2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    60a6:	20 93 37 03 	sts	0x0337, r18
    60aa:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    60ae:	20 93 38 03 	sts	0x0338, r18
    60b2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    60b6:	20 93 39 03 	sts	0x0339, r18
    60ba:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    60be:	20 93 3a 03 	sts	0x033A, r18
    60c2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    60c6:	20 93 3b 03 	sts	0x033B, r18
    60ca:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    60ce:	20 93 3c 03 	sts	0x033C, r18
    60d2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    60d6:	20 93 3d 03 	sts	0x033D, r18
    60da:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    60de:	20 93 3e 03 	sts	0x033E, r18
    60e2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    60e6:	20 93 3f 03 	sts	0x033F, r18
    60ea:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    60ee:	20 93 40 03 	sts	0x0340, r18
    60f2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    60f6:	20 93 41 03 	sts	0x0341, r18
    60fa:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    60fe:	20 93 42 03 	sts	0x0342, r18
    6102:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    6106:	20 93 43 03 	sts	0x0343, r18
    610a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    610e:	20 93 44 03 	sts	0x0344, r18
    6112:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    6116:	20 93 45 03 	sts	0x0345, r18
    611a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    611e:	20 93 46 03 	sts	0x0346, r18
    6122:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    6126:	20 93 47 03 	sts	0x0347, r18
    612a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    612e:	20 93 48 03 	sts	0x0348, r18
    6132:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    6136:	20 93 49 03 	sts	0x0349, r18
    613a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    613e:	20 93 4a 03 	sts	0x034A, r18
    6142:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    6146:	20 93 4b 03 	sts	0x034B, r18
    614a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    614e:	20 93 4c 03 	sts	0x034C, r18
    6152:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    6156:	20 93 4d 03 	sts	0x034D, r18
    615a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    615e:	20 93 4e 03 	sts	0x034E, r18
    6162:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    6166:	20 93 4f 03 	sts	0x034F, r18
    616a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    616e:	20 93 50 03 	sts	0x0350, r18
    6172:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    6176:	20 93 51 03 	sts	0x0351, r18
    617a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    617e:	20 93 52 03 	sts	0x0352, r18
    6182:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    6186:	20 93 53 03 	sts	0x0353, r18
    618a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    618e:	20 93 54 03 	sts	0x0354, r18
    6192:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    6196:	20 93 55 03 	sts	0x0355, r18
    619a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    619e:	20 93 56 03 	sts	0x0356, r18
    61a2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    61a6:	20 93 57 03 	sts	0x0357, r18
    61aa:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    61ae:	20 93 58 03 	sts	0x0358, r18
    61b2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    61b6:	20 93 59 03 	sts	0x0359, r18
    61ba:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    61be:	20 93 5a 03 	sts	0x035A, r18
    61c2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    61c6:	20 93 5b 03 	sts	0x035B, r18
    61ca:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    61ce:	20 93 5c 03 	sts	0x035C, r18
    61d2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    61d6:	20 93 5d 03 	sts	0x035D, r18
    61da:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    61de:	20 93 5e 03 	sts	0x035E, r18
    61e2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    61e6:	20 93 5f 03 	sts	0x035F, r18
    61ea:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    61ee:	20 93 60 03 	sts	0x0360, r18
    61f2:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    61f6:	20 93 61 03 	sts	0x0361, r18
    61fa:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    61fe:	20 93 62 03 	sts	0x0362, r18
    6202:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    6206:	20 93 63 03 	sts	0x0363, r18
    620a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    620e:	20 93 64 03 	sts	0x0364, r18
    6212:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    6216:	20 93 65 03 	sts	0x0365, r18
    621a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    621e:	20 93 66 03 	sts	0x0366, r18
    6222:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    6226:	20 93 67 03 	sts	0x0367, r18
    622a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    622e:	20 93 68 03 	sts	0x0368, r18
    6232:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    6236:	20 93 69 03 	sts	0x0369, r18
    623a:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    623e:	20 93 6a 03 	sts	0x036A, r18
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6242:	20 91 e8 00 	lds	r18, 0x00E8
    6246:	2b 77       	andi	r18, 0x7B	; 123
    6248:	20 93 e8 00 	sts	0x00E8, r18
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
    624c:	10 92 e8 02 	sts	0x02E8, r1
    6250:	9c 01       	movw	r18, r24
    6252:	84 ce       	rjmp	.-760    	; 0x5f5c <nor_write_word+0x4ac>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6254:	22 e0       	ldi	r18, 0x02	; 2
    6256:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    625a:	20 91 e8 00 	lds	r18, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    625e:	22 fd       	sbrc	r18, 2
    6260:	0a c0       	rjmp	.+20     	; 0x6276 <nor_write_word+0x7c6>
		USB_USBTask();
    6262:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    6266:	80 91 e8 00 	lds	r24, 0x00E8
	//	USB_USBTask();

	/* Select the OUT stream endpoint */
	Endpoint_SelectEndpoint(OUT_EP);

	while (!Endpoint_IsOUTReceived())
    626a:	82 ff       	sbrs	r24, 2
    626c:	fa cf       	rjmp	.-12     	; 0x6262 <nor_write_word+0x7b2>
    626e:	80 91 6c 03 	lds	r24, 0x036C
    6272:	90 91 6d 03 	lds	r25, 0x036D
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    6276:	20 91 f1 00 	lds	r18, 0x00F1
		USB_USBTask();

	_rx_buffer[0] = Endpoint_Read_8();
    627a:	20 93 2b 03 	sts	0x032B, r18
    627e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[1] = Endpoint_Read_8();
    6282:	20 93 2c 03 	sts	0x032C, r18
    6286:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[2] = Endpoint_Read_8();
    628a:	20 93 2d 03 	sts	0x032D, r18
    628e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[3] = Endpoint_Read_8();
    6292:	20 93 2e 03 	sts	0x032E, r18
    6296:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[4] = Endpoint_Read_8();
    629a:	20 93 2f 03 	sts	0x032F, r18
    629e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[5] = Endpoint_Read_8();
    62a2:	20 93 30 03 	sts	0x0330, r18
    62a6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[6] = Endpoint_Read_8();
    62aa:	20 93 31 03 	sts	0x0331, r18
    62ae:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[7] = Endpoint_Read_8();
    62b2:	20 93 32 03 	sts	0x0332, r18
    62b6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[8] = Endpoint_Read_8();
    62ba:	20 93 33 03 	sts	0x0333, r18
    62be:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[9] = Endpoint_Read_8();
    62c2:	20 93 34 03 	sts	0x0334, r18
    62c6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[10] = Endpoint_Read_8();
    62ca:	20 93 35 03 	sts	0x0335, r18
    62ce:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[11] = Endpoint_Read_8();
    62d2:	20 93 36 03 	sts	0x0336, r18
    62d6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[12] = Endpoint_Read_8();
    62da:	20 93 37 03 	sts	0x0337, r18
    62de:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[13] = Endpoint_Read_8();
    62e2:	20 93 38 03 	sts	0x0338, r18
    62e6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[14] = Endpoint_Read_8();
    62ea:	20 93 39 03 	sts	0x0339, r18
    62ee:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[15] = Endpoint_Read_8();
    62f2:	20 93 3a 03 	sts	0x033A, r18
    62f6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[16] = Endpoint_Read_8();
    62fa:	20 93 3b 03 	sts	0x033B, r18
    62fe:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[17] = Endpoint_Read_8();
    6302:	20 93 3c 03 	sts	0x033C, r18
    6306:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[18] = Endpoint_Read_8();
    630a:	20 93 3d 03 	sts	0x033D, r18
    630e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[19] = Endpoint_Read_8();
    6312:	20 93 3e 03 	sts	0x033E, r18
    6316:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[20] = Endpoint_Read_8();
    631a:	20 93 3f 03 	sts	0x033F, r18
    631e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[21] = Endpoint_Read_8();
    6322:	20 93 40 03 	sts	0x0340, r18
    6326:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[22] = Endpoint_Read_8();
    632a:	20 93 41 03 	sts	0x0341, r18
    632e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[23] = Endpoint_Read_8();
    6332:	20 93 42 03 	sts	0x0342, r18
    6336:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[24] = Endpoint_Read_8();
    633a:	20 93 43 03 	sts	0x0343, r18
    633e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[25] = Endpoint_Read_8();
    6342:	20 93 44 03 	sts	0x0344, r18
    6346:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[26] = Endpoint_Read_8();
    634a:	20 93 45 03 	sts	0x0345, r18
    634e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[27] = Endpoint_Read_8();
    6352:	20 93 46 03 	sts	0x0346, r18
    6356:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[28] = Endpoint_Read_8();
    635a:	20 93 47 03 	sts	0x0347, r18
    635e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[29] = Endpoint_Read_8();
    6362:	20 93 48 03 	sts	0x0348, r18
    6366:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[30] = Endpoint_Read_8();
    636a:	20 93 49 03 	sts	0x0349, r18
    636e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[31] = Endpoint_Read_8();
    6372:	20 93 4a 03 	sts	0x034A, r18
    6376:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[32] = Endpoint_Read_8();
    637a:	20 93 4b 03 	sts	0x034B, r18
    637e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[33] = Endpoint_Read_8();
    6382:	20 93 4c 03 	sts	0x034C, r18
    6386:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[34] = Endpoint_Read_8();
    638a:	20 93 4d 03 	sts	0x034D, r18
    638e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[35] = Endpoint_Read_8();
    6392:	20 93 4e 03 	sts	0x034E, r18
    6396:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[36] = Endpoint_Read_8();
    639a:	20 93 4f 03 	sts	0x034F, r18
    639e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[37] = Endpoint_Read_8();
    63a2:	20 93 50 03 	sts	0x0350, r18
    63a6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[38] = Endpoint_Read_8();
    63aa:	20 93 51 03 	sts	0x0351, r18
    63ae:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[39] = Endpoint_Read_8();
    63b2:	20 93 52 03 	sts	0x0352, r18
    63b6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[40] = Endpoint_Read_8();
    63ba:	20 93 53 03 	sts	0x0353, r18
    63be:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[41] = Endpoint_Read_8();
    63c2:	20 93 54 03 	sts	0x0354, r18
    63c6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[42] = Endpoint_Read_8();
    63ca:	20 93 55 03 	sts	0x0355, r18
    63ce:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[43] = Endpoint_Read_8();
    63d2:	20 93 56 03 	sts	0x0356, r18
    63d6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[44] = Endpoint_Read_8();
    63da:	20 93 57 03 	sts	0x0357, r18
    63de:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[45] = Endpoint_Read_8();
    63e2:	20 93 58 03 	sts	0x0358, r18
    63e6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[46] = Endpoint_Read_8();
    63ea:	20 93 59 03 	sts	0x0359, r18
    63ee:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[47] = Endpoint_Read_8();
    63f2:	20 93 5a 03 	sts	0x035A, r18
    63f6:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[48] = Endpoint_Read_8();
    63fa:	20 93 5b 03 	sts	0x035B, r18
    63fe:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[49] = Endpoint_Read_8();
    6402:	20 93 5c 03 	sts	0x035C, r18
    6406:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[50] = Endpoint_Read_8();
    640a:	20 93 5d 03 	sts	0x035D, r18
    640e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[51] = Endpoint_Read_8();
    6412:	20 93 5e 03 	sts	0x035E, r18
    6416:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[52] = Endpoint_Read_8();
    641a:	20 93 5f 03 	sts	0x035F, r18
    641e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[53] = Endpoint_Read_8();
    6422:	20 93 60 03 	sts	0x0360, r18
    6426:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[54] = Endpoint_Read_8();
    642a:	20 93 61 03 	sts	0x0361, r18
    642e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[55] = Endpoint_Read_8();
    6432:	20 93 62 03 	sts	0x0362, r18
    6436:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[56] = Endpoint_Read_8();
    643a:	20 93 63 03 	sts	0x0363, r18
    643e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[57] = Endpoint_Read_8();
    6442:	20 93 64 03 	sts	0x0364, r18
    6446:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[58] = Endpoint_Read_8();
    644a:	20 93 65 03 	sts	0x0365, r18
    644e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[59] = Endpoint_Read_8();
    6452:	20 93 66 03 	sts	0x0366, r18
    6456:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[60] = Endpoint_Read_8();
    645a:	20 93 67 03 	sts	0x0367, r18
    645e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[61] = Endpoint_Read_8();
    6462:	20 93 68 03 	sts	0x0368, r18
    6466:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[62] = Endpoint_Read_8();
    646a:	20 93 69 03 	sts	0x0369, r18
    646e:	20 91 f1 00 	lds	r18, 0x00F1
	_rx_buffer[63] = Endpoint_Read_8();
    6472:	20 93 6a 03 	sts	0x036A, r18
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6476:	20 91 e8 00 	lds	r18, 0x00E8
    647a:	2b 77       	andi	r18, 0x7B	; 123
    647c:	20 93 e8 00 	sts	0x00E8, r18
		_rx_buffer_size = (_rx_buffer[0] << 8) | _rx_buffer[1];
		_rx_buffer_ix = 2;
	}
	else if (_rx_buffer_ix == RX_BUFFER_SIZE) {
		receive_rx_buffer();
		_rx_buffer_ix = 0;
    6480:	10 92 e8 02 	sts	0x02E8, r1
    6484:	9c 01       	movw	r18, r24
    6486:	3e cc       	rjmp	.-1924   	; 0x5d04 <nor_write_word+0x254>

00006488 <nor_write_block>:
	_delay_ns(90); //flash needs 90ns access time
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
	if (_increment_address) increment_address(1);
}

void nor_write_block(const nor_prg_mode_t prg_mode) {
    6488:	4f 92       	push	r4
    648a:	5f 92       	push	r5
    648c:	6f 92       	push	r6
    648e:	7f 92       	push	r7
    6490:	8f 92       	push	r8
    6492:	9f 92       	push	r9
    6494:	af 92       	push	r10
    6496:	bf 92       	push	r11
    6498:	cf 92       	push	r12
    649a:	df 92       	push	r13
    649c:	ef 92       	push	r14
    649e:	ff 92       	push	r15
    64a0:	0f 93       	push	r16
    64a2:	1f 93       	push	r17
	uint32_t i;
	uint16_t k;
	uint8_t saddr1, saddr2, saddr3;
	uint8_t ryby_timeout = 0;

	NOR_CONT_PORT |= NOR_CONT_OE; //HIGH
    64a4:	71 9a       	sbi	0x0e, 1	; 14
	NOR_CONT_PORT &= ~NOR_CONT_CE; //LOW
    64a6:	70 98       	cbi	0x0e, 0	; 14

	switch (prg_mode) {
    64a8:	81 30       	cpi	r24, 0x01	; 1
    64aa:	09 f4       	brne	.+2      	; 0x64ae <nor_write_block+0x26>
    64ac:	f1 c1       	rjmp	.+994    	; 0x6890 <nor_write_block+0x408>
    64ae:	81 30       	cpi	r24, 0x01	; 1
    64b0:	08 f0       	brcs	.+2      	; 0x64b4 <nor_write_block+0x2c>
    64b2:	9c c1       	rjmp	.+824    	; 0x67ec <nor_write_block+0x364>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    64b4:	82 e0       	ldi	r24, 0x02	; 2
    64b6:	80 93 e9 00 	sts	0x00E9, r24
	case NOR_PRG_MODE_WORD: //"single word program mode"
		/* Select the OUT stream endpoint */
		Endpoint_SelectEndpoint(OUT_EP);

		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
    64ba:	ee 24       	eor	r14, r14
    64bc:	ff 24       	eor	r15, r15
    64be:	87 01       	movw	r16, r14
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
	NOR_ADDR2_PORT = address2;
    64c0:	95 e0       	ldi	r25, 0x05	; 5
    64c2:	b9 2e       	mov	r11, r25
	NOR_ADDR1_PORT = address1;
    64c4:	85 e5       	ldi	r24, 0x55	; 85
    64c6:	d8 2e       	mov	r13, r24
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
	NOR_DATA1_PORT = data1;
    64c8:	ba ea       	ldi	r27, 0xAA	; 170
    64ca:	cb 2e       	mov	r12, r27
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
	NOR_ADDR2_PORT = address2;
    64cc:	a2 e0       	ldi	r26, 0x02	; 2
    64ce:	9a 2e       	mov	r9, r26
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
	NOR_DATA1_PORT = data1;
    64d0:	f0 ea       	ldi	r31, 0xA0	; 160
    64d2:	af 2e       	mov	r10, r31
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    64d4:	80 91 e8 00 	lds	r24, 0x00E8
		/* Select the OUT stream endpoint */
		Endpoint_SelectEndpoint(OUT_EP);

		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
			/* Check if the current endpoint can be read */
			while (!Endpoint_IsOUTReceived()) USB_USBTask();
    64d8:	82 fd       	sbrc	r24, 2
    64da:	06 c0       	rjmp	.+12     	; 0x64e8 <nor_write_block+0x60>
    64dc:	0e 94 87 3a 	call	0x750e	; 0x750e <USB_USBTask>
    64e0:	80 91 e8 00 	lds	r24, 0x00E8
    64e4:	82 ff       	sbrs	r24, 2
    64e6:	fa cf       	rjmp	.-12     	; 0x64dc <nor_write_block+0x54>

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    64e8:	50 91 e3 02 	lds	r21, 0x02E3
    64ec:	f0 91 e4 02 	lds	r31, 0x02E4
    64f0:	e0 91 e5 02 	lds	r30, 0x02E5
    64f4:	40 91 e6 02 	lds	r20, 0x02E6
	_delay_ns(90); //flash needs 90ns access time
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
	if (_increment_address) increment_address(1);
}

void nor_write_block(const nor_prg_mode_t prg_mode) {
    64f8:	bf 01       	movw	r22, r30
    64fa:	20 e0       	ldi	r18, 0x00	; 0
    64fc:	30 e0       	ldi	r19, 0x00	; 0
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    64fe:	55 b9       	out	0x05, r21	; 5
	NOR_ADDR2_PORT = address2;
    6500:	b2 b8       	out	0x02, r11	; 2
	NOR_ADDR1_PORT = address1;
    6502:	d1 ba       	out	0x11, r13	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6504:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    6506:	cb b8       	out	0x0b, r12	; 11
    6508:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    650a:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    650c:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    650e:	55 b9       	out	0x05, r21	; 5
	NOR_ADDR2_PORT = address2;
    6510:	92 b8       	out	0x02, r9	; 2
	NOR_ADDR1_PORT = address1;
    6512:	c1 ba       	out	0x11, r12	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6514:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    6516:	db b8       	out	0x0b, r13	; 11
    6518:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    651a:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    651c:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    651e:	55 b9       	out	0x05, r21	; 5
	NOR_ADDR2_PORT = address2;
    6520:	b2 b8       	out	0x02, r11	; 2
	NOR_ADDR1_PORT = address1;
    6522:	d1 ba       	out	0x11, r13	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6524:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    6526:	ab b8       	out	0x0b, r10	; 11
    6528:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    652a:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    652c:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    652e:	75 b9       	out	0x05, r23	; 5
	NOR_ADDR2_PORT = address2;
    6530:	62 b9       	out	0x02, r22	; 2
	NOR_ADDR1_PORT = address1;
    6532:	41 bb       	out	0x11, r20	; 17
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    6534:	90 91 f1 00 	lds	r25, 0x00F1
    6538:	80 91 f1 00 	lds	r24, 0x00F1
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    653c:	98 b9       	out	0x08, r25	; 8
	NOR_DATA1_PORT = data1;
    653e:	8b b9       	out	0x0b, r24	; 11
    6540:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    6542:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    6544:	75 9a       	sbi	0x0e, 5	; 14
	_offset_2nddie = offset;
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
    6546:	4f 5f       	subi	r20, 0xFF	; 255
	if (_address1 == 0) ++_address2;
    6548:	31 f4       	brne	.+12     	; 0x6556 <nor_write_block+0xce>
    654a:	6f 5f       	subi	r22, 0xFF	; 255
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;
    654c:	09 f0       	breq	.+2      	; 0x6550 <nor_write_block+0xc8>
    654e:	60 c1       	rjmp	.+704    	; 0x6810 <nor_write_block+0x388>
    6550:	7f 5f       	subi	r23, 0xFF	; 255
    6552:	f7 2f       	mov	r31, r23
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
    6554:	e0 e0       	ldi	r30, 0x00	; 0
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    6556:	00 c0       	rjmp	.+0      	; 0x6558 <nor_write_block+0xd0>
    6558:	80 e0       	ldi	r24, 0x00	; 0
    655a:	90 e0       	ldi	r25, 0x00	; 0
    655c:	a0 e2       	ldi	r26, 0x20	; 32
    655e:	b0 e0       	ldi	r27, 0x00	; 0
    6560:	05 c0       	rjmp	.+10     	; 0x656c <nor_write_block+0xe4>
	//wait 200ns for RY/BY to become active
	_delay_ns(200);
	
	uint32_t cnt = 0x200000; //approx. 3secs
	while (cnt > 0) {
		if (NOR_CONT_PIN & NOR_CONT_RYBY) return 1;
    6562:	01 97       	sbiw	r24, 0x01	; 1
    6564:	a1 09       	sbc	r26, r1
    6566:	b1 09       	sbc	r27, r1
static inline uint8_t wait_for_ryby_short(void) {
	//wait 200ns for RY/BY to become active
	_delay_ns(200);
	
	uint32_t cnt = 0x200000; //approx. 3secs
	while (cnt > 0) {
    6568:	09 f4       	brne	.+2      	; 0x656c <nor_write_block+0xe4>
    656a:	54 c1       	rjmp	.+680    	; 0x6814 <nor_write_block+0x38c>
		if (NOR_CONT_PIN & NOR_CONT_RYBY) return 1;
    656c:	66 9b       	sbis	0x0c, 6	; 12
    656e:	f9 cf       	rjmp	.-14     	; 0x6562 <nor_write_block+0xda>

		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
			/* Check if the current endpoint can be read */
			while (!Endpoint_IsOUTReceived()) USB_USBTask();
			
			for (k = 0; k < RX_BUFFER_SIZE / 2; ++k) {
    6570:	2f 5f       	subi	r18, 0xFF	; 255
    6572:	3f 4f       	sbci	r19, 0xFF	; 255
    6574:	20 32       	cpi	r18, 0x20	; 32
    6576:	31 05       	cpc	r19, r1
    6578:	09 f0       	breq	.+2      	; 0x657c <nor_write_block+0xf4>
    657a:	c1 cf       	rjmp	.-126    	; 0x64fe <nor_write_block+0x76>
			
			Endpoint_ClearOUT();
		}
		
		if (ryby_timeout) {
			for (; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
    657c:	40 93 e6 02 	sts	0x02E6, r20
    6580:	e0 93 e5 02 	sts	0x02E5, r30
    6584:	f0 93 e4 02 	sts	0x02E4, r31
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6588:	80 91 e8 00 	lds	r24, 0x00E8
    658c:	8b 77       	andi	r24, 0x7B	; 123
    658e:	80 93 e8 00 	sts	0x00E8, r24
	switch (prg_mode) {
	case NOR_PRG_MODE_WORD: //"single word program mode"
		/* Select the OUT stream endpoint */
		Endpoint_SelectEndpoint(OUT_EP);

		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
    6592:	80 e4       	ldi	r24, 0x40	; 64
    6594:	90 e0       	ldi	r25, 0x00	; 0
    6596:	a0 e0       	ldi	r26, 0x00	; 0
    6598:	b0 e0       	ldi	r27, 0x00	; 0
    659a:	e8 0e       	add	r14, r24
    659c:	f9 1e       	adc	r15, r25
    659e:	0a 1f       	adc	r16, r26
    65a0:	1b 1f       	adc	r17, r27
    65a2:	90 e0       	ldi	r25, 0x00	; 0
    65a4:	e9 16       	cp	r14, r25
    65a6:	90 e2       	ldi	r25, 0x20	; 32
    65a8:	f9 06       	cpc	r15, r25
    65aa:	90 e0       	ldi	r25, 0x00	; 0
    65ac:	09 07       	cpc	r16, r25
    65ae:	90 e0       	ldi	r25, 0x00	; 0
    65b0:	19 07       	cpc	r17, r25
    65b2:	09 f0       	breq	.+2      	; 0x65b6 <nor_write_block+0x12e>
    65b4:	8f cf       	rjmp	.-226    	; 0x64d4 <nor_write_block+0x4c>
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    65b6:	e0 91 ea 02 	lds	r30, 0x02EA
    65ba:	f0 e0       	ldi	r31, 0x00	; 0
    65bc:	e5 51       	subi	r30, 0x15	; 21
    65be:	fd 4f       	sbci	r31, 0xFD	; 253
    65c0:	8b e4       	ldi	r24, 0x4B	; 75
    65c2:	80 83       	st	Z, r24
	
	if (transmit) {
		_tx_buffer_ix = 0;
    65c4:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    65c8:	81 e0       	ldi	r24, 0x01	; 1
    65ca:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    65ce:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    65d2:	80 fd       	sbrc	r24, 0
    65d4:	05 c0       	rjmp	.+10     	; 0x65e0 <nor_write_block+0x158>
		USB_USBTask();
    65d6:	9b d7       	rcall	.+3894   	; 0x750e <USB_USBTask>
    65d8:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    65dc:	80 ff       	sbrs	r24, 0
    65de:	fb cf       	rjmp	.-10     	; 0x65d6 <nor_write_block+0x14e>
		USB_USBTask();

	Endpoint_Write_8(_tx_buffer[0]);
    65e0:	80 91 eb 02 	lds	r24, 0x02EB
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    65e4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[1]);
    65e8:	80 91 ec 02 	lds	r24, 0x02EC
    65ec:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[2]);
    65f0:	80 91 ed 02 	lds	r24, 0x02ED
    65f4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[3]);
    65f8:	80 91 ee 02 	lds	r24, 0x02EE
    65fc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[4]);
    6600:	80 91 ef 02 	lds	r24, 0x02EF
    6604:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[5]);
    6608:	80 91 f0 02 	lds	r24, 0x02F0
    660c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[6]);
    6610:	80 91 f1 02 	lds	r24, 0x02F1
    6614:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[7]);
    6618:	80 91 f2 02 	lds	r24, 0x02F2
    661c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[8]);
    6620:	80 91 f3 02 	lds	r24, 0x02F3
    6624:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[9]);
    6628:	80 91 f4 02 	lds	r24, 0x02F4
    662c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[10]);
    6630:	80 91 f5 02 	lds	r24, 0x02F5
    6634:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[11]);
    6638:	80 91 f6 02 	lds	r24, 0x02F6
    663c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[12]);
    6640:	80 91 f7 02 	lds	r24, 0x02F7
    6644:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[13]);
    6648:	80 91 f8 02 	lds	r24, 0x02F8
    664c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[14]);
    6650:	80 91 f9 02 	lds	r24, 0x02F9
    6654:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[15]);
    6658:	80 91 fa 02 	lds	r24, 0x02FA
    665c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[16]);
    6660:	80 91 fb 02 	lds	r24, 0x02FB
    6664:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[17]);
    6668:	80 91 fc 02 	lds	r24, 0x02FC
    666c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[18]);
    6670:	80 91 fd 02 	lds	r24, 0x02FD
    6674:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[19]);
    6678:	80 91 fe 02 	lds	r24, 0x02FE
    667c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[20]);
    6680:	80 91 ff 02 	lds	r24, 0x02FF
    6684:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[21]);
    6688:	80 91 00 03 	lds	r24, 0x0300
    668c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[22]);
    6690:	80 91 01 03 	lds	r24, 0x0301
    6694:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[23]);
    6698:	80 91 02 03 	lds	r24, 0x0302
    669c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[24]);
    66a0:	80 91 03 03 	lds	r24, 0x0303
    66a4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[25]);
    66a8:	80 91 04 03 	lds	r24, 0x0304
    66ac:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[26]);
    66b0:	80 91 05 03 	lds	r24, 0x0305
    66b4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[27]);
    66b8:	80 91 06 03 	lds	r24, 0x0306
    66bc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[28]);
    66c0:	80 91 07 03 	lds	r24, 0x0307
    66c4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[29]);
    66c8:	80 91 08 03 	lds	r24, 0x0308
    66cc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[30]);
    66d0:	80 91 09 03 	lds	r24, 0x0309
    66d4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[31]);
    66d8:	80 91 0a 03 	lds	r24, 0x030A
    66dc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[32]);
    66e0:	80 91 0b 03 	lds	r24, 0x030B
    66e4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[33]);
    66e8:	80 91 0c 03 	lds	r24, 0x030C
    66ec:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[34]);
    66f0:	80 91 0d 03 	lds	r24, 0x030D
    66f4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[35]);
    66f8:	80 91 0e 03 	lds	r24, 0x030E
    66fc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[36]);
    6700:	80 91 0f 03 	lds	r24, 0x030F
    6704:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[37]);
    6708:	80 91 10 03 	lds	r24, 0x0310
    670c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[38]);
    6710:	80 91 11 03 	lds	r24, 0x0311
    6714:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[39]);
    6718:	80 91 12 03 	lds	r24, 0x0312
    671c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[40]);
    6720:	80 91 13 03 	lds	r24, 0x0313
    6724:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[41]);
    6728:	80 91 14 03 	lds	r24, 0x0314
    672c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[42]);
    6730:	80 91 15 03 	lds	r24, 0x0315
    6734:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[43]);
    6738:	80 91 16 03 	lds	r24, 0x0316
    673c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[44]);
    6740:	80 91 17 03 	lds	r24, 0x0317
    6744:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[45]);
    6748:	80 91 18 03 	lds	r24, 0x0318
    674c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[46]);
    6750:	80 91 19 03 	lds	r24, 0x0319
    6754:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[47]);
    6758:	80 91 1a 03 	lds	r24, 0x031A
    675c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[48]);
    6760:	80 91 1b 03 	lds	r24, 0x031B
    6764:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[49]);
    6768:	80 91 1c 03 	lds	r24, 0x031C
    676c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[50]);
    6770:	80 91 1d 03 	lds	r24, 0x031D
    6774:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[51]);
    6778:	80 91 1e 03 	lds	r24, 0x031E
    677c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[52]);
    6780:	80 91 1f 03 	lds	r24, 0x031F
    6784:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[53]);
    6788:	80 91 20 03 	lds	r24, 0x0320
    678c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[54]);
    6790:	80 91 21 03 	lds	r24, 0x0321
    6794:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[55]);
    6798:	80 91 22 03 	lds	r24, 0x0322
    679c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[56]);
    67a0:	80 91 23 03 	lds	r24, 0x0323
    67a4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[57]);
    67a8:	80 91 24 03 	lds	r24, 0x0324
    67ac:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[58]);
    67b0:	80 91 25 03 	lds	r24, 0x0325
    67b4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[59]);
    67b8:	80 91 26 03 	lds	r24, 0x0326
    67bc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[60]);
    67c0:	80 91 27 03 	lds	r24, 0x0327
    67c4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[61]);
    67c8:	80 91 28 03 	lds	r24, 0x0328
    67cc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[62]);
    67d0:	80 91 29 03 	lds	r24, 0x0329
    67d4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_8(_tx_buffer[63]);
    67d8:	80 91 2a 03 	lds	r24, 0x032A
    67dc:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    67e0:	80 91 e8 00 	lds	r24, 0x00E8
    67e4:	8e 77       	andi	r24, 0x7E	; 126
    67e6:	80 93 e8 00 	sts	0x00E8, r24
    67ea:	03 c0       	rjmp	.+6      	; 0x67f2 <nor_write_block+0x36a>
	uint8_t ryby_timeout = 0;

	NOR_CONT_PORT |= NOR_CONT_OE; //HIGH
	NOR_CONT_PORT &= ~NOR_CONT_CE; //LOW

	switch (prg_mode) {
    67ec:	82 30       	cpi	r24, 0x02	; 2
    67ee:	09 f4       	brne	.+2      	; 0x67f2 <nor_write_block+0x36a>
    67f0:	58 c1       	rjmp	.+688    	; 0x6aa2 <nor_write_block+0x61a>
		break;

	default:
		break;
	}				
}
    67f2:	1f 91       	pop	r17
    67f4:	0f 91       	pop	r16
    67f6:	ff 90       	pop	r15
    67f8:	ef 90       	pop	r14
    67fa:	df 90       	pop	r13
    67fc:	cf 90       	pop	r12
    67fe:	bf 90       	pop	r11
    6800:	af 90       	pop	r10
    6802:	9f 90       	pop	r9
    6804:	8f 90       	pop	r8
    6806:	7f 90       	pop	r7
    6808:	6f 90       	pop	r6
    680a:	5f 90       	pop	r5
    680c:	4f 90       	pop	r4
    680e:	08 95       	ret
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
    6810:	e6 2f       	mov	r30, r22
    6812:	a1 ce       	rjmp	.-702    	; 0x6556 <nor_write_block+0xce>

		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
			/* Check if the current endpoint can be read */
			while (!Endpoint_IsOUTReceived()) USB_USBTask();
			
			for (k = 0; k < RX_BUFFER_SIZE / 2; ++k) {
    6814:	40 93 e6 02 	sts	0x02E6, r20
    6818:	e0 93 e5 02 	sts	0x02E5, r30
    681c:	f0 93 e4 02 	sts	0x02E4, r31

				//increment address and wait for RY/BY
				increment_address(0);
				if (!wait_for_ryby_short()) {
					ryby_timeout = 1;
					++k;
    6820:	2f 5f       	subi	r18, 0xFF	; 255
    6822:	3f 4f       	sbci	r19, 0xFF	; 255
					break;
				}
			}
			
			if (ryby_timeout) {
				for (;k < RX_BUFFER_SIZE / 2; ++k) {
    6824:	20 32       	cpi	r18, 0x20	; 32
    6826:	31 05       	cpc	r19, r1
    6828:	18 f0       	brcs	.+6      	; 0x6830 <nor_write_block+0x3a8>
    682a:	09 c0       	rjmp	.+18     	; 0x683e <nor_write_block+0x3b6>
    682c:	2f 5f       	subi	r18, 0xFF	; 255
    682e:	3f 4f       	sbci	r19, 0xFF	; 255
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    6830:	80 91 f1 00 	lds	r24, 0x00F1
    6834:	80 91 f1 00 	lds	r24, 0x00F1
    6838:	2f 31       	cpi	r18, 0x1F	; 31
    683a:	31 05       	cpc	r19, r1
    683c:	b9 f7       	brne	.-18     	; 0x682c <nor_write_block+0x3a4>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    683e:	80 91 e8 00 	lds	r24, 0x00E8
    6842:	8b 77       	andi	r24, 0x7B	; 123
    6844:	80 93 e8 00 	sts	0x00E8, r24
			
			Endpoint_ClearOUT();
		}
		
		if (ryby_timeout) {
			for (; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
    6848:	80 e4       	ldi	r24, 0x40	; 64
    684a:	90 e0       	ldi	r25, 0x00	; 0
    684c:	a0 e0       	ldi	r26, 0x00	; 0
    684e:	b0 e0       	ldi	r27, 0x00	; 0
    6850:	e8 0e       	add	r14, r24
    6852:	f9 1e       	adc	r15, r25
    6854:	0a 1f       	adc	r16, r26
    6856:	1b 1f       	adc	r17, r27
    6858:	90 e0       	ldi	r25, 0x00	; 0
    685a:	e9 16       	cp	r14, r25
    685c:	90 e2       	ldi	r25, 0x20	; 32
    685e:	f9 06       	cpc	r15, r25
    6860:	90 e0       	ldi	r25, 0x00	; 0
    6862:	09 07       	cpc	r16, r25
    6864:	90 e0       	ldi	r25, 0x00	; 0
    6866:	19 07       	cpc	r17, r25
    6868:	08 f0       	brcs	.+2      	; 0x686c <nor_write_block+0x3e4>
    686a:	0d c2       	rjmp	.+1050   	; 0x6c86 <nor_write_block+0x7fe>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    686c:	80 91 e8 00 	lds	r24, 0x00E8
				/* Check if the current endpoint can be read */
				while (!Endpoint_IsOUTReceived()) USB_USBTask();
    6870:	82 fd       	sbrc	r24, 2
    6872:	05 c0       	rjmp	.+10     	; 0x687e <nor_write_block+0x3f6>
    6874:	4c d6       	rcall	.+3224   	; 0x750e <USB_USBTask>
    6876:	80 91 e8 00 	lds	r24, 0x00E8
    687a:	82 ff       	sbrs	r24, 2
    687c:	fb cf       	rjmp	.-10     	; 0x6874 <nor_write_block+0x3ec>
	switch (prg_mode) {
	case NOR_PRG_MODE_WORD: //"single word program mode"
		/* Select the OUT stream endpoint */
		Endpoint_SelectEndpoint(OUT_EP);

		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
    687e:	80 e2       	ldi	r24, 0x20	; 32
    6880:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    6882:	20 91 f1 00 	lds	r18, 0x00F1
    6886:	20 91 f1 00 	lds	r18, 0x00F1
    688a:	01 97       	sbiw	r24, 0x01	; 1
		if (ryby_timeout) {
			for (; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
				/* Check if the current endpoint can be read */
				while (!Endpoint_IsOUTReceived()) USB_USBTask();

				for (k = 0; k < RX_BUFFER_SIZE / 2; ++k) {
    688c:	d1 f7       	brne	.-12     	; 0x6882 <nor_write_block+0x3fa>
    688e:	d7 cf       	rjmp	.-82     	; 0x683e <nor_write_block+0x3b6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6890:	42 e0       	ldi	r20, 0x02	; 2
    6892:	40 93 e9 00 	sts	0x00E9, r20
	case NOR_PRG_MODE_UBM: //"single word unlock bypass mode"
		/* Select the OUT stream endpoint */
		Endpoint_SelectEndpoint(OUT_EP);

		// enter unlock bypass mode
		set_address(_offset_2nddie, 0x5, 0x55); set_data(0x0, 0xAA);
    6896:	90 91 e3 02 	lds	r25, 0x02E3
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    689a:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    689c:	25 e0       	ldi	r18, 0x05	; 5
    689e:	22 b9       	out	0x02, r18	; 2
	NOR_ADDR1_PORT = address1;
    68a0:	85 e5       	ldi	r24, 0x55	; 85
    68a2:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    68a4:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    68a6:	3a ea       	ldi	r19, 0xAA	; 170
    68a8:	3b b9       	out	0x0b, r19	; 11
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    68aa:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    68ac:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    68ae:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    68b0:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    68b2:	42 b9       	out	0x02, r20	; 2
	NOR_ADDR1_PORT = address1;
    68b4:	31 bb       	out	0x11, r19	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    68b6:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    68b8:	8b b9       	out	0x0b, r24	; 11
    68ba:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    68bc:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    68be:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    68c0:	95 b9       	out	0x05, r25	; 5
	NOR_ADDR2_PORT = address2;
    68c2:	22 b9       	out	0x02, r18	; 2
	NOR_ADDR1_PORT = address1;
    68c4:	81 bb       	out	0x11, r24	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    68c6:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    68c8:	80 e2       	ldi	r24, 0x20	; 32
    68ca:	8b b9       	out	0x0b, r24	; 11
    68cc:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    68ce:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    68d0:	75 9a       	sbi	0x0e, 5	; 14

		// enter unlock bypass mode
		set_address(_offset_2nddie, 0x5, 0x55); set_data(0x0, 0xAA);
		set_address(_offset_2nddie, 0x2, 0xAA); set_data(0x0, 0x55);
		set_address(_offset_2nddie, 0x5, 0x55); set_data(0x0, 0x20);
		set_address(_address3, _address2, _address1);
    68d2:	20 91 e4 02 	lds	r18, 0x02E4
    68d6:	90 91 e5 02 	lds	r25, 0x02E5
    68da:	80 91 e6 02 	lds	r24, 0x02E6
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    68de:	25 b9       	out	0x05, r18	; 5
	NOR_ADDR2_PORT = address2;
    68e0:	92 b9       	out	0x02, r25	; 2
	NOR_ADDR1_PORT = address1;
    68e2:	81 bb       	out	0x11, r24	; 17
		set_address(_offset_2nddie, 0x5, 0x55); set_data(0x0, 0xAA);
		set_address(_offset_2nddie, 0x2, 0xAA); set_data(0x0, 0x55);
		set_address(_offset_2nddie, 0x5, 0x55); set_data(0x0, 0x20);
		set_address(_address3, _address2, _address1);
		
		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
    68e4:	ee 24       	eor	r14, r14
    68e6:	ff 24       	eor	r15, r15
    68e8:	87 01       	movw	r16, r14
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
	NOR_DATA1_PORT = data1;
    68ea:	e0 ea       	ldi	r30, 0xA0	; 160
    68ec:	de 2e       	mov	r13, r30
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    68ee:	80 91 e8 00 	lds	r24, 0x00E8
		set_address(_offset_2nddie, 0x5, 0x55); set_data(0x0, 0x20);
		set_address(_address3, _address2, _address1);
		
		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
			/* Check if the current endpoint can be read */
			while (!Endpoint_IsOUTReceived()) USB_USBTask();
    68f2:	82 fd       	sbrc	r24, 2
    68f4:	05 c0       	rjmp	.+10     	; 0x6900 <nor_write_block+0x478>
    68f6:	0b d6       	rcall	.+3094   	; 0x750e <USB_USBTask>
    68f8:	80 91 e8 00 	lds	r24, 0x00E8
    68fc:	82 ff       	sbrs	r24, 2
    68fe:	fb cf       	rjmp	.-10     	; 0x68f6 <nor_write_block+0x46e>

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6900:	60 91 e5 02 	lds	r22, 0x02E5
    6904:	50 91 e4 02 	lds	r21, 0x02E4
    6908:	40 91 e6 02 	lds	r20, 0x02E6
    690c:	4f 5f       	subi	r20, 0xFF	; 255
			
			for (k = 0; k < RX_BUFFER_SIZE / 2; ++k) {
    690e:	20 e0       	ldi	r18, 0x00	; 0
    6910:	30 e0       	ldi	r19, 0x00	; 0
	NOR_ADDR1_PORT = address1;
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6912:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    6914:	db b8       	out	0x0b, r13	; 11
    6916:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    6918:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    691a:	75 9a       	sbi	0x0e, 5	; 14
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    691c:	90 91 f1 00 	lds	r25, 0x00F1
    6920:	80 91 f1 00 	lds	r24, 0x00F1
	NOR_ADDR1_PORT = address1;
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6924:	98 b9       	out	0x08, r25	; 8
	NOR_DATA1_PORT = data1;
    6926:	8b b9       	out	0x0b, r24	; 11
    6928:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    692a:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    692c:	75 9a       	sbi	0x0e, 5	; 14
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
    692e:	44 23       	and	r20, r20
    6930:	f1 f4       	brne	.+60     	; 0x696e <nor_write_block+0x4e6>
    6932:	86 2f       	mov	r24, r22
    6934:	8f 5f       	subi	r24, 0xFF	; 255
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;
    6936:	e9 f4       	brne	.+58     	; 0x6972 <nor_write_block+0x4ea>
    6938:	5f 5f       	subi	r21, 0xFF	; 255
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
    693a:	60 e0       	ldi	r22, 0x00	; 0
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;

	if (lock_address == 0) return;

	NOR_ADDR3_PORT = _address3; NOR_ADDR2_PORT = _address2; NOR_ADDR1_PORT = _address1;
    693c:	55 b9       	out	0x05, r21	; 5
    693e:	82 b9       	out	0x02, r24	; 2
    6940:	41 bb       	out	0x11, r20	; 17
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    6942:	00 c0       	rjmp	.+0      	; 0x6944 <nor_write_block+0x4bc>
    6944:	80 e0       	ldi	r24, 0x00	; 0
    6946:	90 e0       	ldi	r25, 0x00	; 0
    6948:	a0 e2       	ldi	r26, 0x20	; 32
    694a:	b0 e0       	ldi	r27, 0x00	; 0
    694c:	04 c0       	rjmp	.+8      	; 0x6956 <nor_write_block+0x4ce>
	//wait 200ns for RY/BY to become active
	_delay_ns(200);
	
	uint32_t cnt = 0x200000; //approx. 3secs
	while (cnt > 0) {
		if (NOR_CONT_PIN & NOR_CONT_RYBY) return 1;
    694e:	01 97       	sbiw	r24, 0x01	; 1
    6950:	a1 09       	sbc	r26, r1
    6952:	b1 09       	sbc	r27, r1
static inline uint8_t wait_for_ryby_short(void) {
	//wait 200ns for RY/BY to become active
	_delay_ns(200);
	
	uint32_t cnt = 0x200000; //approx. 3secs
	while (cnt > 0) {
    6954:	81 f0       	breq	.+32     	; 0x6976 <nor_write_block+0x4ee>
		if (NOR_CONT_PIN & NOR_CONT_RYBY) return 1;
    6956:	66 9b       	sbis	0x0c, 6	; 12
    6958:	fa cf       	rjmp	.-12     	; 0x694e <nor_write_block+0x4c6>
		
		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
			/* Check if the current endpoint can be read */
			while (!Endpoint_IsOUTReceived()) USB_USBTask();
			
			for (k = 0; k < RX_BUFFER_SIZE / 2; ++k) {
    695a:	2f 5f       	subi	r18, 0xFF	; 255
    695c:	3f 4f       	sbci	r19, 0xFF	; 255
    695e:	84 2f       	mov	r24, r20
    6960:	8f 5f       	subi	r24, 0xFF	; 255
    6962:	20 32       	cpi	r18, 0x20	; 32
    6964:	31 05       	cpc	r19, r1
    6966:	09 f4       	brne	.+2      	; 0x696a <nor_write_block+0x4e2>
    6968:	7d c0       	rjmp	.+250    	; 0x6a64 <nor_write_block+0x5dc>
    696a:	48 2f       	mov	r20, r24
    696c:	d2 cf       	rjmp	.-92     	; 0x6912 <nor_write_block+0x48a>
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
    696e:	86 2f       	mov	r24, r22
    6970:	e5 cf       	rjmp	.-54     	; 0x693c <nor_write_block+0x4b4>
    6972:	68 2f       	mov	r22, r24
    6974:	e3 cf       	rjmp	.-58     	; 0x693c <nor_write_block+0x4b4>
		
		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
			/* Check if the current endpoint can be read */
			while (!Endpoint_IsOUTReceived()) USB_USBTask();
			
			for (k = 0; k < RX_BUFFER_SIZE / 2; ++k) {
    6976:	40 93 e6 02 	sts	0x02E6, r20
    697a:	60 93 e5 02 	sts	0x02E5, r22
    697e:	50 93 e4 02 	sts	0x02E4, r21

				//increment address and wait for RY/BY
				increment_address(1);
				if (!wait_for_ryby_short()) {
					ryby_timeout = 1;
					++k;
    6982:	2f 5f       	subi	r18, 0xFF	; 255
    6984:	3f 4f       	sbci	r19, 0xFF	; 255
					break;
				}
			}

			if (ryby_timeout) {
				for (;k < RX_BUFFER_SIZE / 2; ++k) {
    6986:	20 32       	cpi	r18, 0x20	; 32
    6988:	31 05       	cpc	r19, r1
    698a:	18 f0       	brcs	.+6      	; 0x6992 <nor_write_block+0x50a>
    698c:	09 c0       	rjmp	.+18     	; 0x69a0 <nor_write_block+0x518>
    698e:	2f 5f       	subi	r18, 0xFF	; 255
    6990:	3f 4f       	sbci	r19, 0xFF	; 255
    6992:	80 91 f1 00 	lds	r24, 0x00F1
    6996:	80 91 f1 00 	lds	r24, 0x00F1
    699a:	2f 31       	cpi	r18, 0x1F	; 31
    699c:	31 05       	cpc	r19, r1
    699e:	b9 f7       	brne	.-18     	; 0x698e <nor_write_block+0x506>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    69a0:	80 91 e8 00 	lds	r24, 0x00E8
    69a4:	8b 77       	andi	r24, 0x7B	; 123
    69a6:	80 93 e8 00 	sts	0x00E8, r24
					Endpoint_Read_8(); Endpoint_Read_8();
				}
				Endpoint_ClearOUT();
				i += RX_BUFFER_SIZE;
    69aa:	80 e4       	ldi	r24, 0x40	; 64
    69ac:	90 e0       	ldi	r25, 0x00	; 0
    69ae:	a0 e0       	ldi	r26, 0x00	; 0
    69b0:	b0 e0       	ldi	r27, 0x00	; 0
    69b2:	e8 0e       	add	r14, r24
    69b4:	f9 1e       	adc	r15, r25
    69b6:	0a 1f       	adc	r16, r26
    69b8:	1b 1f       	adc	r17, r27
				break;
    69ba:	81 e0       	ldi	r24, 0x01	; 1
	NOR_ADDR1_PORT = address1;
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    69bc:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    69be:	90 e9       	ldi	r25, 0x90	; 144
    69c0:	9b b9       	out	0x0b, r25	; 11
 *
 * These NOPs will be used for very short delays where
 * it is more code efficient than executing loops.
 *
 */
static __inline__ void _NOP1 (void) { __asm__ volatile ( "nop    " "\n\t" ); }
    69c2:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    69c4:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    69c6:	75 9a       	sbi	0x0e, 5	; 14
	NOR_ADDR1_PORT = address1;
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    69c8:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    69ca:	1b b8       	out	0x0b, r1	; 11
    69cc:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    69ce:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    69d0:	75 9a       	sbi	0x0e, 5	; 14

		//exit unlock bypass mode
		set_data(0x0, 0x90);
		set_data(0x0, 0x0);

		if (ryby_timeout) {
    69d2:	88 23       	and	r24, r24
    69d4:	09 f4       	brne	.+2      	; 0x69d8 <nor_write_block+0x550>
    69d6:	41 c1       	rjmp	.+642    	; 0x6c5a <nor_write_block+0x7d2>
			for (; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
    69d8:	a0 e0       	ldi	r26, 0x00	; 0
    69da:	ea 16       	cp	r14, r26
    69dc:	a0 e2       	ldi	r26, 0x20	; 32
    69de:	fa 06       	cpc	r15, r26
    69e0:	a0 e0       	ldi	r26, 0x00	; 0
    69e2:	0a 07       	cpc	r16, r26
    69e4:	a0 e0       	ldi	r26, 0x00	; 0
    69e6:	1a 07       	cpc	r17, r26
    69e8:	38 f5       	brcc	.+78     	; 0x6a38 <nor_write_block+0x5b0>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    69ea:	80 91 e8 00 	lds	r24, 0x00E8
				/* Check if the current endpoint can be read */
				while (!Endpoint_IsOUTReceived()) USB_USBTask();
    69ee:	82 fd       	sbrc	r24, 2
    69f0:	05 c0       	rjmp	.+10     	; 0x69fc <nor_write_block+0x574>
    69f2:	8d d5       	rcall	.+2842   	; 0x750e <USB_USBTask>
    69f4:	80 91 e8 00 	lds	r24, 0x00E8
    69f8:	82 ff       	sbrs	r24, 2
    69fa:	fb cf       	rjmp	.-10     	; 0x69f2 <nor_write_block+0x56a>
		set_address(_offset_2nddie, 0x5, 0x55); set_data(0x0, 0xAA);
		set_address(_offset_2nddie, 0x2, 0xAA); set_data(0x0, 0x55);
		set_address(_offset_2nddie, 0x5, 0x55); set_data(0x0, 0x20);
		set_address(_address3, _address2, _address1);
		
		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
    69fc:	80 e2       	ldi	r24, 0x20	; 32
    69fe:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    6a00:	20 91 f1 00 	lds	r18, 0x00F1
    6a04:	20 91 f1 00 	lds	r18, 0x00F1
    6a08:	01 97       	sbiw	r24, 0x01	; 1
		if (ryby_timeout) {
			for (; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
				/* Check if the current endpoint can be read */
				while (!Endpoint_IsOUTReceived()) USB_USBTask();

				for (k = 0; k < RX_BUFFER_SIZE / 2; ++k) {
    6a0a:	d1 f7       	brne	.-12     	; 0x6a00 <nor_write_block+0x578>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6a0c:	80 91 e8 00 	lds	r24, 0x00E8
    6a10:	8b 77       	andi	r24, 0x7B	; 123
    6a12:	80 93 e8 00 	sts	0x00E8, r24
		//exit unlock bypass mode
		set_data(0x0, 0x90);
		set_data(0x0, 0x0);

		if (ryby_timeout) {
			for (; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
    6a16:	80 e4       	ldi	r24, 0x40	; 64
    6a18:	90 e0       	ldi	r25, 0x00	; 0
    6a1a:	a0 e0       	ldi	r26, 0x00	; 0
    6a1c:	b0 e0       	ldi	r27, 0x00	; 0
    6a1e:	e8 0e       	add	r14, r24
    6a20:	f9 1e       	adc	r15, r25
    6a22:	0a 1f       	adc	r16, r26
    6a24:	1b 1f       	adc	r17, r27
    6a26:	90 e0       	ldi	r25, 0x00	; 0
    6a28:	e9 16       	cp	r14, r25
    6a2a:	90 e2       	ldi	r25, 0x20	; 32
    6a2c:	f9 06       	cpc	r15, r25
    6a2e:	90 e0       	ldi	r25, 0x00	; 0
    6a30:	09 07       	cpc	r16, r25
    6a32:	90 e0       	ldi	r25, 0x00	; 0
    6a34:	19 07       	cpc	r17, r25
    6a36:	c8 f2       	brcs	.-78     	; 0x69ea <nor_write_block+0x562>
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    6a38:	e0 91 ea 02 	lds	r30, 0x02EA
    6a3c:	f0 e0       	ldi	r31, 0x00	; 0
    6a3e:	e5 51       	subi	r30, 0x15	; 21
    6a40:	fd 4f       	sbci	r31, 0xFD	; 253
    6a42:	84 e5       	ldi	r24, 0x54	; 84
    6a44:	80 83       	st	Z, r24
	
	if (transmit) {
		_tx_buffer_ix = 0;
    6a46:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6a4a:	81 e0       	ldi	r24, 0x01	; 1
    6a4c:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6a50:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6a54:	80 fd       	sbrc	r24, 0
    6a56:	c4 cd       	rjmp	.-1144   	; 0x65e0 <nor_write_block+0x158>
		USB_USBTask();
    6a58:	5a d5       	rcall	.+2740   	; 0x750e <USB_USBTask>
    6a5a:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6a5e:	80 ff       	sbrs	r24, 0
    6a60:	fb cf       	rjmp	.-10     	; 0x6a58 <nor_write_block+0x5d0>
    6a62:	be cd       	rjmp	.-1156   	; 0x65e0 <nor_write_block+0x158>
				for (;k < RX_BUFFER_SIZE / 2; ++k) {
					Endpoint_Read_8(); Endpoint_Read_8();
				}
				Endpoint_ClearOUT();
				i += RX_BUFFER_SIZE;
				break;
    6a64:	40 93 e6 02 	sts	0x02E6, r20
    6a68:	60 93 e5 02 	sts	0x02E5, r22
    6a6c:	50 93 e4 02 	sts	0x02E4, r21
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6a70:	80 91 e8 00 	lds	r24, 0x00E8
    6a74:	8b 77       	andi	r24, 0x7B	; 123
    6a76:	80 93 e8 00 	sts	0x00E8, r24
		set_address(_offset_2nddie, 0x5, 0x55); set_data(0x0, 0xAA);
		set_address(_offset_2nddie, 0x2, 0xAA); set_data(0x0, 0x55);
		set_address(_offset_2nddie, 0x5, 0x55); set_data(0x0, 0x20);
		set_address(_address3, _address2, _address1);
		
		for (i = 0; i < NOR_BSS_8; i += RX_BUFFER_SIZE) {
    6a7a:	80 e4       	ldi	r24, 0x40	; 64
    6a7c:	90 e0       	ldi	r25, 0x00	; 0
    6a7e:	a0 e0       	ldi	r26, 0x00	; 0
    6a80:	b0 e0       	ldi	r27, 0x00	; 0
    6a82:	e8 0e       	add	r14, r24
    6a84:	f9 1e       	adc	r15, r25
    6a86:	0a 1f       	adc	r16, r26
    6a88:	1b 1f       	adc	r17, r27
    6a8a:	90 e0       	ldi	r25, 0x00	; 0
    6a8c:	e9 16       	cp	r14, r25
    6a8e:	90 e2       	ldi	r25, 0x20	; 32
    6a90:	f9 06       	cpc	r15, r25
    6a92:	90 e0       	ldi	r25, 0x00	; 0
    6a94:	09 07       	cpc	r16, r25
    6a96:	90 e0       	ldi	r25, 0x00	; 0
    6a98:	19 07       	cpc	r17, r25
    6a9a:	09 f0       	breq	.+2      	; 0x6a9e <nor_write_block+0x616>
    6a9c:	28 cf       	rjmp	.-432    	; 0x68ee <nor_write_block+0x466>
    6a9e:	80 e0       	ldi	r24, 0x00	; 0
    6aa0:	8d cf       	rjmp	.-230    	; 0x69bc <nor_write_block+0x534>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6aa2:	80 93 e9 00 	sts	0x00E9, r24
    6aa6:	b0 90 e6 02 	lds	r11, 0x02E6
    6aaa:	c0 90 e5 02 	lds	r12, 0x02E5
    6aae:	d0 90 e4 02 	lds	r13, 0x02E4

	case NOR_PRG_MODE_WBP: //"write buffer programming"
		/* Select the OUT stream endpoint */
		Endpoint_SelectEndpoint(OUT_EP);

		for (i = 0; i < NOR_BSS_32; i += RX_BUFFER_SIZE) {
    6ab2:	ee 24       	eor	r14, r14
    6ab4:	ff 24       	eor	r15, r15
    6ab6:	87 01       	movw	r16, r14
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
	NOR_ADDR2_PORT = address2;
    6ab8:	75 e0       	ldi	r23, 0x05	; 5
    6aba:	47 2e       	mov	r4, r23
	NOR_ADDR1_PORT = address1;
    6abc:	65 e5       	ldi	r22, 0x55	; 85
    6abe:	96 2e       	mov	r9, r22
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
	NOR_DATA1_PORT = data1;
    6ac0:	5a ea       	ldi	r21, 0xAA	; 170
    6ac2:	a5 2e       	mov	r10, r21
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
	NOR_ADDR2_PORT = address2;
    6ac4:	42 e0       	ldi	r20, 0x02	; 2
    6ac6:	54 2e       	mov	r5, r20
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
	NOR_DATA1_PORT = data1;
    6ac8:	35 e2       	ldi	r19, 0x25	; 37
    6aca:	63 2e       	mov	r6, r19
    6acc:	2f e1       	ldi	r18, 0x1F	; 31
    6ace:	72 2e       	mov	r7, r18
    6ad0:	99 e2       	ldi	r25, 0x29	; 41
    6ad2:	89 2e       	mov	r8, r25
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    6ad4:	15 b8       	out	0x05, r1	; 5
	NOR_ADDR2_PORT = address2;
    6ad6:	42 b8       	out	0x02, r4	; 2
	NOR_ADDR1_PORT = address1;
    6ad8:	91 ba       	out	0x11, r9	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6ada:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    6adc:	ab b8       	out	0x0b, r10	; 11
    6ade:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    6ae0:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    6ae2:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    6ae4:	15 b8       	out	0x05, r1	; 5
	NOR_ADDR2_PORT = address2;
    6ae6:	52 b8       	out	0x02, r5	; 2
	NOR_ADDR1_PORT = address1;
    6ae8:	a1 ba       	out	0x11, r10	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6aea:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    6aec:	9b b8       	out	0x0b, r9	; 11
    6aee:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    6af0:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    6af2:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    6af4:	d5 b8       	out	0x05, r13	; 5
	NOR_ADDR2_PORT = address2;
    6af6:	c2 b8       	out	0x02, r12	; 2
	NOR_ADDR1_PORT = address1;
    6af8:	b1 ba       	out	0x11, r11	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6afa:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    6afc:	6b b8       	out	0x0b, r6	; 11
    6afe:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    6b00:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    6b02:	75 9a       	sbi	0x0e, 5	; 14
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    6b04:	d5 b8       	out	0x05, r13	; 5
	NOR_ADDR2_PORT = address2;
    6b06:	c2 b8       	out	0x02, r12	; 2
	NOR_ADDR1_PORT = address1;
    6b08:	b1 ba       	out	0x11, r11	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6b0a:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    6b0c:	7b b8       	out	0x0b, r7	; 11
    6b0e:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    6b10:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    6b12:	75 9a       	sbi	0x0e, 5	; 14
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    6b14:	80 91 e8 00 	lds	r24, 0x00E8
			set_address(0, 0x2, 0xAA); set_data(0x0, 0x55);
			set_address(saddr3, saddr2, saddr1); set_data(0x0, 0x25);
			set_address(saddr3, saddr2, saddr1); set_data(0x0, 0x1F);

			/* Check if the current endpoint can be read */
			while (!Endpoint_IsOUTReceived()) USB_USBTask();
    6b18:	82 fd       	sbrc	r24, 2
    6b1a:	05 c0       	rjmp	.+10     	; 0x6b26 <nor_write_block+0x69e>
    6b1c:	f8 d4       	rcall	.+2544   	; 0x750e <USB_USBTask>
    6b1e:	80 91 e8 00 	lds	r24, 0x00E8
    6b22:	82 ff       	sbrs	r24, 2
    6b24:	fb cf       	rjmp	.-10     	; 0x6b1c <nor_write_block+0x694>
    6b26:	20 91 e6 02 	lds	r18, 0x02E6
    6b2a:	50 91 e5 02 	lds	r21, 0x02E5
    6b2e:	40 91 e4 02 	lds	r20, 0x02E4
	_delay_ns(90); //flash needs 90ns access time
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
	if (_increment_address) increment_address(1);
}

void nor_write_block(const nor_prg_mode_t prg_mode) {
    6b32:	62 2f       	mov	r22, r18
    6b34:	60 5e       	subi	r22, 0xE0	; 224
    6b36:	0b c0       	rjmp	.+22     	; 0x6b4e <nor_write_block+0x6c6>
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
    6b38:	35 2f       	mov	r19, r21
    6b3a:	3f 5f       	subi	r19, 0xFF	; 255
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;
    6b3c:	09 f0       	breq	.+2      	; 0x6b40 <nor_write_block+0x6b8>
    6b3e:	4d c0       	rjmp	.+154    	; 0x6bda <nor_write_block+0x752>
    6b40:	4f 5f       	subi	r20, 0xFF	; 255
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
    6b42:	50 e0       	ldi	r21, 0x00	; 0
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;

	if (lock_address == 0) return;

	NOR_ADDR3_PORT = _address3; NOR_ADDR2_PORT = _address2; NOR_ADDR1_PORT = _address1;
    6b44:	45 b9       	out	0x05, r20	; 5
    6b46:	32 b9       	out	0x02, r19	; 2
    6b48:	21 bb       	out	0x11, r18	; 17
			set_address(saddr3, saddr2, saddr1); set_data(0x0, 0x1F);

			/* Check if the current endpoint can be read */
			while (!Endpoint_IsOUTReceived()) USB_USBTask();
				
			for (k = 0; k < RX_BUFFER_SIZE / 2; ++k) {
    6b4a:	26 17       	cp	r18, r22
    6b4c:	89 f0       	breq	.+34     	; 0x6b70 <nor_write_block+0x6e8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    6b4e:	90 91 f1 00 	lds	r25, 0x00F1
    6b52:	80 91 f1 00 	lds	r24, 0x00F1
	NOR_ADDR1_PORT = address1;
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6b56:	98 b9       	out	0x08, r25	; 8
	NOR_DATA1_PORT = data1;
    6b58:	8b b9       	out	0x0b, r24	; 11
    6b5a:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    6b5c:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    6b5e:	75 9a       	sbi	0x0e, 5	; 14
	_offset_2nddie = offset;
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
    6b60:	2f 5f       	subi	r18, 0xFF	; 255
	if (_address1 == 0) ++_address2;
    6b62:	51 f3       	breq	.-44     	; 0x6b38 <nor_write_block+0x6b0>
    6b64:	35 2f       	mov	r19, r21
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;

	if (lock_address == 0) return;

	NOR_ADDR3_PORT = _address3; NOR_ADDR2_PORT = _address2; NOR_ADDR1_PORT = _address1;
    6b66:	45 b9       	out	0x05, r20	; 5
    6b68:	32 b9       	out	0x02, r19	; 2
    6b6a:	21 bb       	out	0x11, r18	; 17
			set_address(saddr3, saddr2, saddr1); set_data(0x0, 0x1F);

			/* Check if the current endpoint can be read */
			while (!Endpoint_IsOUTReceived()) USB_USBTask();
				
			for (k = 0; k < RX_BUFFER_SIZE / 2; ++k) {
    6b6c:	26 17       	cp	r18, r22
    6b6e:	79 f7       	brne	.-34     	; 0x6b4e <nor_write_block+0x6c6>
    6b70:	20 93 e6 02 	sts	0x02E6, r18
    6b74:	50 93 e5 02 	sts	0x02E5, r21
    6b78:	40 93 e4 02 	sts	0x02E4, r20
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6b7c:	80 91 e8 00 	lds	r24, 0x00E8
    6b80:	8b 77       	andi	r24, 0x7B	; 123
    6b82:	80 93 e8 00 	sts	0x00E8, r24
	increment_address(lock_address);
}

static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) __attribute__ ((always_inline));
static inline void set_address(const uint8_t address3, const uint8_t address2, const uint8_t address1) {
	NOR_ADDR3_PORT = address3;
    6b86:	d5 b8       	out	0x05, r13	; 5
	NOR_ADDR2_PORT = address2;
    6b88:	c2 b8       	out	0x02, r12	; 2
	NOR_ADDR1_PORT = address1;
    6b8a:	b1 ba       	out	0x11, r11	; 17
}

static inline void set_data(const uint8_t data2, const uint8_t data1) __attribute__ ((always_inline));
static inline void set_data(const uint8_t data2, const uint8_t data1) {
	NOR_DATA2_PORT = data2;
    6b8c:	18 b8       	out	0x08, r1	; 8
	NOR_DATA1_PORT = data1;
    6b8e:	8b b8       	out	0x0b, r8	; 11
    6b90:	00 00       	nop
	_delay_ns(90);
	NOR_CONT_PORT &= ~NOR_CONT_WE; //LOW
    6b92:	75 98       	cbi	0x0e, 5	; 14
	NOR_CONT_PORT |= NOR_CONT_WE; //HIGH
    6b94:	75 9a       	sbi	0x0e, 5	; 14
static __inline__ void _NOP2 (void) { __asm__ volatile ( "rjmp 1f" "\n\t"  "1:" "\n\t" ); }
    6b96:	00 c0       	rjmp	.+0      	; 0x6b98 <nor_write_block+0x710>
    6b98:	80 e0       	ldi	r24, 0x00	; 0
    6b9a:	90 e0       	ldi	r25, 0x00	; 0
    6b9c:	a0 e2       	ldi	r26, 0x20	; 32
    6b9e:	b0 e0       	ldi	r27, 0x00	; 0
    6ba0:	04 c0       	rjmp	.+8      	; 0x6baa <nor_write_block+0x722>
	//wait 200ns for RY/BY to become active
	_delay_ns(200);
	
	uint32_t cnt = 0x200000; //approx. 3secs
	while (cnt > 0) {
		if (NOR_CONT_PIN & NOR_CONT_RYBY) return 1;
    6ba2:	01 97       	sbiw	r24, 0x01	; 1
    6ba4:	a1 09       	sbc	r26, r1
    6ba6:	b1 09       	sbc	r27, r1
static inline uint8_t wait_for_ryby_short(void) {
	//wait 200ns for RY/BY to become active
	_delay_ns(200);
	
	uint32_t cnt = 0x200000; //approx. 3secs
	while (cnt > 0) {
    6ba8:	39 f1       	breq	.+78     	; 0x6bf8 <nor_write_block+0x770>
		if (NOR_CONT_PIN & NOR_CONT_RYBY) return 1;
    6baa:	66 9b       	sbis	0x0c, 6	; 12
    6bac:	fa cf       	rjmp	.-12     	; 0x6ba2 <nor_write_block+0x71a>

	case NOR_PRG_MODE_WBP: //"write buffer programming"
		/* Select the OUT stream endpoint */
		Endpoint_SelectEndpoint(OUT_EP);

		for (i = 0; i < NOR_BSS_32; i += RX_BUFFER_SIZE) {
    6bae:	80 e4       	ldi	r24, 0x40	; 64
    6bb0:	90 e0       	ldi	r25, 0x00	; 0
    6bb2:	a0 e0       	ldi	r26, 0x00	; 0
    6bb4:	b0 e0       	ldi	r27, 0x00	; 0
    6bb6:	e8 0e       	add	r14, r24
    6bb8:	f9 1e       	adc	r15, r25
    6bba:	0a 1f       	adc	r16, r26
    6bbc:	1b 1f       	adc	r17, r27
    6bbe:	90 e0       	ldi	r25, 0x00	; 0
    6bc0:	e9 16       	cp	r14, r25
    6bc2:	90 e8       	ldi	r25, 0x80	; 128
    6bc4:	f9 06       	cpc	r15, r25
    6bc6:	90 e0       	ldi	r25, 0x00	; 0
    6bc8:	09 07       	cpc	r16, r25
    6bca:	90 e0       	ldi	r25, 0x00	; 0
    6bcc:	19 07       	cpc	r17, r25
    6bce:	09 f4       	brne	.+2      	; 0x6bd2 <nor_write_block+0x74a>
    6bd0:	70 c0       	rjmp	.+224    	; 0x6cb2 <nor_write_block+0x82a>
	if (_address1 == 0) ++_address2;
	if ((_address1 == 0) && (_address2 == 0)) ++_address3;

	if (lock_address == 0) return;

	NOR_ADDR3_PORT = _address3; NOR_ADDR2_PORT = _address2; NOR_ADDR1_PORT = _address1;
    6bd2:	d4 2e       	mov	r13, r20
    6bd4:	c3 2e       	mov	r12, r19
    6bd6:	b2 2e       	mov	r11, r18
    6bd8:	7d cf       	rjmp	.-262    	; 0x6ad4 <nor_write_block+0x64c>
}

static inline void increment_address(const uint8_t lock_address) __attribute__ ((always_inline));
static inline void increment_address(const uint8_t lock_address) {
	++_address1;
	if (_address1 == 0) ++_address2;
    6bda:	53 2f       	mov	r21, r19
    6bdc:	b3 cf       	rjmp	.-154    	; 0x6b44 <nor_write_block+0x6bc>
    6bde:	80 e2       	ldi	r24, 0x20	; 32
    6be0:	90 e0       	ldi	r25, 0x00	; 0
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    6be2:	20 91 f1 00 	lds	r18, 0x00F1
    6be6:	20 91 f1 00 	lds	r18, 0x00F1
    6bea:	01 97       	sbiw	r24, 0x01	; 1
		if (ryby_timeout) {
			for (; i < NOR_BSS_32; i += RX_BUFFER_SIZE) {
				/* Check if the current endpoint can be read */
				while (!Endpoint_IsOUTReceived()) USB_USBTask();

				for (k = 0; k < RX_BUFFER_SIZE / 2; ++k) {
    6bec:	d1 f7       	brne	.-12     	; 0x6be2 <nor_write_block+0x75a>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6bee:	80 91 e8 00 	lds	r24, 0x00E8
    6bf2:	8b 77       	andi	r24, 0x7B	; 123
    6bf4:	80 93 e8 00 	sts	0x00E8, r24
				break;
			}
		}

		if (ryby_timeout) {
			for (; i < NOR_BSS_32; i += RX_BUFFER_SIZE) {
    6bf8:	80 e4       	ldi	r24, 0x40	; 64
    6bfa:	90 e0       	ldi	r25, 0x00	; 0
    6bfc:	a0 e0       	ldi	r26, 0x00	; 0
    6bfe:	b0 e0       	ldi	r27, 0x00	; 0
    6c00:	e8 0e       	add	r14, r24
    6c02:	f9 1e       	adc	r15, r25
    6c04:	0a 1f       	adc	r16, r26
    6c06:	1b 1f       	adc	r17, r27
    6c08:	90 e0       	ldi	r25, 0x00	; 0
    6c0a:	e9 16       	cp	r14, r25
    6c0c:	90 e8       	ldi	r25, 0x80	; 128
    6c0e:	f9 06       	cpc	r15, r25
    6c10:	90 e0       	ldi	r25, 0x00	; 0
    6c12:	09 07       	cpc	r16, r25
    6c14:	90 e0       	ldi	r25, 0x00	; 0
    6c16:	19 07       	cpc	r17, r25
    6c18:	50 f4       	brcc	.+20     	; 0x6c2e <nor_write_block+0x7a6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    6c1a:	80 91 e8 00 	lds	r24, 0x00E8
				/* Check if the current endpoint can be read */
				while (!Endpoint_IsOUTReceived()) USB_USBTask();
    6c1e:	82 fd       	sbrc	r24, 2
    6c20:	de cf       	rjmp	.-68     	; 0x6bde <nor_write_block+0x756>
    6c22:	75 d4       	rcall	.+2282   	; 0x750e <USB_USBTask>
    6c24:	80 91 e8 00 	lds	r24, 0x00E8
    6c28:	82 ff       	sbrs	r24, 2
    6c2a:	fb cf       	rjmp	.-10     	; 0x6c22 <nor_write_block+0x79a>
    6c2c:	d8 cf       	rjmp	.-80     	; 0x6bde <nor_write_block+0x756>
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    6c2e:	e0 91 ea 02 	lds	r30, 0x02EA
    6c32:	f0 e0       	ldi	r31, 0x00	; 0
    6c34:	e5 51       	subi	r30, 0x15	; 21
    6c36:	fd 4f       	sbci	r31, 0xFD	; 253
    6c38:	84 e5       	ldi	r24, 0x54	; 84
    6c3a:	80 83       	st	Z, r24
	
	if (transmit) {
		_tx_buffer_ix = 0;
    6c3c:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6c40:	81 e0       	ldi	r24, 0x01	; 1
    6c42:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6c46:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6c4a:	80 fd       	sbrc	r24, 0
    6c4c:	c9 cc       	rjmp	.-1646   	; 0x65e0 <nor_write_block+0x158>
		USB_USBTask();
    6c4e:	5f d4       	rcall	.+2238   	; 0x750e <USB_USBTask>
    6c50:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6c54:	80 ff       	sbrs	r24, 0
    6c56:	fb cf       	rjmp	.-10     	; 0x6c4e <nor_write_block+0x7c6>
    6c58:	c3 cc       	rjmp	.-1658   	; 0x65e0 <nor_write_block+0x158>
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    6c5a:	e0 91 ea 02 	lds	r30, 0x02EA
    6c5e:	f0 e0       	ldi	r31, 0x00	; 0
    6c60:	e5 51       	subi	r30, 0x15	; 21
    6c62:	fd 4f       	sbci	r31, 0xFD	; 253
    6c64:	8b e4       	ldi	r24, 0x4B	; 75
    6c66:	80 83       	st	Z, r24
	
	if (transmit) {
		_tx_buffer_ix = 0;
    6c68:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6c6c:	81 e0       	ldi	r24, 0x01	; 1
    6c6e:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6c72:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6c76:	80 fd       	sbrc	r24, 0
    6c78:	b3 cc       	rjmp	.-1690   	; 0x65e0 <nor_write_block+0x158>
		USB_USBTask();
    6c7a:	49 d4       	rcall	.+2194   	; 0x750e <USB_USBTask>
    6c7c:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6c80:	80 ff       	sbrs	r24, 0
    6c82:	fb cf       	rjmp	.-10     	; 0x6c7a <nor_write_block+0x7f2>
    6c84:	ad cc       	rjmp	.-1702   	; 0x65e0 <nor_write_block+0x158>
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    6c86:	e0 91 ea 02 	lds	r30, 0x02EA
    6c8a:	f0 e0       	ldi	r31, 0x00	; 0
    6c8c:	e5 51       	subi	r30, 0x15	; 21
    6c8e:	fd 4f       	sbci	r31, 0xFD	; 253
    6c90:	84 e5       	ldi	r24, 0x54	; 84
    6c92:	80 83       	st	Z, r24
	
	if (transmit) {
		_tx_buffer_ix = 0;
    6c94:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6c98:	81 e0       	ldi	r24, 0x01	; 1
    6c9a:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6c9e:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6ca2:	80 fd       	sbrc	r24, 0
    6ca4:	9d cc       	rjmp	.-1734   	; 0x65e0 <nor_write_block+0x158>
		USB_USBTask();
    6ca6:	33 d4       	rcall	.+2150   	; 0x750e <USB_USBTask>
    6ca8:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6cac:	80 ff       	sbrs	r24, 0
    6cae:	fb cf       	rjmp	.-10     	; 0x6ca6 <nor_write_block+0x81e>
    6cb0:	97 cc       	rjmp	.-1746   	; 0x65e0 <nor_write_block+0x158>
	//USB_USBTask();
}

static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) __attribute__ ((always_inline));
static inline void usbio_set_byte(const uint8_t c, const uint8_t transmit) {
	_tx_buffer[_tx_buffer_ix] = c; ++_tx_buffer_ix;
    6cb2:	e0 91 ea 02 	lds	r30, 0x02EA
    6cb6:	f0 e0       	ldi	r31, 0x00	; 0
    6cb8:	e5 51       	subi	r30, 0x15	; 21
    6cba:	fd 4f       	sbci	r31, 0xFD	; 253
    6cbc:	8b e4       	ldi	r24, 0x4B	; 75
    6cbe:	80 83       	st	Z, r24
	
	if (transmit) {
		_tx_buffer_ix = 0;
    6cc0:	10 92 ea 02 	sts	0x02EA, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6cc4:	81 e0       	ldi	r24, 0x01	; 1
    6cc6:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6cca:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6cce:	80 fd       	sbrc	r24, 0
    6cd0:	87 cc       	rjmp	.-1778   	; 0x65e0 <nor_write_block+0x158>
		USB_USBTask();
    6cd2:	1d d4       	rcall	.+2106   	; 0x750e <USB_USBTask>
    6cd4:	80 91 e8 00 	lds	r24, 0x00E8

	/* Select the IN stream endpoint */
	Endpoint_SelectEndpoint(IN_EP);
	
	/* Check if the current endpoint can be written to and that the next sample should be stored */
	while (!Endpoint_IsINReady())
    6cd8:	80 ff       	sbrs	r24, 0
    6cda:	fb cf       	rjmp	.-10     	; 0x6cd2 <nor_write_block+0x84a>
    6cdc:	81 cc       	rjmp	.-1790   	; 0x65e0 <nor_write_block+0x158>

00006cde <Endpoint_ConfigureEndpoint_Prv>:
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    6cde:	87 30       	cpi	r24, 0x07	; 7
    6ce0:	08 f0       	brcs	.+2      	; 0x6ce4 <Endpoint_ConfigureEndpoint_Prv+0x6>
    6ce2:	41 c0       	rjmp	.+130    	; 0x6d66 <Endpoint_ConfigureEndpoint_Prv+0x88>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6ce4:	e8 2f       	mov	r30, r24
    6ce6:	ef 70       	andi	r30, 0x0F	; 15
    6ce8:	e0 93 e9 00 	sts	0x00E9, r30
    6cec:	98 2f       	mov	r25, r24
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    6cee:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    6cf0:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    6cf2:	50 e0       	ldi	r21, 0x00	; 0
			UECFG0XTemp = UECFG0X;
			UECFG1XTemp = UECFG1X;
			UEIENXTemp  = UEIENX;
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    6cf4:	21 ff       	sbrs	r18, 1
    6cf6:	19 c0       	rjmp	.+50     	; 0x6d2a <Endpoint_ConfigureEndpoint_Prv+0x4c>
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
    6cf8:	30 91 eb 00 	lds	r19, 0x00EB
    6cfc:	3e 7f       	andi	r19, 0xFE	; 254
    6cfe:	30 93 eb 00 	sts	0x00EB, r19
		  continue;

		Endpoint_DisableEndpoint();
		UECFG1X &= ~(1 << ALLOC);
    6d02:	30 91 ed 00 	lds	r19, 0x00ED
    6d06:	3d 7f       	andi	r19, 0xFD	; 253
    6d08:	30 93 ed 00 	sts	0x00ED, r19
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    6d0c:	30 91 eb 00 	lds	r19, 0x00EB
    6d10:	31 60       	ori	r19, 0x01	; 1
    6d12:	30 93 eb 00 	sts	0x00EB, r19

		Endpoint_EnableEndpoint();
		UECFG0X = UECFG0XTemp;
    6d16:	70 93 ec 00 	sts	0x00EC, r23
		UECFG1X = UECFG1XTemp;
    6d1a:	20 93 ed 00 	sts	0x00ED, r18
		UEIENX  = UEIENXTemp;
    6d1e:	50 93 f0 00 	sts	0x00F0, r21
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    6d22:	20 91 ee 00 	lds	r18, 0x00EE

		if (!(Endpoint_IsConfigured()))
    6d26:	27 ff       	sbrs	r18, 7
    6d28:	1c c0       	rjmp	.+56     	; 0x6d62 <Endpoint_ConfigureEndpoint_Prv+0x84>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    6d2a:	9f 5f       	subi	r25, 0xFF	; 255
    6d2c:	97 30       	cpi	r25, 0x07	; 7
    6d2e:	89 f0       	breq	.+34     	; 0x6d52 <Endpoint_ConfigureEndpoint_Prv+0x74>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    6d30:	29 2f       	mov	r18, r25
    6d32:	2f 70       	andi	r18, 0x0F	; 15
    6d34:	20 93 e9 00 	sts	0x00E9, r18
		uint8_t UECFG1XTemp;
		uint8_t UEIENXTemp;

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
    6d38:	89 17       	cp	r24, r25
    6d3a:	79 f0       	breq	.+30     	; 0x6d5a <Endpoint_ConfigureEndpoint_Prv+0x7c>
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
		}
		else
		{
			UECFG0XTemp = UECFG0X;
    6d3c:	70 91 ec 00 	lds	r23, 0x00EC
			UECFG1XTemp = UECFG1X;
    6d40:	20 91 ed 00 	lds	r18, 0x00ED
			UEIENXTemp  = UEIENX;
    6d44:	50 91 f0 00 	lds	r21, 0x00F0
		}

		if (!(UECFG1XTemp & (1 << ALLOC)))
    6d48:	21 fd       	sbrc	r18, 1
    6d4a:	d6 cf       	rjmp	.-84     	; 0x6cf8 <Endpoint_ConfigureEndpoint_Prv+0x1a>
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    6d4c:	9f 5f       	subi	r25, 0xFF	; 255
    6d4e:	97 30       	cpi	r25, 0x07	; 7
    6d50:	79 f7       	brne	.-34     	; 0x6d30 <Endpoint_ConfigureEndpoint_Prv+0x52>
    6d52:	e0 93 e9 00 	sts	0x00E9, r30
		if (!(Endpoint_IsConfigured()))
		  return false;
	}

	Endpoint_SelectEndpoint(Number);
	return true;
    6d56:	81 e0       	ldi	r24, 0x01	; 1
    6d58:	08 95       	ret
		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
			UECFG1XTemp = UECFG1XData;
    6d5a:	24 2f       	mov	r18, r20

		Endpoint_SelectEndpoint(EPNum);

		if (EPNum == Number)
		{
			UECFG0XTemp = UECFG0XData;
    6d5c:	76 2f       	mov	r23, r22
			UECFG1XTemp = UECFG1XData;
			UEIENXTemp  = 0;
    6d5e:	50 e0       	ldi	r21, 0x00	; 0
    6d60:	c9 cf       	rjmp	.-110    	; 0x6cf4 <Endpoint_ConfigureEndpoint_Prv+0x16>
		UECFG0X = UECFG0XTemp;
		UECFG1X = UECFG1XTemp;
		UEIENX  = UEIENXTemp;

		if (!(Endpoint_IsConfigured()))
		  return false;
    6d62:	80 e0       	ldi	r24, 0x00	; 0
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    6d64:	08 95       	ret
	UECFG0X = UECFG0XData;
	UECFG1X = UECFG1XData;

	return Endpoint_IsConfigured();
#else
	for (uint8_t EPNum = Number; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    6d66:	e8 2f       	mov	r30, r24
    6d68:	ef 70       	andi	r30, 0x0F	; 15
    6d6a:	f3 cf       	rjmp	.-26     	; 0x6d52 <Endpoint_ConfigureEndpoint_Prv+0x74>

00006d6c <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    6d6c:	80 91 74 03 	lds	r24, 0x0374
    6d70:	87 fd       	sbrc	r24, 7
    6d72:	09 c0       	rjmp	.+18     	; 0x6d86 <Endpoint_ClearStatusStage+0x1a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    6d74:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    6d78:	80 fd       	sbrc	r24, 0
    6d7a:	0e c0       	rjmp	.+28     	; 0x6d98 <Endpoint_ClearStatusStage+0x2c>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    6d7c:	80 91 73 03 	lds	r24, 0x0373
    6d80:	88 23       	and	r24, r24
    6d82:	c1 f7       	brne	.-16     	; 0x6d74 <Endpoint_ClearStatusStage+0x8>
    6d84:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    6d86:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    6d8a:	82 fd       	sbrc	r24, 2
    6d8c:	0b c0       	rjmp	.+22     	; 0x6da4 <Endpoint_ClearStatusStage+0x38>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    6d8e:	80 91 73 03 	lds	r24, 0x0373
    6d92:	88 23       	and	r24, r24
    6d94:	c1 f7       	brne	.-16     	; 0x6d86 <Endpoint_ClearStatusStage+0x1a>
    6d96:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    6d98:	80 91 e8 00 	lds	r24, 0x00E8
    6d9c:	8e 77       	andi	r24, 0x7E	; 126
    6d9e:	80 93 e8 00 	sts	0x00E8, r24
    6da2:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    6da4:	80 91 e8 00 	lds	r24, 0x00E8
    6da8:	8b 77       	andi	r24, 0x7B	; 123
    6daa:	80 93 e8 00 	sts	0x00E8, r24
    6dae:	08 95       	ret

00006db0 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
    6db0:	0f 93       	push	r16
    6db2:	1f 93       	push	r17
    6db4:	cf 93       	push	r28
    6db6:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    6db8:	49 d0       	rcall	.+146    	; 0x6e4c <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    6dba:	50 d0       	rcall	.+160    	; 0x6e5c <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    6dbc:	c8 ed       	ldi	r28, 0xD8	; 216
    6dbe:	d0 e0       	ldi	r29, 0x00	; 0
    6dc0:	88 81       	ld	r24, Y
    6dc2:	8f 77       	andi	r24, 0x7F	; 127
    6dc4:	88 83       	st	Y, r24
				USBCON |=  (1 << USBE);
    6dc6:	88 81       	ld	r24, Y
    6dc8:	80 68       	ori	r24, 0x80	; 128
    6dca:	88 83       	st	Y, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    6dcc:	88 81       	ld	r24, Y
    6dce:	8f 7d       	andi	r24, 0xDF	; 223
    6dd0:	88 83       	st	Y, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    6dd2:	e7 ed       	ldi	r30, 0xD7	; 215
    6dd4:	f0 e0       	ldi	r31, 0x00	; 0
    6dd6:	80 81       	ld	r24, Z
    6dd8:	80 68       	ori	r24, 0x80	; 128
    6dda:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    6ddc:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
    6dde:	10 92 73 03 	sts	0x0373, r1
	USB_Device_ConfigurationNumber  = 0;
    6de2:	10 92 6f 03 	sts	0x036F, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_Device_RemoteWakeupEnabled  = false;
    6de6:	10 92 71 03 	sts	0x0371, r1
	#endif

	#if !defined(NO_DEVICE_SELF_POWER)
	USB_Device_CurrentlySelfPowered = false;
    6dea:	10 92 70 03 	sts	0x0370, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    6dee:	00 ee       	ldi	r16, 0xE0	; 224
    6df0:	10 e0       	ldi	r17, 0x00	; 0
    6df2:	f8 01       	movw	r30, r16
    6df4:	80 81       	ld	r24, Z
    6df6:	8b 7f       	andi	r24, 0xFB	; 251
    6df8:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    6dfa:	88 81       	ld	r24, Y
    6dfc:	81 60       	ori	r24, 0x01	; 1
    6dfe:	88 83       	st	Y, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    6e00:	80 e0       	ldi	r24, 0x00	; 0
    6e02:	60 e0       	ldi	r22, 0x00	; 0
    6e04:	42 e0       	ldi	r20, 0x02	; 2
    6e06:	6b df       	rcall	.-298    	; 0x6cde <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    6e08:	e1 ee       	ldi	r30, 0xE1	; 225
    6e0a:	f0 e0       	ldi	r31, 0x00	; 0
    6e0c:	80 81       	ld	r24, Z
    6e0e:	8e 7f       	andi	r24, 0xFE	; 254
    6e10:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    6e12:	e2 ee       	ldi	r30, 0xE2	; 226
    6e14:	f0 e0       	ldi	r31, 0x00	; 0
    6e16:	80 81       	ld	r24, Z
    6e18:	81 60       	ori	r24, 0x01	; 1
    6e1a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    6e1c:	80 81       	ld	r24, Z
    6e1e:	88 60       	ori	r24, 0x08	; 8
    6e20:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    6e22:	f8 01       	movw	r30, r16
    6e24:	80 81       	ld	r24, Z
    6e26:	8e 7f       	andi	r24, 0xFE	; 254
    6e28:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    6e2a:	88 81       	ld	r24, Y
    6e2c:	80 61       	ori	r24, 0x10	; 16
    6e2e:	88 83       	st	Y, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    6e30:	df 91       	pop	r29
    6e32:	cf 91       	pop	r28
    6e34:	1f 91       	pop	r17
    6e36:	0f 91       	pop	r16
    6e38:	08 95       	ret

00006e3a <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    6e3a:	e7 ed       	ldi	r30, 0xD7	; 215
    6e3c:	f0 e0       	ldi	r31, 0x00	; 0
    6e3e:	80 81       	ld	r24, Z
    6e40:	81 60       	ori	r24, 0x01	; 1
    6e42:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    6e44:	81 e0       	ldi	r24, 0x01	; 1
    6e46:	80 93 72 03 	sts	0x0372, r24

	USB_ResetInterface();
}
    6e4a:	b2 cf       	rjmp	.-156    	; 0x6db0 <USB_ResetInterface>

00006e4c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    6e4c:	e8 ed       	ldi	r30, 0xD8	; 216
    6e4e:	f0 e0       	ldi	r31, 0x00	; 0
    6e50:	80 81       	ld	r24, Z
    6e52:	8c 7f       	andi	r24, 0xFC	; 252
    6e54:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    6e56:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    6e5a:	08 95       	ret

00006e5c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    6e5c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    6e60:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    6e64:	08 95       	ret

00006e66 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    6e66:	1f 92       	push	r1
    6e68:	0f 92       	push	r0
    6e6a:	0f b6       	in	r0, 0x3f	; 63
    6e6c:	0f 92       	push	r0
    6e6e:	0b b6       	in	r0, 0x3b	; 59
    6e70:	0f 92       	push	r0
    6e72:	11 24       	eor	r1, r1
    6e74:	2f 93       	push	r18
    6e76:	3f 93       	push	r19
    6e78:	4f 93       	push	r20
    6e7a:	5f 93       	push	r21
    6e7c:	6f 93       	push	r22
    6e7e:	7f 93       	push	r23
    6e80:	8f 93       	push	r24
    6e82:	9f 93       	push	r25
    6e84:	af 93       	push	r26
    6e86:	bf 93       	push	r27
    6e88:	ef 93       	push	r30
    6e8a:	ff 93       	push	r31
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
					case USB_INT_SOFI:
						return (UDINT  & (1 << SOFI));
    6e8c:	80 91 e1 00 	lds	r24, 0x00E1
	#if defined(USB_CAN_BE_DEVICE)
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    6e90:	82 ff       	sbrs	r24, 2
    6e92:	04 c0       	rjmp	.+8      	; 0x6e9c <__vector_10+0x36>
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
					case USB_INT_SOFI:
						return (UDIEN  & (1 << SOFE));
    6e94:	80 91 e2 00 	lds	r24, 0x00E2
    6e98:	82 fd       	sbrc	r24, 2
    6e9a:	8f c0       	rjmp	.+286    	; 0x6fba <__vector_10+0x154>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    6e9c:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    6ea0:	80 ff       	sbrs	r24, 0
    6ea2:	04 c0       	rjmp	.+8      	; 0x6eac <__vector_10+0x46>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    6ea4:	80 91 d8 00 	lds	r24, 0x00D8
    6ea8:	80 fd       	sbrc	r24, 0
    6eaa:	53 c0       	rjmp	.+166    	; 0x6f52 <__vector_10+0xec>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    6eac:	80 91 e1 00 	lds	r24, 0x00E1
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    6eb0:	80 ff       	sbrs	r24, 0
    6eb2:	04 c0       	rjmp	.+8      	; 0x6ebc <__vector_10+0x56>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    6eb4:	80 91 e2 00 	lds	r24, 0x00E2
    6eb8:	80 fd       	sbrc	r24, 0
    6eba:	86 c0       	rjmp	.+268    	; 0x6fc8 <__vector_10+0x162>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    6ebc:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    6ec0:	84 ff       	sbrs	r24, 4
    6ec2:	2c c0       	rjmp	.+88     	; 0x6f1c <__vector_10+0xb6>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    6ec4:	80 91 e2 00 	lds	r24, 0x00E2
    6ec8:	84 ff       	sbrs	r24, 4
    6eca:	28 c0       	rjmp	.+80     	; 0x6f1c <__vector_10+0xb6>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    6ecc:	84 e1       	ldi	r24, 0x14	; 20
    6ece:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    6ed0:	86 e1       	ldi	r24, 0x16	; 22
    6ed2:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    6ed4:	09 b4       	in	r0, 0x29	; 41
    6ed6:	00 fe       	sbrs	r0, 0
    6ed8:	fd cf       	rjmp	.-6      	; 0x6ed4 <__vector_10+0x6e>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    6eda:	80 91 d8 00 	lds	r24, 0x00D8
    6ede:	8f 7d       	andi	r24, 0xDF	; 223
    6ee0:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    6ee4:	80 91 e1 00 	lds	r24, 0x00E1
    6ee8:	8f 7e       	andi	r24, 0xEF	; 239
    6eea:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    6eee:	80 91 e2 00 	lds	r24, 0x00E2
    6ef2:	8f 7e       	andi	r24, 0xEF	; 239
    6ef4:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    6ef8:	80 91 e2 00 	lds	r24, 0x00E2
    6efc:	81 60       	ori	r24, 0x01	; 1
    6efe:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    6f02:	80 91 6f 03 	lds	r24, 0x036F
    6f06:	88 23       	and	r24, r24
    6f08:	09 f0       	breq	.+2      	; 0x6f0c <__vector_10+0xa6>
    6f0a:	73 c0       	rjmp	.+230    	; 0x6ff2 <__vector_10+0x18c>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    6f0c:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    6f10:	87 ff       	sbrs	r24, 7
    6f12:	78 c0       	rjmp	.+240    	; 0x7004 <__vector_10+0x19e>
    6f14:	84 e0       	ldi	r24, 0x04	; 4
    6f16:	80 93 73 03 	sts	0x0373, r24

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    6f1a:	f8 d2       	rcall	.+1520   	; 0x750c <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    6f1c:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    6f20:	83 ff       	sbrs	r24, 3
    6f22:	04 c0       	rjmp	.+8      	; 0x6f2c <__vector_10+0xc6>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    6f24:	80 91 e2 00 	lds	r24, 0x00E2
    6f28:	83 fd       	sbrc	r24, 3
    6f2a:	28 c0       	rjmp	.+80     	; 0x6f7c <__vector_10+0x116>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    6f2c:	ff 91       	pop	r31
    6f2e:	ef 91       	pop	r30
    6f30:	bf 91       	pop	r27
    6f32:	af 91       	pop	r26
    6f34:	9f 91       	pop	r25
    6f36:	8f 91       	pop	r24
    6f38:	7f 91       	pop	r23
    6f3a:	6f 91       	pop	r22
    6f3c:	5f 91       	pop	r21
    6f3e:	4f 91       	pop	r20
    6f40:	3f 91       	pop	r19
    6f42:	2f 91       	pop	r18
    6f44:	0f 90       	pop	r0
    6f46:	0b be       	out	0x3b, r0	; 59
    6f48:	0f 90       	pop	r0
    6f4a:	0f be       	out	0x3f, r0	; 63
    6f4c:	0f 90       	pop	r0
    6f4e:	1f 90       	pop	r1
    6f50:	18 95       	reti
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    6f52:	80 91 da 00 	lds	r24, 0x00DA
    6f56:	8e 7f       	andi	r24, 0xFE	; 254
    6f58:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    6f5c:	80 91 d9 00 	lds	r24, 0x00D9
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    6f60:	80 ff       	sbrs	r24, 0
    6f62:	4b c0       	rjmp	.+150    	; 0x6ffa <__vector_10+0x194>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    6f64:	84 e1       	ldi	r24, 0x14	; 20
    6f66:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    6f68:	86 e1       	ldi	r24, 0x16	; 22
    6f6a:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    6f6c:	09 b4       	in	r0, 0x29	; 41
    6f6e:	00 fe       	sbrs	r0, 0
    6f70:	fd cf       	rjmp	.-6      	; 0x6f6c <__vector_10+0x106>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    6f72:	81 e0       	ldi	r24, 0x01	; 1
    6f74:	80 93 73 03 	sts	0x0373, r24
			EVENT_USB_Device_Connect();
    6f78:	c9 d2       	rcall	.+1426   	; 0x750c <USB_Event_Stub>
    6f7a:	98 cf       	rjmp	.-208    	; 0x6eac <__vector_10+0x46>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    6f7c:	80 91 e1 00 	lds	r24, 0x00E1
    6f80:	87 7f       	andi	r24, 0xF7	; 247
    6f82:	80 93 e1 00 	sts	0x00E1, r24

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    6f86:	82 e0       	ldi	r24, 0x02	; 2
    6f88:	80 93 73 03 	sts	0x0373, r24
		USB_Device_ConfigurationNumber = 0;
    6f8c:	10 92 6f 03 	sts	0x036F, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    6f90:	80 91 e1 00 	lds	r24, 0x00E1
    6f94:	8e 7f       	andi	r24, 0xFE	; 254
    6f96:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    6f9a:	80 91 e2 00 	lds	r24, 0x00E2
    6f9e:	8e 7f       	andi	r24, 0xFE	; 254
    6fa0:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    6fa4:	80 91 e2 00 	lds	r24, 0x00E2
    6fa8:	80 61       	ori	r24, 0x10	; 16
    6faa:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    6fae:	80 e0       	ldi	r24, 0x00	; 0
    6fb0:	60 e0       	ldi	r22, 0x00	; 0
    6fb2:	42 e0       	ldi	r20, 0x02	; 2
    6fb4:	94 de       	rcall	.-728    	; 0x6cde <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    6fb6:	aa d2       	rcall	.+1364   	; 0x750c <USB_Event_Stub>
    6fb8:	b9 cf       	rjmp	.-142    	; 0x6f2c <__vector_10+0xc6>
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
						break;
					case USB_INT_SOFI:
						UDINT  &= ~(1 << SOFI);
    6fba:	80 91 e1 00 	lds	r24, 0x00E1
    6fbe:	8b 7f       	andi	r24, 0xFB	; 251
    6fc0:	80 93 e1 00 	sts	0x00E1, r24
	#if !defined(NO_SOF_EVENTS)
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
	{
		USB_INT_Clear(USB_INT_SOFI);

		EVENT_USB_Device_StartOfFrame();
    6fc4:	a3 d2       	rcall	.+1350   	; 0x750c <USB_Event_Stub>
    6fc6:	6a cf       	rjmp	.-300    	; 0x6e9c <__vector_10+0x36>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    6fc8:	80 91 e2 00 	lds	r24, 0x00E2
    6fcc:	8e 7f       	andi	r24, 0xFE	; 254
    6fce:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    6fd2:	80 91 e2 00 	lds	r24, 0x00E2
    6fd6:	80 61       	ori	r24, 0x10	; 16
    6fd8:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    6fdc:	80 91 d8 00 	lds	r24, 0x00D8
    6fe0:	80 62       	ori	r24, 0x20	; 32
    6fe2:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    6fe6:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    6fe8:	85 e0       	ldi	r24, 0x05	; 5
    6fea:	80 93 73 03 	sts	0x0373, r24
		EVENT_USB_Device_Suspend();
    6fee:	8e d2       	rcall	.+1308   	; 0x750c <USB_Event_Stub>
    6ff0:	65 cf       	rjmp	.-310    	; 0x6ebc <__vector_10+0x56>

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
    6ff2:	84 e0       	ldi	r24, 0x04	; 4
    6ff4:	80 93 73 03 	sts	0x0373, r24
    6ff8:	90 cf       	rjmp	.-224    	; 0x6f1a <__vector_10+0xb4>
    6ffa:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    6ffc:	10 92 73 03 	sts	0x0373, r1
			EVENT_USB_Device_Disconnect();
    7000:	85 d2       	rcall	.+1290   	; 0x750c <USB_Event_Stub>
    7002:	54 cf       	rjmp	.-344    	; 0x6eac <__vector_10+0x46>
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    7004:	81 e0       	ldi	r24, 0x01	; 1
    7006:	87 cf       	rjmp	.-242    	; 0x6f16 <__vector_10+0xb0>

00007008 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7008:	20 91 7a 03 	lds	r18, 0x037A
    700c:	30 91 7b 03 	lds	r19, 0x037B
    7010:	26 17       	cp	r18, r22
    7012:	37 07       	cpc	r19, r23
    7014:	58 f0       	brcs	.+22     	; 0x702c <Endpoint_Write_Control_Stream_LE+0x24>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7016:	61 15       	cp	r22, r1
    7018:	71 05       	cpc	r23, r1
    701a:	09 f0       	breq	.+2      	; 0x701e <Endpoint_Write_Control_Stream_LE+0x16>
    701c:	69 c0       	rjmp	.+210    	; 0x70f0 <Endpoint_Write_Control_Stream_LE+0xe8>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    701e:	20 91 e8 00 	lds	r18, 0x00E8
    7022:	2e 77       	andi	r18, 0x7E	; 126
    7024:	20 93 e8 00 	sts	0x00E8, r18
    7028:	20 e0       	ldi	r18, 0x00	; 0
    702a:	30 e0       	ldi	r19, 0x00	; 0
    702c:	60 e0       	ldi	r22, 0x00	; 0
    702e:	21 15       	cp	r18, r1
    7030:	31 05       	cpc	r19, r1
    7032:	c9 f1       	breq	.+114    	; 0x70a6 <Endpoint_Write_Control_Stream_LE+0x9e>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7034:	40 91 73 03 	lds	r20, 0x0373

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7038:	44 23       	and	r20, r20
    703a:	09 f4       	brne	.+2      	; 0x703e <Endpoint_Write_Control_Stream_LE+0x36>
    703c:	5b c0       	rjmp	.+182    	; 0x70f4 <Endpoint_Write_Control_Stream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    703e:	45 30       	cpi	r20, 0x05	; 5
    7040:	09 f4       	brne	.+2      	; 0x7044 <Endpoint_Write_Control_Stream_LE+0x3c>
    7042:	5a c0       	rjmp	.+180    	; 0x70f8 <Endpoint_Write_Control_Stream_LE+0xf0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7044:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7048:	43 fd       	sbrc	r20, 3
    704a:	58 c0       	rjmp	.+176    	; 0x70fc <Endpoint_Write_Control_Stream_LE+0xf4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    704c:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    7050:	42 fd       	sbrc	r20, 2
    7052:	42 c0       	rjmp	.+132    	; 0x70d8 <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7054:	40 91 e8 00 	lds	r20, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7058:	40 ff       	sbrs	r20, 0
    705a:	ec cf       	rjmp	.-40     	; 0x7034 <Endpoint_Write_Control_Stream_LE+0x2c>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
    705c:	40 91 f2 00 	lds	r20, 0x00F2
    7060:	50 91 f3 00 	lds	r21, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7064:	48 30       	cpi	r20, 0x08	; 8
    7066:	51 05       	cpc	r21, r1
    7068:	88 f4       	brcc	.+34     	; 0x708c <Endpoint_Write_Control_Stream_LE+0x84>
    706a:	e8 2f       	mov	r30, r24
    706c:	f9 2f       	mov	r31, r25
    706e:	03 c0       	rjmp	.+6      	; 0x7076 <Endpoint_Write_Control_Stream_LE+0x6e>
    7070:	48 30       	cpi	r20, 0x08	; 8
    7072:	51 05       	cpc	r21, r1
    7074:	58 f4       	brcc	.+22     	; 0x708c <Endpoint_Write_Control_Stream_LE+0x84>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7076:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7078:	80 93 f1 00 	sts	0x00F1, r24
    707c:	cf 01       	movw	r24, r30
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    707e:	21 50       	subi	r18, 0x01	; 1
    7080:	30 40       	sbci	r19, 0x00	; 0
				BytesInEndpoint++;
    7082:	4f 5f       	subi	r20, 0xFF	; 255
    7084:	5f 4f       	sbci	r21, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7086:	21 15       	cp	r18, r1
    7088:	31 05       	cpc	r19, r1
    708a:	91 f7       	brne	.-28     	; 0x7070 <Endpoint_Write_Control_Stream_LE+0x68>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    708c:	61 e0       	ldi	r22, 0x01	; 1
    708e:	48 30       	cpi	r20, 0x08	; 8
    7090:	51 05       	cpc	r21, r1
    7092:	09 f0       	breq	.+2      	; 0x7096 <Endpoint_Write_Control_Stream_LE+0x8e>
    7094:	60 e0       	ldi	r22, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7096:	40 91 e8 00 	lds	r20, 0x00E8
    709a:	4e 77       	andi	r20, 0x7E	; 126
    709c:	40 93 e8 00 	sts	0x00E8, r20
    70a0:	21 15       	cp	r18, r1
    70a2:	31 05       	cpc	r19, r1
    70a4:	39 f6       	brne	.-114    	; 0x7034 <Endpoint_Write_Control_Stream_LE+0x2c>
    70a6:	66 23       	and	r22, r22
    70a8:	b9 f0       	breq	.+46     	; 0x70d8 <Endpoint_Write_Control_Stream_LE+0xd0>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    70aa:	40 91 73 03 	lds	r20, 0x0373

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    70ae:	44 23       	and	r20, r20
    70b0:	09 f1       	breq	.+66     	; 0x70f4 <Endpoint_Write_Control_Stream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    70b2:	45 30       	cpi	r20, 0x05	; 5
    70b4:	09 f1       	breq	.+66     	; 0x70f8 <Endpoint_Write_Control_Stream_LE+0xf0>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    70b6:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    70ba:	43 fd       	sbrc	r20, 3
    70bc:	1f c0       	rjmp	.+62     	; 0x70fc <Endpoint_Write_Control_Stream_LE+0xf4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    70be:	40 91 e8 00 	lds	r20, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    70c2:	42 fd       	sbrc	r20, 2
    70c4:	09 c0       	rjmp	.+18     	; 0x70d8 <Endpoint_Write_Control_Stream_LE+0xd0>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    70c6:	40 91 e8 00 	lds	r20, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    70ca:	40 ff       	sbrs	r20, 0
    70cc:	ee cf       	rjmp	.-36     	; 0x70aa <Endpoint_Write_Control_Stream_LE+0xa2>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
    70ce:	40 91 f2 00 	lds	r20, 0x00F2
    70d2:	50 91 f3 00 	lds	r21, 0x00F3
    70d6:	da cf       	rjmp	.-76     	; 0x708c <Endpoint_Write_Control_Stream_LE+0x84>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    70d8:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    70dc:	82 fd       	sbrc	r24, 2
    70de:	10 c0       	rjmp	.+32     	; 0x7100 <Endpoint_Write_Control_Stream_LE+0xf8>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    70e0:	80 91 73 03 	lds	r24, 0x0373

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    70e4:	88 23       	and	r24, r24
    70e6:	31 f0       	breq	.+12     	; 0x70f4 <Endpoint_Write_Control_Stream_LE+0xec>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    70e8:	85 30       	cpi	r24, 0x05	; 5
    70ea:	b1 f7       	brne	.-20     	; 0x70d8 <Endpoint_Write_Control_Stream_LE+0xd0>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    70ec:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    70ee:	08 95       	ret
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    70f0:	9b 01       	movw	r18, r22
    70f2:	9c cf       	rjmp	.-200    	; 0x702c <Endpoint_Write_Control_Stream_LE+0x24>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    70f4:	82 e0       	ldi	r24, 0x02	; 2
    70f6:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    70f8:	83 e0       	ldi	r24, 0x03	; 3
    70fa:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    70fc:	81 e0       	ldi	r24, 0x01	; 1
    70fe:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    7100:	80 e0       	ldi	r24, 0x00	; 0
    7102:	08 95       	ret

00007104 <Endpoint_Write_Control_PStream_LE>:

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    7104:	e8 2f       	mov	r30, r24
    7106:	f9 2f       	mov	r31, r25
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    7108:	80 91 7a 03 	lds	r24, 0x037A
    710c:	90 91 7b 03 	lds	r25, 0x037B
    7110:	86 17       	cp	r24, r22
    7112:	97 07       	cpc	r25, r23
    7114:	58 f0       	brcs	.+22     	; 0x712c <Endpoint_Write_Control_PStream_LE+0x28>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    7116:	61 15       	cp	r22, r1
    7118:	71 05       	cpc	r23, r1
    711a:	09 f0       	breq	.+2      	; 0x711e <Endpoint_Write_Control_PStream_LE+0x1a>
    711c:	60 c0       	rjmp	.+192    	; 0x71de <Endpoint_Write_Control_PStream_LE+0xda>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    711e:	80 91 e8 00 	lds	r24, 0x00E8
    7122:	8e 77       	andi	r24, 0x7E	; 126
    7124:	80 93 e8 00 	sts	0x00E8, r24
    7128:	80 e0       	ldi	r24, 0x00	; 0
    712a:	90 e0       	ldi	r25, 0x00	; 0
    712c:	40 e0       	ldi	r20, 0x00	; 0
    712e:	00 97       	sbiw	r24, 0x00	; 0
    7130:	89 f1       	breq	.+98     	; 0x7194 <Endpoint_Write_Control_PStream_LE+0x90>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7132:	20 91 73 03 	lds	r18, 0x0373

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    7136:	22 23       	and	r18, r18
    7138:	09 f4       	brne	.+2      	; 0x713c <Endpoint_Write_Control_PStream_LE+0x38>
    713a:	53 c0       	rjmp	.+166    	; 0x71e2 <Endpoint_Write_Control_PStream_LE+0xde>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    713c:	25 30       	cpi	r18, 0x05	; 5
    713e:	09 f4       	brne	.+2      	; 0x7142 <Endpoint_Write_Control_PStream_LE+0x3e>
    7140:	52 c0       	rjmp	.+164    	; 0x71e6 <Endpoint_Write_Control_PStream_LE+0xe2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7142:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    7146:	23 fd       	sbrc	r18, 3
    7148:	50 c0       	rjmp	.+160    	; 0x71ea <Endpoint_Write_Control_PStream_LE+0xe6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    714a:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    714e:	22 fd       	sbrc	r18, 2
    7150:	3a c0       	rjmp	.+116    	; 0x71c6 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7152:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    7156:	20 ff       	sbrs	r18, 0
    7158:	ec cf       	rjmp	.-40     	; 0x7132 <Endpoint_Write_Control_PStream_LE+0x2e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
    715a:	20 91 f2 00 	lds	r18, 0x00F2
    715e:	30 91 f3 00 	lds	r19, 0x00F3
    7162:	09 c0       	rjmp	.+18     	; 0x7176 <Endpoint_Write_Control_PStream_LE+0x72>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    7164:	44 91       	lpm	r20, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    7166:	40 93 f1 00 	sts	0x00F1, r20
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    716a:	31 96       	adiw	r30, 0x01	; 1
				Length--;
    716c:	01 97       	sbiw	r24, 0x01	; 1
				BytesInEndpoint++;
    716e:	2f 5f       	subi	r18, 0xFF	; 255
    7170:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    7172:	00 97       	sbiw	r24, 0x00	; 0
    7174:	19 f0       	breq	.+6      	; 0x717c <Endpoint_Write_Control_PStream_LE+0x78>
    7176:	28 30       	cpi	r18, 0x08	; 8
    7178:	31 05       	cpc	r19, r1
    717a:	a0 f3       	brcs	.-24     	; 0x7164 <Endpoint_Write_Control_PStream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    717c:	41 e0       	ldi	r20, 0x01	; 1
    717e:	28 30       	cpi	r18, 0x08	; 8
    7180:	31 05       	cpc	r19, r1
    7182:	09 f0       	breq	.+2      	; 0x7186 <Endpoint_Write_Control_PStream_LE+0x82>
    7184:	40 e0       	ldi	r20, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7186:	20 91 e8 00 	lds	r18, 0x00E8
    718a:	2e 77       	andi	r18, 0x7E	; 126
    718c:	20 93 e8 00 	sts	0x00E8, r18
    7190:	00 97       	sbiw	r24, 0x00	; 0
    7192:	79 f6       	brne	.-98     	; 0x7132 <Endpoint_Write_Control_PStream_LE+0x2e>
    7194:	44 23       	and	r20, r20
    7196:	b9 f0       	breq	.+46     	; 0x71c6 <Endpoint_Write_Control_PStream_LE+0xc2>
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    7198:	20 91 73 03 	lds	r18, 0x0373

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    719c:	22 23       	and	r18, r18
    719e:	09 f1       	breq	.+66     	; 0x71e2 <Endpoint_Write_Control_PStream_LE+0xde>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    71a0:	25 30       	cpi	r18, 0x05	; 5
    71a2:	09 f1       	breq	.+66     	; 0x71e6 <Endpoint_Write_Control_PStream_LE+0xe2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    71a4:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    71a8:	23 fd       	sbrc	r18, 3
    71aa:	1f c0       	rjmp	.+62     	; 0x71ea <Endpoint_Write_Control_PStream_LE+0xe6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    71ac:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    71b0:	22 fd       	sbrc	r18, 2
    71b2:	09 c0       	rjmp	.+18     	; 0x71c6 <Endpoint_Write_Control_PStream_LE+0xc2>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    71b4:	20 91 e8 00 	lds	r18, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    71b8:	20 ff       	sbrs	r18, 0
    71ba:	ee cf       	rjmp	.-36     	; 0x7198 <Endpoint_Write_Control_PStream_LE+0x94>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
    71bc:	20 91 f2 00 	lds	r18, 0x00F2
    71c0:	30 91 f3 00 	lds	r19, 0x00F3
    71c4:	db cf       	rjmp	.-74     	; 0x717c <Endpoint_Write_Control_PStream_LE+0x78>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    71c6:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    71ca:	82 fd       	sbrc	r24, 2
    71cc:	10 c0       	rjmp	.+32     	; 0x71ee <Endpoint_Write_Control_PStream_LE+0xea>
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    71ce:	80 91 73 03 	lds	r24, 0x0373

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    71d2:	88 23       	and	r24, r24
    71d4:	31 f0       	breq	.+12     	; 0x71e2 <Endpoint_Write_Control_PStream_LE+0xde>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    71d6:	85 30       	cpi	r24, 0x05	; 5
    71d8:	b1 f7       	brne	.-20     	; 0x71c6 <Endpoint_Write_Control_PStream_LE+0xc2>
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    71da:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    71dc:	08 95       	ret
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    71de:	cb 01       	movw	r24, r22
    71e0:	a5 cf       	rjmp	.-182    	; 0x712c <Endpoint_Write_Control_PStream_LE+0x28>
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    71e2:	82 e0       	ldi	r24, 0x02	; 2
    71e4:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    71e6:	83 e0       	ldi	r24, 0x03	; 3
    71e8:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    71ea:	81 e0       	ldi	r24, 0x01	; 1
    71ec:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    71ee:	80 e0       	ldi	r24, 0x00	; 0
    71f0:	08 95       	ret

000071f2 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    71f2:	0f 93       	push	r16
    71f4:	1f 93       	push	r17
    71f6:	df 93       	push	r29
    71f8:	cf 93       	push	r28
    71fa:	cd b7       	in	r28, 0x3d	; 61
    71fc:	de b7       	in	r29, 0x3e	; 62
    71fe:	ac 97       	sbiw	r28, 0x2c	; 44
    7200:	0f b6       	in	r0, 0x3f	; 63
    7202:	f8 94       	cli
    7204:	de bf       	out	0x3e, r29	; 62
    7206:	0f be       	out	0x3f, r0	; 63
    7208:	cd bf       	out	0x3d, r28	; 61
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    720a:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    720e:	80 93 74 03 	sts	0x0374, r24
    7212:	e5 e7       	ldi	r30, 0x75	; 117
    7214:	f3 e0       	ldi	r31, 0x03	; 3
    7216:	80 91 f1 00 	lds	r24, 0x00F1
    721a:	80 93 75 03 	sts	0x0375, r24
    721e:	80 91 f1 00 	lds	r24, 0x00F1
    7222:	81 83       	std	Z+1, r24	; 0x01
    7224:	80 91 f1 00 	lds	r24, 0x00F1
    7228:	82 83       	std	Z+2, r24	; 0x02
    722a:	80 91 f1 00 	lds	r24, 0x00F1
    722e:	83 83       	std	Z+3, r24	; 0x03
    7230:	80 91 f1 00 	lds	r24, 0x00F1
    7234:	84 83       	std	Z+4, r24	; 0x04
    7236:	80 91 f1 00 	lds	r24, 0x00F1
    723a:	85 83       	std	Z+5, r24	; 0x05
    723c:	80 91 f1 00 	lds	r24, 0x00F1
    7240:	86 83       	std	Z+6, r24	; 0x06
	#endif

	EVENT_USB_Device_ControlRequest();
    7242:	64 d1       	rcall	.+712    	; 0x750c <USB_Event_Stub>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7244:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
    7248:	83 ff       	sbrs	r24, 3
    724a:	12 c0       	rjmp	.+36     	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    724c:	90 91 74 03 	lds	r25, 0x0374

		switch (USB_ControlRequest.bRequest)
    7250:	80 91 75 03 	lds	r24, 0x0375
    7254:	85 30       	cpi	r24, 0x05	; 5
    7256:	09 f4       	brne	.+2      	; 0x725a <USB_Device_ProcessControlRequest+0x68>
    7258:	61 c0       	rjmp	.+194    	; 0x731c <USB_Device_ProcessControlRequest+0x12a>
    725a:	86 30       	cpi	r24, 0x06	; 6
    725c:	10 f1       	brcs	.+68     	; 0x72a2 <USB_Device_ProcessControlRequest+0xb0>
    725e:	88 30       	cpi	r24, 0x08	; 8
    7260:	09 f4       	brne	.+2      	; 0x7264 <USB_Device_ProcessControlRequest+0x72>
    7262:	e2 c0       	rjmp	.+452    	; 0x7428 <USB_Device_ProcessControlRequest+0x236>
    7264:	89 30       	cpi	r24, 0x09	; 9
    7266:	09 f4       	brne	.+2      	; 0x726a <USB_Device_ProcessControlRequest+0x78>
    7268:	c4 c0       	rjmp	.+392    	; 0x73f2 <USB_Device_ProcessControlRequest+0x200>
    726a:	86 30       	cpi	r24, 0x06	; 6
    726c:	09 f4       	brne	.+2      	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
    726e:	79 c0       	rjmp	.+242    	; 0x7362 <USB_Device_ProcessControlRequest+0x170>
    7270:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    7274:	83 ff       	sbrs	r24, 3
    7276:	0a c0       	rjmp	.+20     	; 0x728c <USB_Device_ProcessControlRequest+0x9a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    7278:	80 91 eb 00 	lds	r24, 0x00EB
    727c:	80 62       	ori	r24, 0x20	; 32
    727e:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7282:	80 91 e8 00 	lds	r24, 0x00E8
    7286:	87 7f       	andi	r24, 0xF7	; 247
    7288:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
    728c:	ac 96       	adiw	r28, 0x2c	; 44
    728e:	0f b6       	in	r0, 0x3f	; 63
    7290:	f8 94       	cli
    7292:	de bf       	out	0x3e, r29	; 62
    7294:	0f be       	out	0x3f, r0	; 63
    7296:	cd bf       	out	0x3d, r28	; 61
    7298:	cf 91       	pop	r28
    729a:	df 91       	pop	r29
    729c:	1f 91       	pop	r17
    729e:	0f 91       	pop	r16
    72a0:	08 95       	ret

	if (Endpoint_IsSETUPReceived())
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
    72a2:	81 30       	cpi	r24, 0x01	; 1
    72a4:	29 f0       	breq	.+10     	; 0x72b0 <USB_Device_ProcessControlRequest+0xbe>
    72a6:	81 30       	cpi	r24, 0x01	; 1
    72a8:	08 f4       	brcc	.+2      	; 0x72ac <USB_Device_ProcessControlRequest+0xba>
    72aa:	81 c0       	rjmp	.+258    	; 0x73ae <USB_Device_ProcessControlRequest+0x1bc>
    72ac:	83 30       	cpi	r24, 0x03	; 3
    72ae:	01 f7       	brne	.-64     	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    72b0:	99 23       	and	r25, r25
    72b2:	09 f4       	brne	.+2      	; 0x72b6 <USB_Device_ProcessControlRequest+0xc4>
    72b4:	cc c0       	rjmp	.+408    	; 0x744e <USB_Device_ProcessControlRequest+0x25c>
    72b6:	92 30       	cpi	r25, 0x02	; 2
    72b8:	d9 f6       	brne	.-74     	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    72ba:	80 91 76 03 	lds	r24, 0x0376
    72be:	88 23       	and	r24, r24
    72c0:	21 f5       	brne	.+72     	; 0x730a <USB_Device_ProcessControlRequest+0x118>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    72c2:	20 91 78 03 	lds	r18, 0x0378
    72c6:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    72c8:	99 f2       	breq	.-90     	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    72ca:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    72ce:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    72d2:	80 ff       	sbrs	r24, 0
    72d4:	1a c0       	rjmp	.+52     	; 0x730a <USB_Device_ProcessControlRequest+0x118>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    72d6:	80 91 75 03 	lds	r24, 0x0375
    72da:	83 30       	cpi	r24, 0x03	; 3
    72dc:	09 f4       	brne	.+2      	; 0x72e0 <USB_Device_ProcessControlRequest+0xee>
    72de:	0e c1       	rjmp	.+540    	; 0x74fc <USB_Device_ProcessControlRequest+0x30a>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    72e0:	80 91 eb 00 	lds	r24, 0x00EB
    72e4:	80 61       	ori	r24, 0x10	; 16
    72e6:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    72ea:	81 e0       	ldi	r24, 0x01	; 1
    72ec:	90 e0       	ldi	r25, 0x00	; 0
    72ee:	02 c0       	rjmp	.+4      	; 0x72f4 <USB_Device_ProcessControlRequest+0x102>
    72f0:	88 0f       	add	r24, r24
    72f2:	99 1f       	adc	r25, r25
    72f4:	2a 95       	dec	r18
    72f6:	e2 f7       	brpl	.-8      	; 0x72f0 <USB_Device_ProcessControlRequest+0xfe>
    72f8:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
    72fc:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    7300:	80 91 eb 00 	lds	r24, 0x00EB
    7304:	88 60       	ori	r24, 0x08	; 8
    7306:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    730a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    730e:	80 91 e8 00 	lds	r24, 0x00E8
    7312:	87 7f       	andi	r24, 0xF7	; 247
    7314:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7318:	29 dd       	rcall	.-1454   	; 0x6d6c <Endpoint_ClearStatusStage>
    731a:	aa cf       	rjmp	.-172    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    731c:	99 23       	and	r25, r25
    731e:	09 f0       	breq	.+2      	; 0x7322 <USB_Device_ProcessControlRequest+0x130>
    7320:	a7 cf       	rjmp	.-178    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    7322:	10 91 76 03 	lds	r17, 0x0376
    7326:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7328:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    732a:	f8 94       	cli
    732c:	80 91 e8 00 	lds	r24, 0x00E8
    7330:	87 7f       	andi	r24, 0xF7	; 247
    7332:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    7336:	1a dd       	rcall	.-1484   	; 0x6d6c <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    7338:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
    733c:	80 ff       	sbrs	r24, 0
    733e:	fc cf       	rjmp	.-8      	; 0x7338 <USB_Device_ProcessControlRequest+0x146>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    7340:	80 91 e3 00 	lds	r24, 0x00E3
    7344:	80 78       	andi	r24, 0x80	; 128
    7346:	81 2b       	or	r24, r17

				UDADDR = Temp;
    7348:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    734c:	80 68       	ori	r24, 0x80	; 128
    734e:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7352:	11 23       	and	r17, r17
    7354:	09 f0       	breq	.+2      	; 0x7358 <USB_Device_ProcessControlRequest+0x166>
    7356:	90 c0       	rjmp	.+288    	; 0x7478 <USB_Device_ProcessControlRequest+0x286>
    7358:	82 e0       	ldi	r24, 0x02	; 2
    735a:	80 93 73 03 	sts	0x0373, r24
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    735e:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    7360:	87 cf       	rjmp	.-242    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    7362:	90 58       	subi	r25, 0x80	; 128
    7364:	92 30       	cpi	r25, 0x02	; 2
    7366:	08 f0       	brcs	.+2      	; 0x736a <USB_Device_ProcessControlRequest+0x178>
    7368:	83 cf       	rjmp	.-250    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
	    !(defined(USE_FLASH_DESCRIPTORS) || defined(USE_EEPROM_DESCRIPTORS) || defined(USE_RAM_DESCRIPTORS))
	uint8_t DescriptorAddressSpace;
	#endif

	#if !defined(NO_INTERNAL_SERIAL) && (USE_INTERNAL_SERIAL != NO_DESCRIPTOR)
	if (USB_ControlRequest.wValue == ((DTYPE_String << 8) | USE_INTERNAL_SERIAL))
    736a:	80 91 76 03 	lds	r24, 0x0376
    736e:	90 91 77 03 	lds	r25, 0x0377
    7372:	23 e0       	ldi	r18, 0x03	; 3
    7374:	8c 3d       	cpi	r24, 0xDC	; 220
    7376:	92 07       	cpc	r25, r18
    7378:	09 f4       	brne	.+2      	; 0x737c <USB_Device_ProcessControlRequest+0x18a>
    737a:	80 c0       	rjmp	.+256    	; 0x747c <USB_Device_ProcessControlRequest+0x28a>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    737c:	60 91 78 03 	lds	r22, 0x0378
    7380:	ae 01       	movw	r20, r28
    7382:	4f 5f       	subi	r20, 0xFF	; 255
    7384:	5f 4f       	sbci	r21, 0xFF	; 255
    7386:	0e 94 09 21 	call	0x4212	; 0x4212 <CALLBACK_USB_GetDescriptor>
    738a:	bc 01       	movw	r22, r24
    738c:	00 97       	sbiw	r24, 0x00	; 0
    738e:	09 f4       	brne	.+2      	; 0x7392 <USB_Device_ProcessControlRequest+0x1a0>
    7390:	6f cf       	rjmp	.-290    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7392:	80 91 e8 00 	lds	r24, 0x00E8
    7396:	87 7f       	andi	r24, 0xF7	; 247
    7398:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);
    739c:	89 81       	ldd	r24, Y+1	; 0x01
    739e:	9a 81       	ldd	r25, Y+2	; 0x02
    73a0:	b1 de       	rcall	.-670    	; 0x7104 <Endpoint_Write_Control_PStream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    73a2:	80 91 e8 00 	lds	r24, 0x00E8
    73a6:	8b 77       	andi	r24, 0x7B	; 123
    73a8:	80 93 e8 00 	sts	0x00E8, r24
    73ac:	61 cf       	rjmp	.-318    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;

		switch (USB_ControlRequest.bRequest)
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    73ae:	90 38       	cpi	r25, 0x80	; 128
    73b0:	09 f4       	brne	.+2      	; 0x73b4 <USB_Device_ProcessControlRequest+0x1c2>
    73b2:	59 c0       	rjmp	.+178    	; 0x7466 <USB_Device_ProcessControlRequest+0x274>
    73b4:	92 38       	cpi	r25, 0x82	; 130
    73b6:	09 f0       	breq	.+2      	; 0x73ba <USB_Device_ProcessControlRequest+0x1c8>
    73b8:	5b cf       	rjmp	.-330    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    73ba:	80 91 78 03 	lds	r24, 0x0378
    73be:	8f 70       	andi	r24, 0x0F	; 15
    73c0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    73c4:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
    73c8:	91 e0       	ldi	r25, 0x01	; 1
    73ca:	85 ff       	sbrs	r24, 5
    73cc:	90 e0       	ldi	r25, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    73ce:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    73d2:	80 91 e8 00 	lds	r24, 0x00E8
    73d6:	87 7f       	andi	r24, 0xF7	; 247
    73d8:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    73dc:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
    73e0:	10 92 f1 00 	sts	0x00F1, r1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    73e4:	80 91 e8 00 	lds	r24, 0x00E8
    73e8:	8e 77       	andi	r24, 0x7E	; 126
    73ea:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearSETUP();

	Endpoint_Write_16_LE(CurrentStatus);
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    73ee:	be dc       	rcall	.-1668   	; 0x6d6c <Endpoint_ClearStatusStage>
    73f0:	3f cf       	rjmp	.-386    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    73f2:	99 23       	and	r25, r25
    73f4:	09 f0       	breq	.+2      	; 0x73f8 <USB_Device_ProcessControlRequest+0x206>
    73f6:	3c cf       	rjmp	.-392    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    73f8:	80 91 76 03 	lds	r24, 0x0376
    73fc:	82 30       	cpi	r24, 0x02	; 2
    73fe:	08 f0       	brcs	.+2      	; 0x7402 <USB_Device_ProcessControlRequest+0x210>
    7400:	37 cf       	rjmp	.-402    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    7402:	90 91 e8 00 	lds	r25, 0x00E8
    7406:	97 7f       	andi	r25, 0xF7	; 247
    7408:	90 93 e8 00 	sts	0x00E8, r25
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    740c:	80 93 6f 03 	sts	0x036F, r24

	Endpoint_ClearStatusStage();
    7410:	ad dc       	rcall	.-1702   	; 0x6d6c <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
    7412:	80 91 6f 03 	lds	r24, 0x036F
    7416:	88 23       	and	r24, r24
    7418:	09 f4       	brne	.+2      	; 0x741c <USB_Device_ProcessControlRequest+0x22a>
    741a:	68 c0       	rjmp	.+208    	; 0x74ec <USB_Device_ProcessControlRequest+0x2fa>
	  USB_DeviceState = DEVICE_STATE_Configured;
    741c:	84 e0       	ldi	r24, 0x04	; 4
    741e:	80 93 73 03 	sts	0x0373, r24
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;

	EVENT_USB_Device_ConfigurationChanged();
    7422:	0e 94 ff 20 	call	0x41fe	; 0x41fe <EVENT_USB_Device_ConfigurationChanged>
    7426:	24 cf       	rjmp	.-440    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    7428:	90 38       	cpi	r25, 0x80	; 128
    742a:	09 f0       	breq	.+2      	; 0x742e <USB_Device_ProcessControlRequest+0x23c>
    742c:	21 cf       	rjmp	.-446    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
    742e:	80 91 e8 00 	lds	r24, 0x00E8
    7432:	87 7f       	andi	r24, 0xF7	; 247
    7434:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    7438:	80 91 6f 03 	lds	r24, 0x036F
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    743c:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    7440:	80 91 e8 00 	lds	r24, 0x00E8
    7444:	8e 77       	andi	r24, 0x7E	; 126
    7446:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    744a:	90 dc       	rcall	.-1760   	; 0x6d6c <Endpoint_ClearStatusStage>
    744c:	11 cf       	rjmp	.-478    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
	{
		#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_DeviceRemoteWakeup)
    744e:	90 91 76 03 	lds	r25, 0x0376
    7452:	91 30       	cpi	r25, 0x01	; 1
    7454:	09 f0       	breq	.+2      	; 0x7458 <USB_Device_ProcessControlRequest+0x266>
    7456:	0c cf       	rjmp	.-488    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
			  USB_Device_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    7458:	91 e0       	ldi	r25, 0x01	; 1
    745a:	83 30       	cpi	r24, 0x03	; 3
    745c:	09 f0       	breq	.+2      	; 0x7460 <USB_Device_ProcessControlRequest+0x26e>
    745e:	90 e0       	ldi	r25, 0x00	; 0
    7460:	90 93 71 03 	sts	0x0371, r25
    7464:	52 cf       	rjmp	.-348    	; 0x730a <USB_Device_ProcessControlRequest+0x118>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    7466:	90 91 70 03 	lds	r25, 0x0370
			if (USB_Device_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
			#endif

			#if !defined(NO_DEVICE_REMOTE_WAKEUP)
			if (USB_Device_RemoteWakeupEnabled)
    746a:	80 91 71 03 	lds	r24, 0x0371
    746e:	88 23       	and	r24, r24
    7470:	09 f4       	brne	.+2      	; 0x7474 <USB_Device_ProcessControlRequest+0x282>
    7472:	af cf       	rjmp	.-162    	; 0x73d2 <USB_Device_ProcessControlRequest+0x1e0>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    7474:	92 60       	ori	r25, 0x02	; 2
    7476:	ad cf       	rjmp	.-166    	; 0x73d2 <USB_Device_ProcessControlRequest+0x1e0>
	Endpoint_ClearStatusStage();

	while (!(Endpoint_IsINReady()));

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    7478:	83 e0       	ldi	r24, 0x03	; 3
    747a:	6f cf       	rjmp	.-290    	; 0x735a <USB_Device_ProcessControlRequest+0x168>
	{
		USB_Descriptor_Header_t Header;
		uint16_t                UnicodeString[INTERNAL_SERIAL_LENGTH_BITS / 4];
	} SignatureDescriptor;

	SignatureDescriptor.Header.Type = DTYPE_String;
    747c:	83 e0       	ldi	r24, 0x03	; 3
    747e:	8c 83       	std	Y+4, r24	; 0x04
	SignatureDescriptor.Header.Size = USB_STRING_LEN(INTERNAL_SERIAL_LENGTH_BITS / 4);
    7480:	8a e2       	ldi	r24, 0x2A	; 42
    7482:	8b 83       	std	Y+3, r24	; 0x03
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    7484:	6f b7       	in	r22, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    7486:	f8 94       	cli
				__builtin_ssrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				cli();
				#endif

				GCC_MEMORY_BARRIER();
    7488:	de 01       	movw	r26, r28
    748a:	15 96       	adiw	r26, 0x05	; 5
    748c:	80 e0       	ldi	r24, 0x00	; 0
    748e:	90 e0       	ldi	r25, 0x00	; 0
			static inline void USB_Device_GetSerialString(uint16_t* const UnicodeString)
			{
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;
    7490:	4e e0       	ldi	r20, 0x0E	; 14

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    7492:	51 e2       	ldi	r21, 0x21	; 33
    7494:	09 c0       	rjmp	.+18     	; 0x74a8 <USB_Device_ProcessControlRequest+0x2b6>
						SigReadAddress++;
					}

					SerialByte &= 0x0F;

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    7496:	30 e0       	ldi	r19, 0x00	; 0
    7498:	29 5c       	subi	r18, 0xC9	; 201
    749a:	3f 4f       	sbci	r19, 0xFF	; 255
    749c:	2d 93       	st	X+, r18
    749e:	3d 93       	st	X+, r19
    74a0:	01 96       	adiw	r24, 0x01	; 1
				uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
				GlobalInterruptDisable();

				uint8_t SigReadAddress = INTERNAL_SERIAL_START_ADDRESS;

				for (uint8_t SerialCharNum = 0; SerialCharNum < (INTERNAL_SERIAL_LENGTH_BITS / 4); SerialCharNum++)
    74a2:	84 31       	cpi	r24, 0x14	; 20
    74a4:	91 05       	cpc	r25, r1
    74a6:	89 f0       	breq	.+34     	; 0x74ca <USB_Device_ProcessControlRequest+0x2d8>
				{
					uint8_t SerialByte = boot_signature_byte_get(SigReadAddress);
    74a8:	e4 2f       	mov	r30, r20
    74aa:	f0 e0       	ldi	r31, 0x00	; 0
    74ac:	50 93 57 00 	sts	0x0057, r21
    74b0:	24 91       	lpm	r18, Z+

					if (SerialCharNum & 0x01)
    74b2:	80 ff       	sbrs	r24, 0
    74b4:	03 c0       	rjmp	.+6      	; 0x74bc <USB_Device_ProcessControlRequest+0x2ca>
					{
						SerialByte >>= 4;
    74b6:	22 95       	swap	r18
    74b8:	2f 70       	andi	r18, 0x0F	; 15
						SigReadAddress++;
    74ba:	4f 5f       	subi	r20, 0xFF	; 255
					}

					SerialByte &= 0x0F;
    74bc:	2f 70       	andi	r18, 0x0F	; 15

					UnicodeString[SerialCharNum] = cpu_to_le16((SerialByte >= 10) ?
    74be:	2a 30       	cpi	r18, 0x0A	; 10
    74c0:	50 f7       	brcc	.-44     	; 0x7496 <USB_Device_ProcessControlRequest+0x2a4>
    74c2:	30 e0       	ldi	r19, 0x00	; 0
    74c4:	20 5d       	subi	r18, 0xD0	; 208
    74c6:	3f 4f       	sbci	r19, 0xFF	; 255
    74c8:	e9 cf       	rjmp	.-46     	; 0x749c <USB_Device_ProcessControlRequest+0x2aa>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    74ca:	6f bf       	out	0x3f, r22	; 63
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    74cc:	80 91 e8 00 	lds	r24, 0x00E8
    74d0:	87 7f       	andi	r24, 0xF7	; 247
    74d2:	80 93 e8 00 	sts	0x00E8, r24

	USB_Device_GetSerialString(SignatureDescriptor.UnicodeString);

	Endpoint_ClearSETUP();

	Endpoint_Write_Control_Stream_LE(&SignatureDescriptor, sizeof(SignatureDescriptor));
    74d6:	ce 01       	movw	r24, r28
    74d8:	03 96       	adiw	r24, 0x03	; 3
    74da:	6a e2       	ldi	r22, 0x2A	; 42
    74dc:	70 e0       	ldi	r23, 0x00	; 0
    74de:	94 dd       	rcall	.-1240   	; 0x7008 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    74e0:	80 91 e8 00 	lds	r24, 0x00E8
    74e4:	8b 77       	andi	r24, 0x7B	; 123
    74e6:	80 93 e8 00 	sts	0x00E8, r24
    74ea:	c2 ce       	rjmp	.-636    	; 0x7270 <USB_Device_ProcessControlRequest+0x7e>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    74ec:	80 91 e3 00 	lds	r24, 0x00E3
	Endpoint_ClearStatusStage();

	if (USB_Device_ConfigurationNumber)
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    74f0:	87 ff       	sbrs	r24, 7
    74f2:	0a c0       	rjmp	.+20     	; 0x7508 <USB_Device_ProcessControlRequest+0x316>
    74f4:	84 e0       	ldi	r24, 0x04	; 4
    74f6:	80 93 73 03 	sts	0x0373, r24
    74fa:	93 cf       	rjmp	.-218    	; 0x7422 <USB_Device_ProcessControlRequest+0x230>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    74fc:	80 91 eb 00 	lds	r24, 0x00EB
    7500:	80 62       	ori	r24, 0x20	; 32
    7502:	80 93 eb 00 	sts	0x00EB, r24
    7506:	01 cf       	rjmp	.-510    	; 0x730a <USB_Device_ProcessControlRequest+0x118>
    7508:	81 e0       	ldi	r24, 0x01	; 1
    750a:	f5 cf       	rjmp	.-22     	; 0x74f6 <USB_Device_ProcessControlRequest+0x304>

0000750c <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
    750c:	08 95       	ret

0000750e <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    750e:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    7510:	80 91 73 03 	lds	r24, 0x0373
    7514:	88 23       	and	r24, r24
    7516:	91 f0       	breq	.+36     	; 0x753c <USB_USBTask+0x2e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7518:	80 91 e9 00 	lds	r24, 0x00E9
    751c:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    751e:	90 91 ec 00 	lds	r25, 0x00EC
    7522:	90 fd       	sbrc	r25, 0
    7524:	0d c0       	rjmp	.+26     	; 0x7540 <USB_USBTask+0x32>
    7526:	10 e0       	ldi	r17, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7528:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    752a:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    752e:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    7532:	83 fd       	sbrc	r24, 3
    7534:	0d c0       	rjmp	.+26     	; 0x7550 <USB_USBTask+0x42>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7536:	1f 70       	andi	r17, 0x0F	; 15
    7538:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    753c:	1f 91       	pop	r17
    753e:	08 95       	ret
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    7540:	10 e8       	ldi	r17, 0x80	; 128
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    7542:	18 2b       	or	r17, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    7544:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    7548:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    754c:	83 ff       	sbrs	r24, 3
    754e:	f3 cf       	rjmp	.-26     	; 0x7536 <USB_USBTask+0x28>
		  USB_Device_ProcessControlRequest();
    7550:	50 de       	rcall	.-864    	; 0x71f2 <USB_Device_ProcessControlRequest>
    7552:	f1 cf       	rjmp	.-30     	; 0x7536 <USB_USBTask+0x28>

00007554 <__mulsi3>:
    7554:	62 9f       	mul	r22, r18
    7556:	d0 01       	movw	r26, r0
    7558:	73 9f       	mul	r23, r19
    755a:	f0 01       	movw	r30, r0
    755c:	82 9f       	mul	r24, r18
    755e:	e0 0d       	add	r30, r0
    7560:	f1 1d       	adc	r31, r1
    7562:	64 9f       	mul	r22, r20
    7564:	e0 0d       	add	r30, r0
    7566:	f1 1d       	adc	r31, r1
    7568:	92 9f       	mul	r25, r18
    756a:	f0 0d       	add	r31, r0
    756c:	83 9f       	mul	r24, r19
    756e:	f0 0d       	add	r31, r0
    7570:	74 9f       	mul	r23, r20
    7572:	f0 0d       	add	r31, r0
    7574:	65 9f       	mul	r22, r21
    7576:	f0 0d       	add	r31, r0
    7578:	99 27       	eor	r25, r25
    757a:	72 9f       	mul	r23, r18
    757c:	b0 0d       	add	r27, r0
    757e:	e1 1d       	adc	r30, r1
    7580:	f9 1f       	adc	r31, r25
    7582:	63 9f       	mul	r22, r19
    7584:	b0 0d       	add	r27, r0
    7586:	e1 1d       	adc	r30, r1
    7588:	f9 1f       	adc	r31, r25
    758a:	bd 01       	movw	r22, r26
    758c:	cf 01       	movw	r24, r30
    758e:	11 24       	eor	r1, r1
    7590:	08 95       	ret

00007592 <__udivmodsi4>:
    7592:	a1 e2       	ldi	r26, 0x21	; 33
    7594:	1a 2e       	mov	r1, r26
    7596:	aa 1b       	sub	r26, r26
    7598:	bb 1b       	sub	r27, r27
    759a:	fd 01       	movw	r30, r26
    759c:	0d c0       	rjmp	.+26     	; 0x75b8 <__udivmodsi4_ep>

0000759e <__udivmodsi4_loop>:
    759e:	aa 1f       	adc	r26, r26
    75a0:	bb 1f       	adc	r27, r27
    75a2:	ee 1f       	adc	r30, r30
    75a4:	ff 1f       	adc	r31, r31
    75a6:	a2 17       	cp	r26, r18
    75a8:	b3 07       	cpc	r27, r19
    75aa:	e4 07       	cpc	r30, r20
    75ac:	f5 07       	cpc	r31, r21
    75ae:	20 f0       	brcs	.+8      	; 0x75b8 <__udivmodsi4_ep>
    75b0:	a2 1b       	sub	r26, r18
    75b2:	b3 0b       	sbc	r27, r19
    75b4:	e4 0b       	sbc	r30, r20
    75b6:	f5 0b       	sbc	r31, r21

000075b8 <__udivmodsi4_ep>:
    75b8:	66 1f       	adc	r22, r22
    75ba:	77 1f       	adc	r23, r23
    75bc:	88 1f       	adc	r24, r24
    75be:	99 1f       	adc	r25, r25
    75c0:	1a 94       	dec	r1
    75c2:	69 f7       	brne	.-38     	; 0x759e <__udivmodsi4_loop>
    75c4:	60 95       	com	r22
    75c6:	70 95       	com	r23
    75c8:	80 95       	com	r24
    75ca:	90 95       	com	r25
    75cc:	9b 01       	movw	r18, r22
    75ce:	ac 01       	movw	r20, r24
    75d0:	bd 01       	movw	r22, r26
    75d2:	cf 01       	movw	r24, r30
    75d4:	08 95       	ret

000075d6 <__prologue_saves__>:
    75d6:	2f 92       	push	r2
    75d8:	3f 92       	push	r3
    75da:	4f 92       	push	r4
    75dc:	5f 92       	push	r5
    75de:	6f 92       	push	r6
    75e0:	7f 92       	push	r7
    75e2:	8f 92       	push	r8
    75e4:	9f 92       	push	r9
    75e6:	af 92       	push	r10
    75e8:	bf 92       	push	r11
    75ea:	cf 92       	push	r12
    75ec:	df 92       	push	r13
    75ee:	ef 92       	push	r14
    75f0:	ff 92       	push	r15
    75f2:	0f 93       	push	r16
    75f4:	1f 93       	push	r17
    75f6:	cf 93       	push	r28
    75f8:	df 93       	push	r29
    75fa:	cd b7       	in	r28, 0x3d	; 61
    75fc:	de b7       	in	r29, 0x3e	; 62
    75fe:	ca 1b       	sub	r28, r26
    7600:	db 0b       	sbc	r29, r27
    7602:	0f b6       	in	r0, 0x3f	; 63
    7604:	f8 94       	cli
    7606:	de bf       	out	0x3e, r29	; 62
    7608:	0f be       	out	0x3f, r0	; 63
    760a:	cd bf       	out	0x3d, r28	; 61
    760c:	09 94       	ijmp

0000760e <__epilogue_restores__>:
    760e:	2a 88       	ldd	r2, Y+18	; 0x12
    7610:	39 88       	ldd	r3, Y+17	; 0x11
    7612:	48 88       	ldd	r4, Y+16	; 0x10
    7614:	5f 84       	ldd	r5, Y+15	; 0x0f
    7616:	6e 84       	ldd	r6, Y+14	; 0x0e
    7618:	7d 84       	ldd	r7, Y+13	; 0x0d
    761a:	8c 84       	ldd	r8, Y+12	; 0x0c
    761c:	9b 84       	ldd	r9, Y+11	; 0x0b
    761e:	aa 84       	ldd	r10, Y+10	; 0x0a
    7620:	b9 84       	ldd	r11, Y+9	; 0x09
    7622:	c8 84       	ldd	r12, Y+8	; 0x08
    7624:	df 80       	ldd	r13, Y+7	; 0x07
    7626:	ee 80       	ldd	r14, Y+6	; 0x06
    7628:	fd 80       	ldd	r15, Y+5	; 0x05
    762a:	0c 81       	ldd	r16, Y+4	; 0x04
    762c:	1b 81       	ldd	r17, Y+3	; 0x03
    762e:	aa 81       	ldd	r26, Y+2	; 0x02
    7630:	b9 81       	ldd	r27, Y+1	; 0x01
    7632:	ce 0f       	add	r28, r30
    7634:	d1 1d       	adc	r29, r1
    7636:	0f b6       	in	r0, 0x3f	; 63
    7638:	f8 94       	cli
    763a:	de bf       	out	0x3e, r29	; 62
    763c:	0f be       	out	0x3f, r0	; 63
    763e:	cd bf       	out	0x3d, r28	; 61
    7640:	ed 01       	movw	r28, r26
    7642:	08 95       	ret

00007644 <_exit>:
    7644:	f8 94       	cli

00007646 <__stop_program>:
    7646:	ff cf       	rjmp	.-2      	; 0x7646 <__stop_program>
